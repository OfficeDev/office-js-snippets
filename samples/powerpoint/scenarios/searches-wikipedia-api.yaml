order: 1
id: powerpoint-scenarios-searches-wikipedia-api
name: Search Wikipedia
description: Searches Wikipedia based on the selected text in the presentation.
author: cakriwut
host: POWERPOINT
api_set: {}
script:
    content: |-
        /*
         * Copyright (c) Riwut Libinuko. All rights reserved. Licensed under the MIT license.
        */

        declare let moment: any;

        document.getElementById("search").addEventListener("click", run);

        async function run() {
          Office.context.document.getSelectedDataAsync(Office.CoercionType.Text, {}, getSelectedText);
        }

        /* Extract selected text and call SearchWiki. */
        function getSelectedText(result) {
          const resultElement = document.getElementById("result");
          if (resultElement) {
            resultElement.innerHTML = "";
            const listElement = document.createElement("ul");
            listElement.className = "ms-List";
            listElement.id = "ms-List"; // Ensure the list has an ID for later reference
            resultElement.appendChild(listElement);
          }

          if (result.status === Office.AsyncResultStatus.Succeeded) {
            searchWiki(result.value);
          } else {
            console.error(result.error.message);
          }
        }

        /* Searching Wiki. */
        function searchWiki(pattern) {
          const url = build_wiki_search_url(pattern);

          fetch(url)
            .then((response) => response.json())
            .then((data) => {
              data.query.search.forEach((val) => {
                const date = moment(val.timestamp).format("YYYY-MM-DD hh:mm A");
                const listItem = build_list_item(val.title, val.pageid, val.snippet, date);
                const listElement = document.getElementById("ms-List");
                if (listElement) {
                  const tempDiv = document.createElement("div");
                  tempDiv.innerHTML = listItem;
                  const listItemNode = tempDiv.firstElementChild;
                  if (listItemNode) {
                    listElement.appendChild(listItemNode);
                  }
                }
              });

              return data.query;
            })
            .then((data) => {
              const listItems = document.querySelectorAll(".ms-ListItem");
              listItems.forEach((item) => {
                const link = item.querySelector(".listItem-link a");
                if (!link || link.innerHTML.length === 0) {
                  const pageId = item instanceof HTMLElement ? item.dataset.pageid : undefined;
                  if (pageId) {
                    getWikiLink(pageId, item);
                  }
                }
              });
            })
            .catch((error) => console.error("Error fetching Wikipedia data:", error));
        }

        // Search for Wiki Page link based on the given pageId.
        // Update itemHTML from the returned result.
        function getWikiLink(pageid, itemHTML) {
          const pageinfo = build_wiki_pageinfo(pageid);
          fetch(pageinfo)
            .then((response) => response.json())
            .then((data) => {
              const itemUrl = data.query.pages[pageid].fullurl;
              const images = data.query.pages[pageid].images;
              const titleElement = itemHTML.querySelector(".listItem-link");
              const title = titleElement ? titleElement.innerHTML : "";

              if (titleElement && itemUrl) {
                titleElement.innerHTML = `<a href="${itemUrl}" target="_blank">${title}</a>`;
              }

              if (images && images.length > 0) {
                const imageElement = itemHTML.querySelector(".ms-ListItem-image");
                if (imageElement) {
                  imageElement.setAttribute("data-image", images[0].title);
                }
              }
            })
            .then(() => {
              getWikiImages(pageid, itemHTML);
            })
            .catch((error) => console.error("Error fetching Wiki link:", error));
        }

        // Search for Wiki image based on the given pageId, first image.
        // Update itemHTML from the returned result.
        function getWikiImages(pageid, itemHTML) {
          const pageInfo = build_wiki_image_search(pageid);
          fetch(pageInfo)
            .then((response) => response.json())
            .then(async (data) => {
              const pageData = data.query.pages[pageid];
              if (pageData && pageData.original && pageData.original.source) {
                const originalImage = pageData.original.source;
                const imageElement = itemHTML.querySelector(".ms-ListItem-image");

                if (originalImage && imageElement) {
                  const imgElement = document.createElement("img");
                  imgElement.width = 70; // Set the width to 70px.
                  imgElement.src = originalImage;
                  imageElement.appendChild(imgElement);
                  return true;
                }
              } else {
                const imageElement = itemHTML.querySelector(".ms-ListItem-image");
                const img = imageElement ? imageElement.dataset.image : undefined;
                if (img) {
                  const pageInfoResult = await fetch(build_wiki_file_search(img));
                  return pageInfoResult.json();
                }
              }
            })
            .then((data) => {
              if (data && data.query) {
                const key = Object.keys(data.query.pages)[0];
                const page = data.query.pages[key];
                if (page && page.thumbnail && page.thumbnail.source) {
                  const thumbnail = page.thumbnail.source;
                  const imageElement = itemHTML.querySelector(".ms-ListItem-image");

                  if (thumbnail && imageElement) {
                    const imgElement = document.createElement("img");
                    imgElement.width = 70; // Set the width to 70px.
                    imgElement.src = thumbnail;
                    imageElement.appendChild(imgElement);
                  }
                }
              }
            })
            .catch((error) => console.error("Error fetching Wiki images:", error));
        }

        /* Wikipedia API query */
        function wiki_base(pattern) {
          const base_url = "https://en.wikipedia.org/w/api.php";
          const base_query = "?origin=*&action=query&format=json&prop=";
          return base_url + base_query + pattern;
        }

        /* Wikipedia Search Query pattern */
        function build_wiki_search_url(pattern) {
          const qry = "pageimages&list=search&srsearch=";
          return wiki_base(qry + pattern);
        }

        /* Wikipedia Image Query pattern */
        function build_wiki_image_search(pattern) {
          const qry = "pageimages&piprop=original&pilicense=any&pageids=";
          return wiki_base(qry + pattern);
        }

        /* Wikipedia File Query pattern */
        function build_wiki_file_search(pattern) {
          const qry = "pageimages|pageterms&pilicense=any&titles=";
          return wiki_base(qry + pattern);
        }

        /* Wikipedia Page Info Query pattern */
        function build_wiki_pageinfo(pattern) {
          const qry = "info|images&inprop=url&pageids=";
          return wiki_base(qry + pattern);
        }

        /* Render */
        function build_list_item(title, pageid, summary, ts) {
          return `
            <li class="ms-ListItem ms-ListItem--image" tabindex="0" data-pageid="${pageid}">
              <div class="ms-ListItem-image"></div>
              <span class="ms-ListItem-secondaryText listItem-link">${title}</span>
              <span>${summary}</span>
              <div class="ms-ListItem-selectionTarget"></div>
              <div class="ms-ListItem-actions">
                <div class="ms-ListItem-action">
                  <i class="ms-Icon ms-Icon--Flag"></i>
                </div>
                <div class="ms-ListItem-action">
                  <i class="ms-Icon ms-Icon--Pinned"></i>
                </div>
              </div>
            </li>`;
        }
    language: typescript
template:
    content: |-
        <header class="ms-Fabric ms-welcome__header ms-bgColor-neutralLighter" style="text-align: center">
          <h1 class="ms-font-su">Search Wikipedia</h1>
        </header>
        <section class="ms-Fabric ms-font-m">
          <p>This sample shows how to query external API (Wikipedia) with the text currently selected in the presentation.</p>
         </section>
        <section class="ms-Fabric setup ms-font-m">
          <h3>Try it out</h3>
          <p>Select any text in the presentation and press <b>Search</b> to see related Wikipedia entries.</p>
          <p>The search result will be provided by Wikipedia API. </p>
          <ol>
            <li>Click Search button: <br /><br />
              <button id="search" class="ms-Button">
                <span class="ms-Button-label">Search</span>
              </button>
            </li>
          </ol>
        </section>
        <section class="ms-Fabric sample ms-font-m">
          <h3>Result</h3>
          <div id="result">
          </div>
        </section>
    language: html
style:
    content: |-
        section.samples {
            margin-top: 20px;
        }

        section.samples .ms-Button, section.setup .ms-Button {
            display: block;
            margin-bottom: 5px;
            margin-left: 20px;
            min-width: 80px;
        }
    language: css
libraries: |-
    https://appsforoffice.microsoft.com/lib/1/hosted/office.js
    https://appsforoffice.microsoft.com/lib/1/hosted/office.d.ts

    https://unpkg.com/office-ui-fabric-core@11.1.0/dist/css/fabric.min.css
    https://unpkg.com/office-ui-fabric-js@1.5.0/dist/css/fabric.components.min.css

    https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.js
