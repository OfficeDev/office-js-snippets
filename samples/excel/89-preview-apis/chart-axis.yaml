order: 1
id: excel-89-preview-apis-chart-axis-
name: Chart axis
description: 'Get, set, and remove axis unit, label and title in a chart.'
host: EXCEL
api_set:
    ExcelAPI: 1.7
script:
    content: "$(\"#setup\").click(() => tryCatch(setup));
    $(\"#get-axis-unit\").click(() => tryCatch(getAxisUnit));
    $(\"#change-axis-unit\").click(() => tryCatch(changeAxisUnit));
    $(\"#remove-axis-label\").click(() => tryCatch(removeAxisLabel));
    $(\"#show-axis-label\").click(() => tryCatch(showAxisLabel));
    $(\"#set-axis-title\").click(() => tryCatch(setAxisTitle));
    
    async function getAxisUnit() {
        await Excel.run(async (context) => {
            const sheet = context.workbook.worksheets.getItem(\"Sample\");
    
            let chart = sheet.charts.getItemAt(0);
            let categoryAxis = chart.axes.categoryAxis;
            let valueAxis = chart.axes.valueAxis;
    
            categoryAxis.load();
            valueAxis.load();\_
           
            await context.sync();
    
            OfficeHelpers.UI.notify(\"The vertical axis display unit is: \" +  valueAxis.displayUnit);
        });
    }
    
    async function changeAxisUnit() {
        await Excel.run(async (context) => {
            const sheet = context.workbook.worksheets.getItem(\"Sample\");
    
            let chart = sheet.charts.getItemAt(0);
            let axis = chart.axes.valueAxis;
            axis.displayUnit = \"Hundreds\";
    
            await context.sync();
    
            OfficeHelpers.UI.notify(\"The vertical axis display unit has been changed to : \" + axis.displayUnit);
        });
    }
    
    async function removeAxisLabel() {
        await Excel.run(async (context) => {
            const sheet = context.workbook.worksheets.getItem(\"Sample\");
    
            let chart = sheet.charts.getItemAt(0);
            let axis = chart.axes.valueAxis;
            axis.showDisplayUnitLabel = false;
    
            await context.sync();
    
            OfficeHelpers.UI.notify(\"The vertical axis display unit has been changed to : \" + axis.showDisplayUnitLabel);
        });
    }
    
    async function showAxisLabel() {
        await Excel.run(async (context) => {
            const sheet = context.workbook.worksheets.getItem(\"Sample\");
    
            let chart = sheet.charts.getItemAt(0);
            let axis = chart.axes.valueAxis;
            axis.showDisplayUnitLabel = true;
            await context.sync();
    
            OfficeHelpers.UI.notify(\"The vertical axis display unit has been changed to : \" + + axis.showDisplayUnitLabel);
        });
    }
    
    async function setAxisTitle() {
        await Excel.run(async (context) => {
            const sheet = context.workbook.worksheets.getItem(\"Sample\");
    
            let chart = sheet.charts.getItemAt(0);
            let categoryAxis = chart.axes.categoryAxis;
            categoryAxis.title.text = \"Bicycle parts\";
    
            let valueAxis = chart.axes.valueAxis;
            valueAxis.title.text = \"Number of items\";
            valueAxis.hasTitle = true;
            valueAxis.minorGridlines.visible = true;
    
            categoryAxis.load();
            categoryAxis.title.load();
            valueAxis.load();
            valueAxis.minorGridlines.load();
    
            await context.sync();
    
            console.log(\"The category axis title is: \" + categoryAxis.title.text);
            console.log(\"The value axis title is: \" + valueAxis.title.text);
            
            OfficeHelpers.UI.notify(\"The minor gridlines visibility is set to: \" + valueAxis.minorGridlines.visible);
        });
    }
    
    async function setup() {
        await Excel.run(async (context) => {
            const sheet = await OfficeHelpers.ExcelUtilities
                .forceCreateSheet(context.workbook, \"Sample\");
            let expensesTable = sheet.tables.add('A1:E1', true);
            expensesTable.name = \"SalesTable\";
    
            expensesTable.getHeaderRowRange().values = [[\"Product\", \"Qtr1\", \"Qtr2\", \"Qtr3\", \"Qtr4\"]];
    
            expensesTable.rows.add(null, [
                [\"Frames\", 5000, 7000, 6544, 4377],
                [\"Saddles\", 400, 323, 276, 651],
                [\"Brake levers\", 12000, 8766, 8456, 9812],
                [\"Chains\", 1550, 1088, 692, 853],
                [\"Mirrors\", 225, 600, 923, 544],
                [\"Spokes\", 6005, 7634, 4589, 8765]
            ]);
    
            if (Office.context.requirements.isSetSupported(\"ExcelApi\", 1.7)) {
                sheet.getUsedRange().format.autofitColumns();
                sheet.getUsedRange().format.autofitRows();
            }
    
            createChart(context);
            addVerticalAxisLabel(context);
            sheet.activate();
    
            await context.sync();
        });
    }
    
    async function createChart(context: Excel.RequestContext) {
        const sheet = context.workbook.worksheets.getItem(\"Sample\");
        const salesTable = sheet.tables.getItem(\"SalesTable\");
    
        const dataRange = salesTable.getDataBodyRange();
    
        let chart = sheet.charts.add(\"ColumnClustered\", dataRange, Excel.ChartSeriesBy.columns);
    
        chart.setPosition(\"A15\", \"F30\");
        chart.title.text = \"Quarterly sales chart\";
        chart.legend.position = \"right\"
        chart.legend.format.fill.setSolidColor(\"white\");
        chart.dataLabels.format.font.size = 15;
        chart.dataLabels.format.font.color = \"black\";
        let points = chart.series.getItemAt(0).points;
        points.getItemAt(0).format.fill.setSolidColor(\"pink\");
        points.getItemAt(1).format.fill.setSolidColor(\"indigo\");
    }
    
    async function addVerticalAxisLabel(context: Excel.RequestContext) {
    
            const sheet = context.workbook.worksheets.getItem(\"Sample\");
    
            let chart = sheet.charts.getItemAt(0);
            let axis = chart.axes.valueAxis;
            axis.displayUnit = \"Thousands\";
    }
    
    /** Default helper for invoking an action and handling errors. */
    async function tryCatch(callback) {
        try {
            await callback();
        }
        catch (error) {
            OfficeHelpers.UI.notify(error);
            OfficeHelpers.Utilities.log(error);
        }
    }
    "
    language: typescript
template:
    content: |-
        <section class="ms-font-m">
            <p>This sample shows how to get, set, and remove axis unit, label and title in a chart.</p>
        </section>

        <section class="setup ms-font-m">
            <h3>Set up</h3>
            <button id="setup" class="ms-Button">
                <span class="ms-Button-label">Add sample data</span>
            </button>
        </section>

        <section class="samples ms-font-m">
            <h3>Try it out</h3>
            <button id="get-axis-unit" class="ms-Button">
                <span class="ms-Button-label">Get axis unit</span>
            </button>
        </section>

        <section class="samples ms-font-m">
            <button id="change-axis-unit" class="ms-Button">
                <span class="ms-Button-label">Change axis unit</span>
            </button>
        </section>

        <section class="samples ms-font-m">
            <button id="remove-axis-label" class="ms-Button">
                <span class="ms-Button-label">Remove axis label</span>
            </button>
        </section>

        <section class="samples ms-font-m">
            <button id="show-axis-label" class="ms-Button">
                <span class="ms-Button-label">Show axis label</span>
            </button>
        </section>

        <section class="samples ms-font-m">
            <button id="set-axis-title" class="ms-Button">
                <span class="ms-Button-label">Set axis title</span>
            </button>
        </section>
    language: html
style:
    content: "section.samples {\r
        margin-top: 20px;\r
    }\r
    \r
    section.samples .ms-Button, section.setup .ms-Button {\r
        display: block;\r
        margin-bottom: 5px;\r
        margin-left: 20px;\r
        min-width: 80px;\r
    }\r
    "
    language: css
libraries: |
    // Office.js
    https://appsforoffice.microsoft.com/lib/beta/hosted/office.js

    // CSS Libraries
    office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
    office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css

    // NPM libraries
    core-js@2.4.1/client/core.min.js
    @microsoft/office-js-helpers@0.7.4/dist/office.helpers.min.js
    jquery@3.1.1

    // IntelliSense: @types/library or node_modules paths or URL to d.ts files
    @microsoft/office-js@beta/dist/office.d.ts
    @types/core-js
    @microsoft/office-js-helpers@0.7.4/dist/office.helpers.d.ts
    @types/jquery