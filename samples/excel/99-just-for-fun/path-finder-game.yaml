order: 3
id: excel-just-for-fun-path-finder-game
name: Path finder
description: Uses range formatting to play a "pathfinder game". Contributed by Alexander Zlatkovski.
author: AlexanderZlatkovski
host: EXCEL
api_set:
    ExcelApi: 1.4
script:
    content: |
        $("#setup").click(setup);
        $("#repeat").click(repeat);

        const $pruneTheGrid = $("#step-by-step").click(pruneTheGrid);
        const $allAtOnce = $("#all-at-once").click(allAtOnce);

        const GRID_ROW_COUNT = 25;
        const GRID_COLUMN_COUNT = 30;

        let matrixPrevious: string[][]

        function setup() {
            const density = parseInt($("#density").val() as string) / 100;
            const symbol = "\u25cf";

            const matrix = new Array(GRID_ROW_COUNT);
            for (let r = 0; r < GRID_ROW_COUNT; r++) {
                matrix[r] = new Array(GRID_COLUMN_COUNT);
                for (let c = 0; c < GRID_COLUMN_COUNT; c++) {
                    matrix[r][c] = Math.random() < density ? symbol : "";
                }
            }

            matrixPrevious = matrix;
            $("#repeat").show();

            setupHelper(matrix);
        }

        function repeat() {
            setupHelper(matrixPrevious);
        }


        function setupHelper(matrix: string[][]) {
            tryCatch(() => Excel.run(async (context) => {
                context.workbook.worksheets.getItemOrNullObject("Path Finder").delete();
                const sheet = context.workbook.worksheets.add("Path Finder");

                sheet.getRange().format.set({
                    columnWidth: 16,
                    rowHeight: 16
                });

                const startCell = sheet.getRange("C5");
                const gridRange = startCell.getResizedRange(
                    GRID_ROW_COUNT - 1, GRID_COLUMN_COUNT - 1);

                gridRange.format.set({
                    font: { color: "#C00000", size: 25 },
                    fill: { color: "#E2EFDA" },
                    horizontalAlignment: Excel.HorizontalAlignment.center,
                    verticalAlignment: Excel.VerticalAlignment.center
                });

                gridRange.values = matrix;

                sheet.activate();
                await context.sync();
            }));
        }

        async function pruneTheGrid() {
            $pruneTheGrid.attr("disabled", "true");

            await tryCatch(() => Excel.run(async (context) => {
                const grid = context.workbook.worksheets
                    .getActiveWorksheet().getUsedRange().load("values");
                await context.sync();

                const values = grid.values;
                playOnce(grid.values);
                grid.values = values;
                await context.sync();
            }));

            $pruneTheGrid.removeAttr("disabled");
        }

        async function allAtOnce() {
            $allAtOnce.attr("disabled", "true");
            let counter = 0;

            await tryCatch(() => Excel.run(async (context) => {
                const grid = context.workbook.worksheets
                    .getActiveWorksheet().getUsedRange().load("values");
                await context.sync();

                const values = grid.values;

                let keepGoing = true;
                while (keepGoing) {
                    counter++;
                    if (!playOnce(grid.values)) {
                        keepGoing = false;
                    }
                }

                grid.values = values;
                await context.sync();
            }));

            console.log("Count of iterations: " + counter);
            $allAtOnce.removeAttr("disabled");
        }


        /** Remove unneeded values from one iteration of playing, and return true if made changes */
        function playOnce(values: string[][]) {
            const gridSizeRows = values.length;
            const gridSizeColumns = values[0].length;

            let madeChanges = false;

            // Search incoming path left to right, starting at 2nd column
            for (let r = 0; r < gridSizeRows; r++) {
                for (let c = 1; c < gridSizeColumns; c++) {
                    const hasAbove = r > 0 ? hasValue(values[r - 1][c - 1]) : false;
                    const hasAt = hasValue(values[r][c - 1]);
                    const hasBelow = r < (gridSizeRows - 1) ?
                        hasValue(values[r + 1][c - 1]) : false;

                    const hasAnyValues = hasAbove || hasAt || hasBelow;
                    if (!hasAnyValues) {
                        madeChanges = madeChanges || (values[r][c] !== "");
                        values[r][c] = "";
                    }
                }
            }

            // Search outgoing path (right to left), starting at first column
            for (let r = 0; r < gridSizeRows; r++) {
                for (let c = 0; c < gridSizeColumns - 1; c++) {
                    const hasAbove = r > 0 ? hasValue(values[r - 1][c + 1]) : false;
                    const hasAt = hasValue(values[r][c + 1]);
                    const hasBelow = r < (gridSizeRows - 1) ?
                        hasValue(values[r + 1][c + 1]) : false;

                    const hasAnyValues = hasAbove || hasAt || hasBelow;
                    if (!hasAnyValues) {
                        madeChanges = madeChanges || (values[r][c] !== "");
                        values[r][c] = "";
                    }
                }
            }

            return madeChanges;
        }

        function hasValue(value: string) {
            return (value.length > 0);
        }


        /** Default helper for invoking an action and handling errors. */
        async function tryCatch(callback: () => OfficeExtension.IPromise<any>) {
            try {
                await callback();
            }
            catch (error) {
                // Note: In a production add-in, you'd want to notify the user through your add-in's UI.
                console.error(error);
            }
        }
    language: typescript
template:
    content: |
        <section class="ms-font-m">
            <p>Check whether there is a path from left to right, moving forward one cell at a time (and only straight or diagonally). </p>
        </section>

        <h3 class="ms-font-l">Set up</h3>
        <section class="setup ms-font-m">
            <div>Circle density (%)</div>
            <input id="density" type="range" min="0" max="100" value="50"></input>
            <button id="setup" class="ms-Button ms-Button--primary">
                <span class="ms-Button-label">Setup grid</span>
            </button>
            <button id="repeat" class="ms-Button" style="display: none">
                <span class="ms-Button-label">Repeat</span>
            </button>
        </section>
        <br />

        <h3 class="ms-font-l">Find the path:</h3>
        <section class="find-path ms-font-m">
                <button id="all-at-once" class="ms-Button ms-Button--primary">
                <span class="ms-Button-label">Prune all at once</span>
            </button>
            <br/>

            <button id="step-by-step" class="ms-Button left-margin">
                <span class="ms-Button-label">Prune step-by-step</span>
            </button>
        </section>
    language: html
style:
    content: |-
        section.samples {
            margin-top: 10px;
        }

        section.setup > *, section.find-path > * {
            
            margin-bottom: 5px;
            margin-left: 20px;
        }

        #density {
            width: calc(100% - 40px);
            margin-bottom: 0;
        }
    language: css
libraries: |
    https://appsforoffice.microsoft.com/lib/1/hosted/office.js
    @types/office-js

    office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
    office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css

    core-js@2.4.1/client/core.min.js
    @types/core-js

    jquery@3.1.1
    @types/jquery@3.3.1