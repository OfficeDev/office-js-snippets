order: 11
id: word-paragraph-onchanged-event
name: On changing content in paragraphs
description: 'Registers, triggers, and deregisters the onParagraphChanged event that tracks when content is changed in paragraphs.'
host: WORD
api_set:
    WordApi: '1.6'
script:
    content: |
        $("#register-event-handler").click(() => tryCatch(registerEventHandler));
        $("#get-paragraph-by-id").click(() => tryCatch(getParagraphById));
        $("#deregister-event-handler").click(() => tryCatch(deregisterEventHandler));
        $("#setup").click(() => tryCatch(setup));

        let eventContext;

        async function registerEventHandler() {
          // Registers the onParagraphChanged event handler on the document.
          await Word.run(async (context) => {
            eventContext = context.document.onParagraphChanged.add(paragraphChanged);
            await context.sync();

            console.log("Added event handler for when content is changed in paragraphs.");
          });
        }

        async function paragraphChanged(event: Word.ParagraphChangedEventArgs) {
          await Word.run(async (context) => {
            console.log(`${event.type} event detected. IDs of paragraphs where content was changed:`);
            console.log(event.uniqueLocalIds);
          });
        }

        async function getParagraphById() {
          await Word.run(async (context) => {
            const paragraphId = $("#paragraph-id").val() as string;
            const paragraph = context.document.getParagraphByUniqueLocalId(paragraphId);
            paragraph.load();
            await paragraph.context.sync();

            console.log(paragraph);
          });
        }

        async function deregisterEventHandler() {
          await Word.run(eventContext.context, async (context) => {
            eventContext.remove();
            await context.sync();
          });

          eventContext = null;
          console.log("Removed event handler that was tracking content changes in paragraphs.");
        }

        async function setup() {
          await Word.run(async (context) => {
            const body = context.document.body;
            body.clear();
            body.insertParagraph("Paragraph 1", "End");
            body.insertParagraph("Paragraph 2", "End");
          });
        }

        // Default helper for invoking an action and handling errors.
        async function tryCatch(callback) {
          try {
            await callback();
          } catch (error) {
            // Note: In a production add-in, you'd want to notify the user through your add-in's UI.
            console.error(error);
          }
        }
    language: typescript
template:
    content: |-
        <section class="ms-font-m">
            This sample demonstrates how to use the onChanged event with paragraphs.
        </section>

        <section class="setup ms-font-m">
            <h3>Set up</h3>
            <button id="setup" class="ms-Button">
            <span class="ms-Button-label">Add paragraphs</span>
          </button>
        </section>

        <section class="samples ms-font-m">
            <h3>Try it out</h3>
            <button id="register-event-handler" class="ms-Button">
            <span class="ms-Button-label">Register event handler</span>
          </button>
            <p>
                <div class="ms-font-m">Within a paragraph, make a change in the text. Then, from the console, copy the paragraph
                    ID where content was changed and paste into the following field.</div>
                <label style="margin-left: 20px">Paragraph ID:</label>
                <input id="paragraph-id"/>
                <button id="get-paragraph-by-id" class="ms-Button">
                <span class="ms-Button-label">Get paragraph info</span>
              </button>
            </p>
            <button id="deregister-event-handler" class="ms-Button">
            <span class="ms-Button-label">Remove event handler</span>
          </button>
        </section>
    language: html
style:
    content: |-
        section.samples {
            margin-top: 20px;
        }

        section.samples .ms-Button, section.setup .ms-Button {
            display: block;
            margin-bottom: 5px;
            margin-left: 20px;
            min-width: 80px;
        }
    language: css
libraries: |
    https://appsforoffice.microsoft.com/lib/1/hosted/office.js
    @types/office-js

    office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
    office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css

    core-js@2.4.1/client/core.min.js
    @types/core-js

    jquery@3.1.1
    @types/jquery@3.3.1