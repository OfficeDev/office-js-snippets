order: 22
id: excel-range-dependents
name: Dependents
description: This sample shows how to find and highlight the dependents of the currently selected cell. Dependent cells contain formulas that refer to other cells.
host: EXCEL
api_set:
    ExcelAPI: '1.15'
script:
    content: |
        $("#setup").on("click", () => tryCatch(setup));
        $("#select-D3").on("click", () => tryCatch(selectD3));
        $("#get-all-dependents").on("click", () => tryCatch(getAllDependents));
        $("#clear-highlighting").on("click", () => tryCatch(clearFormatting));

        async function selectD3() {
          // This function selects a cell with dependents across both worksheets.
          await Excel.run(async (context) => {
            // Activate the sample worksheet.
            const sheet = context.workbook.worksheets.getItem("Sample2019Data");
            sheet.activate();

            // Select cell D3.
            const range = sheet.getRange("D3");
            range.select();
            await context.sync();
          });
        }

        async function getAllDependents() {
          // This function highlights all the dependent cells of the active cell.
          // Dependent cells contain formulas that refer to other cells.
          await Excel.run(async (context) => {
            // Get addresses of the active cell's dependent cells.
            const range = context.workbook.getActiveCell();
            const dependents = range.getDependents();
            range.load("address");
            dependents.areas.load("address");
            await context.sync();

            console.log(`All dependent cells of ${range.address}:`);

            // Use the dependents API to loop through dependents of the active cell.
            for (let i = 0; i < dependents.areas.items.length; i++) {
              // Highlight and print out the address of each dependent cell.
              dependents.areas.items[i].format.fill.color = "Orange";
              console.log(`  ${dependents.areas.items[i].address}`);
            }
            await context.sync();
          });
        }

        async function clearFormatting() {
          // This function removes highlighting from dependent cells.
          await Excel.run(async (context) => {
            const sheet1 = context.workbook.worksheets.getItem("Sample2019Data");
            const range1 = sheet1.getRange("B3:E5");
            range1.format.fill.clear();

            const sheet2 = context.workbook.worksheets.getItem("Sample2020Data");
            const range2 = sheet2.getRange("B3:F5");
            range2.format.fill.clear();

            await context.sync();
          });
        }

        /** Create two sample tables on different worksheets, with functions that span the tables. */
        async function setup() {
          await Excel.run(async (context) => {
            context.workbook.worksheets.getItemOrNullObject("Sample2019Data").delete();
            context.workbook.worksheets.getItemOrNullObject("Sample2020Data").delete();

            // Set up the first sample table.
            const sheet1 = context.workbook.worksheets.add("Sample2019Data");
            const data1 = [
              ["Product", "Qty", "Unit Price", "Total Price 2019"],
              ["Almonds", 2, 7.5, "=C3 * D3"],
              ["Coffee", 1, 34.5, "=C4 * D4"],
              ["Chocolate", 5, 9.56, "=C5 * D5"]
            ];

            const range1 = sheet1.getRange("B2:E5");
            range1.values = data1;
            range1.format.autofitColumns();

            // Set up the second sample table.
            const sheet2 = context.workbook.worksheets.add("Sample2020Data");
            const data2 = [
              ["Product", "Qty", "Unit Price", "Total Price 2020", "Average Annual Price"],
              ["Almonds", 2, 8.0, "=C3 * D3", "=Sample2019Data!E3 + E3 / 2"],
              ["Coffee", 1, 36.5, "=C4 * D4", "=Sample2019Data!E4 + E4 / 2"],
              ["Chocolate", 5, 11.2, "=C5 * D5", "=Sample2019Data!E5 + E5 / 2"]
            ];

            const range2 = sheet2.getRange("B2:F5");
            range2.values = data2;
            range2.format.autofitColumns();

            // Style the tables.
            const header1 = range1.getRow(0);
            header1.format.fill.color = "#4472C4";
            header1.format.font.color = "white";

            const header2 = range2.getRow(0);
            header2.format.fill.color = "#4472C4";
            header2.format.font.color = "white";

            sheet2.activate();

            await context.sync();
          });
        }

        /** Default helper for invoking an action and handling errors. */
        async function tryCatch(callback) {
          try {
            await callback();
          } catch (error) {
            // Note: In a production add-in, you'd want to notify the user through your add-in's UI.
            console.error(error);
          }
        }
    language: typescript
template:
    content: |-
        <section class="ms-Fabric ms-font-m">
          <p>This sample shows how to find and highlight the dependents of the currently selected cell. </p>
          <p>Dependent cells contain formulas that refer to other cells.</p>
        </section>
        <section class="ms-Fabric setup ms-font-m">
          <h3>Set up</h3> 
          <button id="setup" class="ms-Button"> 
            <span class="ms-Button-label">Add sample data</span> 
          </button>
        </section>
        <section class="ms-Fabric samples ms-font-m">
          <h3>Try it out</h3>
          <p>Cell D3 has dependents across worksheets.</p>
          <button id="select-D3" class="ms-Button">
            <span class="ms-Button-label">Select D3</span>
          </button>
          <button id="get-all-dependents" class="ms-Button"> 
            <span class="ms-Button-label">Get all dependents</span>
          </button>
          <button id="clear-highlighting" class="ms-Button"> 
            <span class="ms-Button-label">Clear highlighting</span> 
          </button>
        </section>   
    language: html
style:
    content: |
        section.samples {
            margin-top: 20px;
        }

        section.samples .ms-Button, section.setup .ms-Button {
            display: block;
            margin-bottom: 5px;
            margin-left: 20px;
            min-width: 80px;
        }
    language: css
libraries: |
    https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js
    @types/office-js

    office-ui-fabric-core@11.1.0/dist/css/fabric.min.css
    office-ui-fabric-js@1.5.0/dist/css/fabric.components.min.css

    core-js@2.4.1/client/core.min.js
    @types/core-js

    jquery@3.1.1
    @types/jquery@3.3.1