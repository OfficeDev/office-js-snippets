order: 1
id: word-scenarios-content-generation
name: Content Generation
description: Insert predefined or AI-generated content to different locations of the document.
host: WORD
api_set:
    WordApi: '1.5'
script:
    content: |
        $("#generate").click(() => tryCatch(generateTemplate));
        $("#skip-generate").click(() => tryCatch(updatePageDisplay));
        $("#back").click(() => tryCatch(back));
        $("#title-ai").click(() => tryCatch(insertAIGenerateTitle));
        $("#title-predefined").click(() => tryCatch(insertPredefinedTitle));
        $("#comment-ai").click(() => tryCatch(insertAIGenerateComment));
        $("#comment-predefined").click(() => tryCatch(insertPredefinedComment));
        $("#citation-ai").click(() => tryCatch(insertAIGenerateCitation));
        $("#citation-predefined").click(() => tryCatch(insertPredefinedCitation));
        $("#format").click(() => tryCatch(formatDocument));

        let azureAIParams = {
          endpoint: "",
          deployment: "",
          apiKey: "",
          apiVersion: "2023-05-15"
        };

        const azureAIPrompts = {
          title: "generate a title of meeting notes",
          comment: "generate a comment of meeting notes",
          citation: "generate a citation of meeting notes"
        };

        const predefinedData = {
          title: "This is a predefined title",
          comment: "This is a predefined comment",
          citation:
            "The Power of Storytelling in Education.\" TED, www.ted.com/talks/amanda_stevens_graham_the_power_of_storytelling_in_education."
        };

        function checkazureAIParams(): boolean {
          if (!azureAIParams.endpoint) {
            azureAIParams.endpoint = prompt("Input your Azure AI service endpoint:", azureAIParams.endpoint);
          }
          if (azureAIParams.endpoint && !azureAIParams.deployment) {
            azureAIParams.deployment = prompt("Input your Azure AI service deployment:", azureAIParams.deployment);
          }
          if (azureAIParams.endpoint && azureAIParams.deployment && !azureAIParams.apiKey) {
            azureAIParams.apiKey = prompt("Input your Azure AI service apiKey:", azureAIParams.apiKey);
          }
          if (azureAIParams.endpoint && azureAIParams.deployment && azureAIParams.apiKey) {
            return true;
          } else {
            return false;
          }
        }

        async function updatePageDisplay(hidMainPage: boolean = true) {
          let mainPage = document.getElementById("mainPage");
          let mainFunc = document.getElementById("mainFunc");
          if (hidMainPage) {
            mainPage.setAttribute("hidden", "hidden");
            mainFunc.removeAttribute("hidden");
          } else {
            mainFunc.setAttribute("hidden", "hidden");
            mainPage.removeAttribute("hidden");
          }
        }

        async function generateText(content: string, maxTokens: number = 1000) {
          let text = "";
          const response = await fetch(
            azureAIParams.endpoint +
              "openai/deployments/" +
              azureAIParams.deployment +
              "/completions?api-version=" +
              azureAIParams.apiVersion,
            {
              method: "POST",
              headers: {
                "api-key": azureAIParams.apiKey,
                "Content-Type": "application/json"
              },
              body: JSON.stringify({ prompt: content, max_tokens: maxTokens })
            }
          );
          await response.json().then((data) => {
            if (data.choices != null && data.choices.length > 0) {
              text = data.choices[0].text
                .replace("\n\r\n", "")
                .replace("\n", "")
                .replace("\n", "");
            }
          });
          return text;
        }

        async function insertTitle(titleStr: string) {
          await Word.run(async (context) => {
            const title = context.document.body.insertParagraph(titleStr, Word.InsertLocation.start);
            title.style = "Heading 1";
            //locate the inserted title
            title.select();
            await context.sync();
          });
        }

        async function insertFootnote(citation: string) {
          await Word.run(async (context) => {
            const range = context.document.getSelection();
            const footnote = range.insertFootnote(citation);
            //locate the inserted footnote
            footnote.body.getRange().select();
            await context.sync();
          });
        }

        async function insertComment(commentStr: string) {
          await Word.run(async (context) => {
            const range = context.document.getSelection();
            const comment = range.insertComment(commentStr);
            //locate the inserted comment
            comment.getRange().select();
            await context.sync();
          });
        }

        async function generateTemplate() {
          await Word.run(async (context) => {
            context.document.body.insertText("\n", Word.InsertLocation.end);
            const range = context.document.body.insertFileFromBase64(templateDoc, Word.InsertLocation.end);
            //locate the start position of the document
            range.getRange(Word.RangeLocation.start).select();
            await context.sync();
          });
          updatePageDisplay(true);
        }

        async function back() {
          updatePageDisplay(false);
        }

        async function insertAIGenerateTitle() {
          if (checkazureAIParams()) {
            await generateText(azureAIPrompts.title, 50).then((text) => {
              insertTitle(text);
            });
          }
        }

        async function insertPredefinedTitle() {
          await insertTitle(predefinedData.title);
        }

        async function insertAIGenerateComment() {
          if (checkazureAIParams()) {
            await generateText(azureAIPrompts.comment, 50).then((text) => {
              insertComment(text);
            });
          }
        }

        async function insertPredefinedComment() {
          await insertComment(predefinedData.comment);
        }

        async function insertAIGenerateCitation() {
          if (checkazureAIParams()) {
            await generateText(azureAIPrompts.citation, 50).then((text) => {
              insertFootnote(text);
            });
          }
        }

        async function insertPredefinedCitation() {
          await insertFootnote(predefinedData.citation);
        }

        async function formatDocument() {
          await Word.run(async (context) => {
            //set title to Heading 1 and text center alignment
            const firstPara = context.document.body.paragraphs.getFirst();
            firstPara.style = "Heading 1";
            firstPara.alignment = "Centered";
            await context.sync();

            //unify the headings to Heading2 and bold font
            const paragraphs = context.document.body.paragraphs;
            paragraphs.load();
            await context.sync();
            //skip the Title
            for (let i = 1; i < paragraphs.items.length; i++) {
              if (paragraphs.items[i].style == "Subtitle") {
                paragraphs.items[i].style = "Heading 2";
                paragraphs.items[i].font.bold = true;
              }
            }
            await context.sync();

            //set the list items of first level to bold
            const lists = context.document.body.lists;
            lists.load();
            await context.sync();
            for (let i = 0; i < lists.items.length; i++) {
              const list = lists.items[i];
              list.setLevelNumbering(0, Word.ListNumbering.upperRoman);
              const levelParas = list.getLevelParagraphs(0);
              levelParas.load();
              await context.sync();
              for (let j = 0; j < levelParas.items.length; j++) {
                const para = levelParas.items[j];
                para.font.bold = true;
              }
              await context.sync();
            }

            //if there are pictures, set the pictures to center alignment
            const pictures = context.document.body.inlinePictures;
            pictures.load();
            await context.sync();
            if (pictures.items.length > 0) {
              for (let k = 0; k < pictures.items.length; k++) {
                pictures.items[0].paragraph.alignment = "Centered";
                await context.sync();
              }
            }

            //if there are TBD or DONE keywords, set TBD to red and DONE to green
            const tbdRanges = context.document.body.search("TBD", { matchCase: true });
            const doneRanges = context.document.body.search("DONE", { matchCase: true });
            tbdRanges.load();
            doneRanges.load();
            await context.sync();
            for (let i = 0; i < tbdRanges.items.length; i++) {
              tbdRanges.items[i].font.highlightColor = "yellow";
            }
            await context.sync();
            for (let i = 0; i < doneRanges.items.length; i++) {
              doneRanges.items[i].font.highlightColor = "Turquoise";
            }
            await context.sync();
          });
        }

        /** Default helper for invoking an action and handling errors. */
        async function tryCatch(callback) {
          try {
            await callback();
          } catch (error) {
            // Note: In a production add-in, you'd want to notify the user through your add-in's UI.
            console.error(error);
          }
        }

        const templateDoc =
          "";
    language: typescript
template:
    content: |-
        <div style="height: 1px; width: 1px;">
            <img src="https://pnptelemetry.azurewebsites.net/pnp-officeaddins/samples/word-add-in-aigc-scriptlab">
        </div>
            <div class="wrapper">
                <div class="main_content">

                    <div id="mainFunc" hidden="hidden">
                        <div class="back">
                            <div class="cursor" id="back">
                                <span>Back</span>
                            </div>
                        </div>
                        <div class="main_func">
                            <div class="dropdown">
                                <button class="dropdown_list">Add a title</button>
                                <div class="dropdown-options">
                                    <a href="#" id="title-predefined">Add a predefined title</a>
                                    <a href="#" id="title-ai">Add a title generated by AI</a>
                                </div>
                            </div>
                            <div class="dropdown">
                                <button class="dropdown_list">Add a comment</button>
                                <div class="dropdown-options">
                                    <a href="#" id="comment-predefined">Add a predefined comment</a>
                                    <a href="#" id="comment-ai">Add a comment generated by AI</a>
                                </div>
                            </div>
                            <div class="dropdown">
                                <button class="dropdown_list">Add a citation in footnotes</button>
                                <div class="dropdown-options">
                                    <a href="#" id="citation-predefined">Add a predefined citation</a>
                                    <a href="#" id="citation-ai">Add a citation generated by AI</a>
                                </div>
                            </div>
                            <div class="dropdown">
                                <button class="dropdown_list" id="format">Format the document</button>
                            </div>
                        </div>
                    </div>
                    <div id="mainPage">

                        <div class="survey">
                            <a href="https://forms.office.com/Pages/ResponsePage.aspx?id=v4j5cvGGr0GRqy180BHbR8GFRbAYEV9Hmqgjcbr7lOdUNVAxQklNRkxCWEtMMFRFN0xXUFhYVlc5Ni4u"
                                target="_blank">
                                How do you like this sample? Tell us more!
                            </a>
                        </div>
                        <div class="header">
                            <div class="desc">This add-in demonstrate Word add-in capabilities to insert and format content
                                either generated by AI or predefined.</div>
                            <div class="desc">Please start with importing a sample document by clicking below button.</div>
                        </div>
                        <Button id="generate" class="generate_button">
                                        Generate Sample Document
                                    </Button>
                        <div class="generate_button_or">or</div>
                        <Button id="skip-generate" class="generate_button" onClick={this.openMainFunc}>
                                                            Skip generating sample content
                                                        </Button>
                    </div>
                </div>
                <div class="bottom">
                    <div class="bottom_item">
                        <div class="bottom_item_info">
                            <a href="https://learn.microsoft.com/en-us/office/dev/add-ins/quickstarts/word-quickstart?tabs=yeomangenerator"
                                target="_blank">
                                Explore more resources
                            </a>
                        </div>
                    </div>
                </div>
            </div>
    language: html
style:
    content: |-
        :root {
            --blue: #0070C0
        }
        section.samples {
            margin-top: 20px;
        }

        section.samples .ms-Button, section.setup .ms-Button {
            display: block;
            margin-bottom: 5px;
            margin-left: 20px;
            min-width: 80px;
        }

        .wrapper {
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            overflow: hidden;
            background-color: #F0F0F0;
        }

        .main_content {
            width: 100%;
            flex: 1;
        }

        .back {
            width: 100%;
            height: 20px;
            padding: 0.5rem;
            color: var(--blue);
        }

        .cursor {
            display: inline-block;
            cursor: pointer;
        }

        .main_func {
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .generate_button {
            width: 90%;
            color: white;
            background-color: var(--blue);
            margin: 1rem;
            font-weight: 500; 
        }

        .generate_button_or {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100%;
            font-size: 1rem;
        }

        .dropdown_list,
        .insert_button {
            width: 90%;
            color: var(--blue);
            margin: 1.5rem;
            font-weight: 500;
        }

        .survey {
            width: 100%;
            background-color: #c2f0c2;
            color: var(--blue);
            margin-bottom: 0.3rem;
        }

        .header {
            width: 100%;
            background-color: white;
            padding: 0.5rem 0;
        }

        .desc {
            color: var(--blue);
            font-weight: 500;
            display: block;
            width: calc(100% - 2rem);
            padding: 0.5rem 1rem;
        }

        .bottom {
            width: 100%;
        }

        .item_desc {
            margin: 0.2rem 1rem;
            font-weight: 500;
        }

        .bottom_item {
            width: 100%;
            font-weight: 400;
            background-color: white;
            margin: 0.3rem 0;
        }

        .item_icon {
            padding-top: 0.1rem;
            padding-bottom: 0.1rem;
            display: inline-block;
            color: var(--blue);
        }

        .bottom_item_info {
            display: inline-block;
            font-weight: 500;
        }

        .bottom_item_info a {
            color: var(--blue);
        }

        .dropdown {
          display: inline-block;
          position: relative;
          width: 90%;
        }

        .dropdown-options {
          display: none;
          position: relative;
          overflow: auto;
          background-color:#fff;
          border-radius:5px;
          box-shadow: 0px 10px 10px 0px rgba(0,0,0,0.4);
        }

        .dropdown:hover .dropdown-options {
          display: block;
        }

        .dropdown-options a {
          display: block;
          color: #000000;
          padding: 5px;
          text-decoration: none;
          padding:20px 40px;
        }

        .dropdown-options a:hover {
          color: #0a0a23;
          background-color: #ddd;
          border-radius:5px;
        }
    language: css
libraries: |
    https://appsforoffice.microsoft.com/lib/1/hosted/office.js
    @types/office-js

    office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
    office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css

    core-js@2.4.1/client/core.min.js
    @types/core-js

    jquery@3.1.1
    @types/jquery@3.3.1