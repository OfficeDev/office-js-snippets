order: 1
id: excel-89-preview-apis-chart-trendlines-
name: Chart trendlines
description: 'Add, get, set and format trendlines to a chart.'
host: EXCEL
api_set:
    ExcelAPI: 1.7
script:
    content: |+
        $("#setup").click(() => tryCatch(setup));
        $("#add-trendline-polynomial").click(() => tryCatch(addTrendlinePolynomial));
        $("#get-trendline").click(() => tryCatch(getTrendlineType));
        $("#get-trendline-color").click(() => tryCatch(getTrendlineColor));
        $("#set-trendline-color").click(() => tryCatch(setTrendlineColor));

        async function addTrendlinePolynomial() {
            await Excel.run(async (context) => {
                const sheet = context.workbook.worksheets.getItem("Sample");

                let seriesCollection = sheet.charts.getItemAt(0).series;

                 // Add a trendline of type polynomial.  
                seriesCollection.getItemAt(0).trendlines.add("Polynomial");
                let trendline = seriesCollection.getItemAt(0).trendlines.getItem(0);
                trendline.polynomialOrder = 5;        
                  
                await context.sync();        
            });
        }

        async function getTrendlineType() {
            await Excel.run(async (context) => {
                const sheet = context.workbook.worksheets.getItem("Sample");

                let seriesCollection = sheet.charts.getItemAt(0).series;

                // Get the type of chart trendline.  
                // In this sample, it's polynomial.
                let trendline = seriesCollection.getItemAt(0).trendlines.getItem(0);
                trendline.load("type");
                
                await context.sync();   

                console.log("The trendline type is:" + trendline.type);  
            });
        }

        async function getTrendlineColor() {
            await Excel.run(async (context) => {
                const sheet = context.workbook.worksheets.getItem("Sample");

                let seriesCollection = sheet.charts.getItemAt(0).series; 

                // Get the color used to draw the chart trendline.  
                // In this example, it's #4472c4 which is blue.
                let trendline = seriesCollection.getItemAt(0).trendlines.getItem(0);
                let line = trendline.format.line;
                line.load("color");

                await context.sync();
                console.log("The trendline color is:" + line.color);
            });
        }

        async function setTrendlineColor() {
            await Excel.run(async (context) => {
                const sheet = context.workbook.worksheets.getItem("Sample");

                let seriesCollection = sheet.charts.getItemAt(0).series; 
                let trendline = seriesCollection.getItemAt(0).trendlines.getItem(0);

                // Format the trendline to a solid line,
                // and set the color used to draw the chart trendline.
                let line = trendline.format.line;
                line.color = '#FF0000';  // #FF0000 is red color.
                //line.color = '#FFFF00'; // #FFFF00 is yellow color.
                console.log("The trendline color has been set to:" + line.color);    

                await context.sync();        
            });
        }

        async function setup() {
            await Excel.run(async (context) => {
                const sheet = await OfficeHelpers.ExcelUtilities
                    .forceCreateSheet(context.workbook, "Sample");
                let expensesTable = sheet.tables.add('A1:E1', true);
                expensesTable.name = "SalesTable";

                expensesTable.getHeaderRowRange().values = [["Product", "Qtr1", "Qtr2", "Qtr3", "Qtr4"]];

                expensesTable.rows.add(null, [
                    ["Frames", 5000, 7000, 6544, 4377],
                    ["Saddles", 400, 323, 276, 651],
                    ["Brake levers", 12000, 8766, 8456, 9812],
                    ["Chains", 1550, 1088, 692, 853],
                    ["Mirrors", 225, 600, 923, 544],
                    ["Spokes", 6005, 7634, 4589, 8765]
                ]);

                if (Office.context.requirements.isSetSupported("ExcelApi", 1.7)) {
                    sheet.getUsedRange().format.autofitColumns();
                    sheet.getUsedRange().format.autofitRows();
                }

                createChart(context);
                sheet.activate();

                await context.sync();
            });
        }

        async function createChart(context: Excel.RequestContext) {
            const sheet = context.workbook.worksheets.getItem("Sample");
            const salesTable = sheet.tables.getItem("SalesTable");

            const dataRange = salesTable.getDataBodyRange();

            let chart = sheet.charts.add("ColumnClustered", dataRange, Excel.ChartSeriesBy.columns);

            chart.setPosition("A15", "F30");
            chart.title.text = "Quarterly sales chart";
            chart.legend.position = "right"
            chart.legend.format.fill.setSolidColor("white");
            chart.dataLabels.format.font.size = 15;
            chart.dataLabels.format.font.color = "black";
            let points = chart.series.getItemAt(0).points;
            points.getItemAt(0).format.fill.setSolidColor("pink");
            points.getItemAt(1).format.fill.setSolidColor("indigo");
        }

        /** Default helper for invoking an action and handling errors. */
        async function tryCatch(callback) {
            try {
                await callback();
            }
            catch (error) {
                OfficeHelpers.UI.notify(error);
                OfficeHelpers.Utilities.log(error);
            }
        }



    language: typescript
template:
    content: |-
        <section class="ms-font-m">
            <p>This sample shows how to add, set, get and format chart trendlines.</p>
        </section>

        <section class="setup ms-font-m">
            <h3>Set up</h3>
            <button id="setup" class="ms-Button">
                <span class="ms-Button-label">Add sample data</span>
            </button>
        </section>

        <section class="samples ms-font-m">
            <h3>Try it out</h3>
            <button id="add-trendline-polynomial" class="ms-Button">
                <span class="ms-Button-label">Add trendline</span>
            </button>
        </section>

        <section class="samples ms-font-m">
            <button id="get-trendline" class="ms-Button">
                <span class="ms-Button-label">Get trendline type</span>
            </button>
        </section>

        <section class="samples ms-font-m">
            <button id="get-trendline-color" class="ms-Button">
                <span class="ms-Button-label">Get trendline color</span>
            </button>
        </section>
        <section class="samples ms-font-m">
            <button id="set-trendline-color" class="ms-Button">
                <span class="ms-Button-label">Format and set trendline color</span>
            </button>
        </section>
    language: html
style:
    content: "section.samples {\r\n    margin-top: 20px;\r\n}\r\n\r\nsection.samples .ms-Button, section.setup .ms-Button {\r\n    display: block;\r\n    margin-bottom: 5px;\r\n    margin-left: 20px;\r\n    min-width: 80px;\r\n}\r\n"
    language: css
libraries: |
    // Office.js
    https://appsforoffice.microsoft.com/lib/beta/hosted/office.js

    // CSS Libraries
    office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
    office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css

    // NPM libraries
    core-js@2.4.1/client/core.min.js
    @microsoft/office-js-helpers@0.7.4/dist/office.helpers.min.js
    jquery@3.1.1

    // IntelliSense: @types/library or node_modules paths or URL to d.ts files
    @microsoft/office-js@beta/dist/office.d.ts
    @types/core-js
    @microsoft/office-js-helpers@0.7.4/dist/office.helpers.d.ts
    @types/jquery