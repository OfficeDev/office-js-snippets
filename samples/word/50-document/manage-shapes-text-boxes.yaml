order: 17
id: word-document-manage-shapes-text-boxes
name: Work with shapes and text boxes
description: Shows how to work with shapes and text boxes.
author: yilin4
host: WORD
api_set:
    WordApiDesktop: '1.2'
script:
    content: |
        document
          .getElementById("insert-text-box-into-current-selection")
          .addEventListener("click", () => tryCatch(insertTextBoxIntoCurrentSelection));
        document.getElementById("get-text-boxes-in-main-doc").addEventListener("click", () => tryCatch(getTextBoxesInMainDoc));
        document
          .getElementById("insert-text-box-in-header-at-first-paragraph")
          .addEventListener("click", () => tryCatch(insertTextBoxInHeaderAtFirstParagraph));
        document.getElementById("get-text-box-in-header").addEventListener("click", () => tryCatch(getTextBoxInHeader));
        document.getElementById("set-text-box-properties").addEventListener("click", () => tryCatch(setTextBoxProperties));
        document
          .getElementById("insert-content-control-into-text-box")
          .addEventListener("click", () => tryCatch(insertContentControlIntoTextBox));
        document
          .getElementById("get-content-controls-in-text-box")
          .addEventListener("click", () => tryCatch(getContentControlsInTextBox));
        document
          .getElementById("insert-picture-at-start-of-text-box")
          .addEventListener("click", () => tryCatch(insertPictureAtStartOfTextBox));
        document.getElementById("delete-first-text-box").addEventListener("click", () => tryCatch(deleteFirstTextBox));
        document.getElementById("setup").addEventListener("click", () => tryCatch(setup));

        async function insertTextBoxIntoCurrentSelection() {
          await Word.run(async (context) => {
            // Inserts a text box at the beginning of the selection.
            const range = context.document.getSelection();
            const insertShapeOptions: Word.InsertShapeOptions = {
              top: 0,
              left: 0,
              height: 100,
              width: 100
            };

            const newTextBox = range.insertTextBox("placeholder text", insertShapeOptions);
            await context.sync();

            console.log("Inserted text box at the beginning of the current selection.");
          });
        }

        async function getTextBoxesInMainDoc() {
          await Word.run(async (context) => {
            // Gets text boxes in main document.
            const shapes = context.document.body.shapes;
            shapes.load();
            await context.sync();

            if (shapes.items.length > 0) {
              shapes.items.forEach(function(shape, index) {
                if (shape.type == Word.ShapeType.textBox) {
                  console.log(`Shape ${index + 1} in the main document has a text box. Properties:`, shape);
                }
              });
            } else {
              console.log("No shapes found in main document.");
            }
          });
        }

        async function insertTextBoxInHeaderAtFirstParagraph() {
          await Word.run(async (context) => {
            // Inserts text box at the beginning of the first paragraph in header.
            const headerFooterBody = context.document.sections.getFirst().getHeader(Word.HeaderFooterType.primary);
            headerFooterBody.load("paragraphs");
            //await context.sync();
            const firstParagraph = headerFooterBody.paragraphs.getFirst();
            const insertShapeOptions: Word.InsertShapeOptions = {
              top: 0,
              left: 0,
              height: 100,
              width: 100
            };
            const newTextBox = firstParagraph.insertTextBox("placeholder text", insertShapeOptions);
            newTextBox.select();
            await context.sync();

            console.log("Inserted text box at the beginning of the first paragraph in the header.");
          });
        }

        async function getTextBoxInHeader() {
          await Word.run(async (context) => {
            // Gets text boxes in header.
            const shapes = context.document.sections.getFirst().getHeader(Word.HeaderFooterType.primary).shapes;
            shapes.load();
            await context.sync();

            if (shapes.items.length > 0) {
              shapes.items.forEach(function(shape, index) {
                if (shape.type == Word.ShapeType.textBox) {
                  console.log(`Shape ${index + 1} in header has a text box. Properties:`, shape);
                }
              });
            } else {
              console.log("No shapes found in header.");
            }
          });
        }

        async function setTextBoxProperties() {
          await Word.run(async (context) => {
            // Sets the properties of the first text box.
            const firstShape = context.document.body.shapes.getFirst();
            firstShape.top = 115;
            firstShape.left = 0;
            firstShape.width = 50;
            firstShape.height = 50;
            await context.sync();

            console.log("The first shape's properties were updated.", firstShape);
          });
        }

        async function insertContentControlIntoTextBox() {
          await Word.run(async (context) => {
            // Inserts a content control into the first paragraph in the first text box.
            const firstShape = context.document.body.shapes.getFirst();
            firstShape.load("type/body");
            await context.sync();

            if (firstShape.type == Word.ShapeType.textBox) {
              const firstParagraphInTextBox = firstShape.body.paragraphs.getFirst();
              const newControl = firstParagraphInTextBox.insertContentControl();
              newControl.load();
              await context.sync();

              console.log("New content control properties:", newControl);
            }
          });
        }

        async function getContentControlsInTextBox() {
          await Word.run(async (context) => {
            // Gets the content controls in the first text box.
            const firstShape = context.document.body.shapes.getFirst();
            firstShape.load("type/body");
            await context.sync();

            if (firstShape.type == Word.ShapeType.textBox) {
              const contentControlsInTextBox = firstShape.body.contentControls;
              contentControlsInTextBox.load();
              await context.sync();

              console.log(`There are ${contentControlsInTextBox.items.length} content controls in total.`);
            }
          });
        }

        async function insertPictureAtStartOfTextBox() {
          await Word.run(async (context) => {
            // Inserts a picture at the start of the first text box.
            const firstShape = context.document.body.shapes.getFirst();
            firstShape.load("type/body");
            await context.sync();

            if (firstShape.type == Word.ShapeType.textBox) {
              const startRange = firstShape.body.getRange(Word.RangeLocation.start);
              const newPic = startRange.insertInlinePictureFromBase64(PictureBase64, Word.InsertLocation.start);
              newPic.load();
              await context.sync();

              console.log("New inline picture properties:", newPic);
            }
          });
        }

        async function deleteFirstTextBox() {
          await Word.run(async (context) => {
            // Deletes the first text box.
            context.document.body.shapes.getFirst().delete();
            await context.sync();

            console.log("The first shape in document was deleted.");
          });
        }

        async function setup() {
          await Word.run(async (context) => {
            const body: Word.Body = context.document.body;
            body.clear();
            body.insertParagraph(
              "Do you want to create a solution that extends the functionality of Word? You can use the Office Add-ins platform to extend Word clients running on the web, on a Windows desktop, or on a Mac.",
              "Start"
            );
            body.paragraphs
              .getLast()
              .insertText(
                "Use add-in commands to extend the Word UI and launch task panes that run JavaScript that interacts with the content in a Word document. Any code that you can run in a browser can run in a Word add-in. Add-ins that interact with content in a Word document create requests to act on Word objects and synchronize object state.",
                "Replace"
              );
          });
        }

        let PictureBase64 =
          "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";

        // Default helper for invoking an action and handling errors.
        async function tryCatch(callback) {
          try {
            await callback();
          } catch (error) {
            // Note: In a production add-in, you'd want to notify the user through your add-in's UI.
            console.error(error);
          }
        }
    language: typescript
template:
    content: |-
        <section class="ms-Fabric ms-font-m">
            This sample demonstrates how to work with shapes and text boxes.
        </section>
        <section class="ms-Fabric setup ms-font-m">
            <h3>Set up</h3>
            <button id="setup" class="ms-Button">
              <span class="ms-Button-label">Add text</span>
          </button>
        </section>
        <section class="ms-Fabric samples ms-font-m">
            <h3>Try it out</h3>
            <button id="insert-text-box-into-current-selection" class="ms-Button">
                <span class="ms-Button-label">Insert text box into current selection</span>
            </button>
            <button id="get-text-boxes-in-main-doc" class="ms-Button">
              <span class="ms-Button-label">Get text boxes in main document</span>
          </button>
            <button id="insert-text-box-in-header-at-first-paragraph" class="ms-Button">
              <span class="ms-Button-label">Insert text box into header</span>
          </button>
            <button id="get-text-box-in-header" class="ms-Button">
              <span class="ms-Button-label">Get text boxes in header</span>
          </button>
            <button id="set-text-box-properties" class="ms-Button">
              <span class="ms-Button-label">Set text box properties</span>
          </button>
            <button id="insert-content-control-into-text-box" class="ms-Button">
              <span class="ms-Button-label">Insert content control into text box</span>
          </button>
            <button id="get-content-controls-in-text-box" class="ms-Button">
              <span class="ms-Button-label">Get content controls in text box</span>
          </button>
            <button id="insert-picture-at-start-of-text-box" class="ms-Button">
              <span class="ms-Button-label">Insert picture into text box</span>
          </button>
            <button id="delete-first-text-box" class="ms-Button">
              <span class="ms-Button-label">Delete first text box from document</span>
          </button>
        </section>
    language: html
style:
    content: |-
        section.samples {
            margin-top: 20px;
        }

        section.samples .ms-Button, section.setup .ms-Button {
            display: block;
            margin-bottom: 5px;
            margin-left: 20px;
            min-width: 80px;
        }
    language: css
libraries: |-
    https://appsforoffice.microsoft.com/lib/1/hosted/office.js
    https://appsforoffice.microsoft.com/lib/1/hosted/office.d.ts

    https://unpkg.com/office-ui-fabric-core@11.1.0/dist/css/fabric.min.css
    https://unpkg.com/office-ui-fabric-js@1.5.0/dist/css/fabric.components.min.css