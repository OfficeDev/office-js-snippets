id: outlook-work-with-client-signatures
name: Work with client signatures (Compose)
description: 'Check if the client signature is enabled, disable the client signature, get the compose type, and set a signature in Compose mode.'
host: OUTLOOK
api_set:
    Mailbox: preview
script:
    content: |
        $("#isClientSignatureEnabled").click(isClientSignatureEnabled);
        $("#disableClientSignature").click(disableClientSignature);
        $("#getComposeType").click(getComposeType);
        $("#setSignature").click(setSignature);
        $("#setSignatureWithInlineImage").click(setSignatureWithInlineImage);

        function isClientSignatureEnabled() {
          // Check if the client signature is currently enabled.
          Office.context.mailbox.item.isClientSignatureEnabledAsync(function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log("isClientSignatureEnabledAsync succeeded with result: " + asyncResult.value);
            } else {
              console.error(asyncResult.error);
            }
          });
        }

        function disableClientSignature() {
          // Disable the client signature.
          Office.context.mailbox.item.disableClientSignatureAsync(function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log("disableClientSignatureAsync succeeded");
            } else {
              console.error(asyncResult.error);
            }
          });
        }

        function getComposeType() {
          // Get the compose type of the current item (mail only).
          Office.context.mailbox.item.getComposeTypeAsync(function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(
                "getComposeTypeAsync succeeded with composeType: " +
                  asyncResult.value.composeType +
                  " and coercionType: " +
                  asyncResult.value.coercionType
              );
            } else {
              console.error(asyncResult.error);
            }
          });
        }

        function setSignature() {
          // Set the signature for the current item.
          var signature = $("#signature").val();
          console.log(`Setting signature to "${signature}".`);
          Office.context.mailbox.item.body.setSignatureAsync(signature, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log("setSignatureAsync succeeded");
            } else {
              console.error(asyncResult.error);
            }
          });
        }

        function setSignatureWithInlineImage() {
          // Set the signature for the current item with inline image.
          var modIcon1Base64 = "iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA2ZpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYxIDY0LjE0MDk0OSwgMjAxMC8xMi8wNy0xMDo1NzowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpDRDMxMDg1MjBCNDZFMTExODE2MkM1RUI2M0M4MDYxRCIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpFMTUxQjgyRjQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpFMTUxQjgyRTQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M1LjEgV2luZG93cyI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkQxMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkNEMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+uC/WfAAAAehJREFUeNpilCzfwEAEkAbiECA2A2J1IOaHin8E4ptAfBaIVwLxU0IGMRKw0B6IW4DYhoE4cASIK6E0VsCEQ1wUiNcB8QESLGOAqj0MxBuhZhBloS4QnwHiQAbygR/UDF1CFupCXSjHQDmQg5qli8tCUBBsQUoQ1AD8UDNFsVk4n0o+w+bT+egWglKjNymmeGhLkqLcG2oHAwtUoIuQDj5OVgZPLUmwRe5aEmAxqYqNpFgKssOcCeplM0KqdST5GfpDDRm0JfkYrj3/SE7QguyQY4ImYYLgCtAS10kHGMw6dzNsv/qC7OwCClJXYlR++v6b4er3j5QmIFcmaNlIL6AOslCIjhYKMTHQGTBBqxh6gXcgC6/R0cKbIAv30dHCfaAKGJTxHxJSqS3Fz9DkowNmywpyMcgA8fF7b8D8VWcfM6w8+4gYC+VB+RCk8hSh0gaUD4/dewvlvUWRe/z+GzGWgex4BGtiOAHxXhoHpzMoSGHZAhSPW2lo2VZYWkHOh4nEtLrIAE+hZmNUwK+B2BOIv1PRsu9QM1/jatNcBtVZ0IREKXgENesyoVYbzNIdFFi2A5tl+NqlL6BB4QBNzsSCU1A9nlAzMAALAQMOQl0qB23qWwKxIlIrDBQ394H4OBCvISYqAAIMACVibHDqsO7zAAAAAElFTkSuQmCC";
          Office.context.mailbox.item.addFileAttachmentFromBase64Async(
            modIcon1Base64,
            "myImage.png",
            { isInline: true },
            function(result) {
              if (result.status == Office.AsyncResultStatus.Succeeded) {
                var signature = $("#signature").val() + "<img src='cid:myImage.png'>";
                console.log(`Setting signature to "${signature}".`);
                // Important: setSignatureAsync is currently in preview.
                Office.context.mailbox.item.body.setSignatureAsync(
                  signature,
                  { coercionType: "html" },
                  function(asyncResult) {
                    console.log(`setSignatureAsync: ${asyncResult.status}`);
                  }
                );
              } else {
                console.error(`addFileAttachmentFromBase64Async: ${result.error}`);
              }
            }
          );
        }
    language: typescript
template:
    content: |-
        <section class="ms-font-m">
            <p>This sample shows how to check if the client signature is enabled, disable the client signature, get the compose
                type, and set the signature.
                <p>
                    <b>Required mode</b>: Compose
                </p>
            </p>
        </section>

        <section class="samples ms-font-m">
            <h3>Try it out</h3>
            <button id="isClientSignatureEnabled" class="ms-Button">
                <div class="ms-Button-label">isClientSignatureEnabled</div>
            </button>
            <button id="disableClientSignature" class="ms-Button">
                <div class="ms-Button-label">disableClientSignature</div>
            </button>
            <button id="getComposeType" class="ms-Button">
                <div class="ms-Button-label">getComposeType</div>
            </button>
            <div class="ms-TextField">
                <label class="ms-Label">Signature:</label>
                <input id="signature" class="ms-TextField-field" type="text" value="This is my signature" placeholder="">
            </div>
            <button id="setSignature" class="ms-Button">
                <div class="ms-Button-label">setSignature</div>
            </button>
            <button id="setSignatureWithInlineImage" class="ms-Button">
              <div class="ms-Button-label">setSignature with inline image</div>
            </button>
        </section>
    language: html
style:
    content: |-
        section.samples {
            margin-top: 20px;
        }

        section.samples .ms-Button, section.setup .ms-Button {
            display: block;
            margin-bottom: 5px;
            margin-left: 20px;
            min-width: 80px;
        }
    language: css
libraries: |
    https://appsforoffice.microsoft.com/lib/beta/hosted/office.js
    @types/office-js-preview

    office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
    office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css

    core-js@2.4.1/client/core.min.js
    @types/core-js

    jquery@3.1.1
    @types/jquery@3.3.1