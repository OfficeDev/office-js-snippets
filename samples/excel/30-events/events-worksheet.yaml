order: 15
id: excel-events-worksheet
name: Worksheet events
description: 'Registers event handlers that run when data is changed in worksheet, the selected range changes in a worksheet, or the worksheet is recalculated.'
author: OfficeDev
host: EXCEL
api_set:
    ExcelApi: '1.7'
script:
    content: |-
        $("#setup").on("click", () => tryCatch(setup));

        $("#register-on-selection-changed-handler").on("click", () => tryCatch(registerSelectionChangedHandler));
        $("#select-range").on("click", () => tryCatch(selectRange));

        $("#register-on-changed-handler").on("click", () => tryCatch(registerOnChangedHandler));
        $("#register-onCalculated-handler").on("click", () => tryCatch(registerOnCalculatedHandler));
        $("#recalculate").on("click", () => tryCatch(recalculate));

        $("#delete-data").on("click", () => tryCatch(deleteData));

        async function registerSelectionChangedHandler() {
            await Excel.run(async (context) => {
                let sheet = context.workbook.worksheets.getItem("Sample");
                sheet.onSelectionChanged.add(onSelectionChange);
                await context.sync();

                console.log("Added a worksheet-level selection change event handler.");
            });
        }

        async function selectRange() {
            await Excel.run(async (context) => {
                let sheet = context.workbook.worksheets.getItem("Sample");
                let range = sheet.getRange("B7:C7");
                range.select();

                await context.sync();
            });
        }

        async function onSelectionChange(event) {
            await Excel.run(async (context) => {
                console.log("The selected range has changed to: " + event.address);
            });
        }

        async function registerOnCalculatedHandler() {
            await Excel.run(async (context) => {
                let sheet = context.workbook.worksheets.getItem("Sample");
                sheet.onCalculated.add(onCalculated);
                await context.sync();

                console.log("Added a worksheet-level on-calculated event handler.");
            });
        }

        async function recalculate() {
            await Excel.run(async (context) => {
                let sheet = context.workbook.worksheets.getItem("Sample");
                let randomResult = context.workbook.functions.randBetween(1, 3000).load("value");
                await context.sync();

                let row = sheet.tables.getItem("SalesTable").rows.getItemAt(0);
                let newValue = [["Frames", 5000, 7000, 6544, randomResult.value, "=SUM(B2:E2)"]];
                row.values = newValue;
                row.load("values");
                await context.sync();
            });
        }

        async function onCalculated(event) {
            await Excel.run(async (context) => {
                console.log("The worksheet has recalculated.");
            });
        }

        async function registerOnChangedHandler() {
            await Excel.run(async (context) => {
                let sheet = context.workbook.worksheets.getItem("Sample");
                sheet.onChanged.add(onChange);
                await context.sync();

                console.log("Added a worksheet-level data-changed event handler.");
            });
        }

        async function changeData() {
            await Excel.run(async (context) => {
                let sheet = context.workbook.worksheets.getItem("Sample");
                let range = sheet.getRange("B5");
                range.values = [[800]];
                range.format.autofitColumns();

                await context.sync();

                console.log("B5 value has been changed.");
            });
        }

        async function deleteData() {
            // This function deletes data from a range and sets the delete shift direction to "up".
            await Excel.run(async (context) => {
                const sheet = context.workbook.worksheets.getItem("Sample");
                const range = sheet.getRange("A5:F5");
                range.delete(Excel.DeleteShiftDirection.up);
            });
        }

        async function onChange(event: Excel.WorksheetChangedEventArgs) {
            // This function is an event handler that returns the address, trigger source, 
            // and insert or delete shift directions of the change.
            await Excel.run(async (context) => {
                // Return the address where change occurred.
                console.log(`Handler for worksheet onChanged event has been triggered.`);
                console.log(`    Data changed address: ` + event.address);

                // Return the source of the event that triggered the change.
                console.log(`    Data change trigger source: ` + event.triggerSource);

                // Noteï¼šinsertShiftDirection and deleteShiftDirection are exclusive and both enums can't have a value at the same time. 
                // If one has a value, then the other will return undefined.

                // If the insert shift direction is defined, return it.
                if (event.changeDirectionState.insertShiftDirection) {
                    console.log(`    Cells inserted shift direction: ` + event.changeDirectionState.insertShiftDirection);
                }

                // If the delete shift direction is defined, return it.
                if (event.changeDirectionState.deleteShiftDirection) {
                    console.log(`    Cells deleted shift direction: ` + event.changeDirectionState.deleteShiftDirection);
                }
            });
        }  

        async function setup() {
            await Excel.run(async (context) => {
                context.workbook.worksheets.getItemOrNullObject("Sample").delete();
                const sheet = context.workbook.worksheets.add("Sample");

                let salesTable = sheet.tables.add("A1:F1", true);
                salesTable.name = "SalesTable";

                salesTable.getHeaderRowRange().values = [["Product", "Qtr1", "Qtr2", "Qtr3", "Qtr4", "Total"]];

                salesTable.rows.add(null, [
                    ["Frames", 5000, 7000, 6544, 4377, "=SUM(B2:E2)"],
                    ["Saddles", 400, 323, 276, 651, "=SUM(B3:E3)"],
                    ["Brake levers", 12000, 8766, 8456, 9812, "=SUM(B4:E4)"],
                    ["Chains", 1550, 1088, 692, 853, "=SUM(B5:E5)"],
                    ["Mirrors", 225, 600, 923, 544, "=SUM(B6:E6)"],
                    ["Spokes", 6005, 7634, 4589, 8765, "=SUM(B7:E7)"]
                ]);

                sheet.activate();
                await context.sync();
            });
        }

        /** Default helper for invoking an action and handling errors. */
        async function tryCatch(callback) {
            try {
                await callback();
            } catch (error) {
                // Note: In a production add-in, you'd want to notify the user through your add-in's UI.
                console.error(error);
            }
        }
    language: typescript
template:
    content: |-
        <section class="ms-font-m">
            <p>This sample shows how to register and use an event handler for the worksheet onSelectionChanged event.</p>
        </section>

        <section class="setup ms-font-m">
            <h3>Set up</h3>
            <button id="setup" class="ms-Button">
            <span class="ms-Button-label">Add sample data</span>
        </button>
        </section>

        <section class="samples ms-font-m">
            <h3>Try it out</h3>

            <p><b>Selection Changed</b></p><section class="samples ms-font-m">
            <button id="register-on-selection-changed-handler" class="ms-Button">
                <span class="ms-Button-label">Register onSelectionChanged handler</span>
            </button>
            <button id="select-range" class="ms-Button">
                <span class="ms-Button-label">Select range</span>
            </button>
            <p><b>Changed and Calculated</b></p>
            <button id="register-on-changed-handler" class="ms-Button">
                <span class="ms-Button-label">Register onChanged event handler</span>
            </button>
            <button id="register-onCalculated-handler" class="ms-Button">
                <span class="ms-Button-label">Register onCalculated handler</span>
            </button>
            <button id="recalculate" class="ms-Button">
                <span class="ms-Button-label">Change the value of E2</span>
            </button>
            <p><b>Detect insert and delete shift directions</b></p>
            <p>Use the "Insert" and "Delete" buttons in the Excel UI to trigger the onChanged event. Or, use the following "Delete" button to see the properties returned by the event when a table row is removed.</p>
            <button id="delete-data" class="ms-Button">
                <span class="ms-Button-label">Delete data from table</span>
            </button>
        </section>
    language: html
style:
    content: |
        section.samples {
            margin-top: 20px;
        }

        section.samples .ms-Button, section.setup .ms-Button {
            display: block;
            margin-bottom: 5px;
            margin-left: 20px;
            min-width: 80px;
        }
    language: css
libraries: |
    https://appsforoffice.microsoft.com/lib/1/hosted/office.js
    @types/office-js

    office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
    office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css

    core-js@2.4.1/client/core.min.js
    @types/core-js

    jquery@3.1.1
    @types/jquery@3.3.1