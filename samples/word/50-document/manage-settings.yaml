order: 9
id: word-document-manage-settings
name: Manage settings
description: 'This sample shows how to add, edit, get, and delete custom settings on a document.'
host: WORD
api_set:
    WordApi: '1.4'
script:
    content: |
        $("#add-edit-setting").click(() => tryCatch(addEditSetting));
        $("#get-all-settings").click(() => tryCatch(getAllSettings));
        $("#delete-all-settings").click(() => tryCatch(deleteAllSettings));

        async function addEditSetting() {
          // Adds a new custom setting or
          // edits the value of an existing one.
          await Word.run(async (context) => {
            const key = $("#key")
              .val()
              .toString();

            if (key == "") {
              console.error("Key shouldn't be empty");
              return;
            }

            const value = $("#value")
              .val()
              .toString();

            const settings = context.document.settings;
            const setting = settings.add(key, value);
            setting.load();
            await context.sync();

            console.log("Setting added or edited:");
            console.log(setting);
          });
        }

        async function getAllSettings() {
          // Gets all custom settings this add-in set on this document.
          await Word.run(async (context) => {
            const settings = context.document.settings;
            settings.load("items");
            await context.sync();

            if (settings.items.length == 0) {
              console.log("There are no settings");
            } else {
              console.log("All settings:");
              for (let i = 0; i < settings.items.length; i++) {
                console.log(settings.items[i]);
              }
            }
          });
        }

        async function deleteAllSettings() {
          // Deletes all custom settings this add-in had set on this document.
          await Word.run(async (context) => {
            const settings = context.document.settings;
            settings.deleteAll();
            await context.sync();
            console.log("All settings deleted");
          });
        }

        /** Default helper for invoking an action and handling errors. */
        async function tryCatch(callback) {
          try {
            await callback();
          } catch (error) {
            // Note: In a production add-in, you'd want to notify the user through your add-in's UI.
            console.error(error);
          }
        }
    language: typescript
template:
    content: |-
        <section class="ms-font-m">
            <p>This sample shows how to add, edit, get, and delete custom settings on a document. Settings created by an add-in
                can
                only be managed by that add-in.</p>
        </section>

        <section class="samples ms-font-m">
            <h3>Try it out</h3>
            <p>Add a new setting, or edit an existing one</p>
            <div class="ms-TextField">
                <label class="msLabel">Key:&nbsp;&nbsp;&nbsp;</label>
                <input id="key" class="msTextField-field" type="text">
            </div>
                <div class="ms-TextField">
                    <label class="msLabel">Value:</label>
                    <input id="value" class="msTextField-field" type="text">
            </div>
                    <button id="add-edit-setting" class="ms-Button">
            <span class="ms-Button-label">Add or edit setting</span>
          </button>
                    <p>Get all settings</p>
                    <button id="get-all-settings" class="ms-Button">
            <span class="ms-Button-label">Get settings</span>
          </button>
                    <p>Delete all settings</p>
                    <button id="delete-all-settings" class="ms-Button">
            <span class="ms-Button-label">Delete settings</span>
          </button>
        </section>
    language: html
style:
    content: |-
        section.samples {
            margin-top: 20px;
        }

        section.samples .ms-Button, section.setup .ms-Button {
            display: block;
            margin-bottom: 5px;
            margin-left: 20px;
            min-width: 80px;
        }
    language: css
libraries: |
    https://appsforoffice.microsoft.com/lib/1/hosted/office.js
    @types/office-js

    office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
    office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css

    core-js@2.4.1/client/core.min.js
    @types/core-js

    jquery@3.1.1
    @types/jquery@3.3.1