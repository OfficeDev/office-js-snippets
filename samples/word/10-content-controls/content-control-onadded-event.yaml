order: 2
id: word-content-controls-content-control-onadded-event
name: On adding content controls
description: 'Registers, triggers, and deregisters onAdded event that tracks the addition of content controls.'
host: WORD
api_set:
    WordApi: '1.5'
script:
    content: |
        $("#register-event-handler").on("click", () => tryCatch(registerEventHandler));
        $("#insert-content-controls").on("click", () => tryCatch(insertContentControls));
        $("#deregister-event-handler").on("click", () => tryCatch(deregisterEventHandler));
        $("#setup").on("click", () => tryCatch(setup));

        let eventContext;

        async function registerEventHandler() {
          // Registers the onAdded event handler on the document.
          await Word.run(async (context) => {
            eventContext = context.document.onContentControlAdded.add(contentControlAdded);
            await context.sync();

            console.log("Added event handler for when content controls are added.");
          });
        }

        async function contentControlAdded(event: Word.ContentControlAddedEventArgs) {
          await Word.run(async (context) => {
            console.log(`${event.eventType} event detected. IDs of content controls that were added:`, event.ids);
          });
        }

        async function insertContentControls() {
          // Traverses each paragraph of the document and wraps a content control on each.
          await Word.run(async (context) => {
            const paragraphs: Word.ParagraphCollection = context.document.body.paragraphs;
            paragraphs.load("$none"); // Don't need any properties; just wrap each paragraph with a content control.

            await context.sync();

            for (let i = 0; i < paragraphs.items.length; i++) {
              let contentControl = paragraphs.items[i].insertContentControl();
              contentControl.tag = "forTesting";
            }

            console.log("Content controls inserted: " + paragraphs.items.length);

            await context.sync();
          });
        }

        async function deregisterEventHandler() {
            await Word.run(eventContext.context, async (context) => {
              eventContext.remove();
              await context.sync();
            });

          eventContext = null;
          console.log("Removed event handler that was tracking when content controls are added.");
        }

        async function setup() {
          await Word.run(async (context) => {
            const body: Word.Body = context.document.body;
            body.clear();
            body.insertParagraph("One more paragraph.", "Start");
            body.insertParagraph("Inserting another paragraph.", "Start");
            body.insertParagraph(
              "Do you want to create a solution that extends the functionality of Word? You can use the Office Add-ins platform to extend Word clients running on the web, on a Windows desktop, or on a Mac.",
              "Start"
            );
            body.paragraphs
              .getLast()
              .insertText(
                "Use add-in commands to extend the Word UI and launch task panes that run JavaScript that interacts with the content in a Word document. Any code that you can run in a browser can run in a Word add-in. Add-ins that interact with content in a Word document create requests to act on Word objects and synchronize object state.",
                "Replace"
              );
          });
        }

        // Default helper for invoking an action and handling errors.
        async function tryCatch(callback) {
          try {
            await callback();
          } catch (error) {
            // Note: In a production add-in, you'd want to notify the user through your add-in's UI.
            console.error(error);
          }
        }
    language: typescript
template:
    content: |-
        <section class="ms-font-m">
            This sample demonstrates how to use the onAdded event with content controls.
        </section>

        <section class="setup ms-font-m">
            <h3>Set up</h3>
            <button id="setup" class="ms-Button">
            <span class="ms-Button-label">Setup</span>
          </button>
        </section>

        <section class="samples ms-font-m">
            <h3>Try it out</h3>
            <span class="ms-font-m">Register event handler.</span>
            <button id="register-event-handler" class="ms-Button">
            <span class="ms-Button-label">Register</span>
          </button>
            <span class="ms-font-m">Insert content controls.</span>
            <button id="insert-content-controls" class="ms-Button">
              <span class="ms-Button-label">Insert</span>
            </button>
            <span class="ms-font-m">Remove event handler.</span>
            <button id="deregister-event-handler" class="ms-Button">
              <span class="ms-Button-label">Remove</span>
            </button>
        </section>
    language: html
style:
    content: |-
        section.samples {
            margin-top: 20px;
        }

        section.samples .ms-Button, section.setup .ms-Button {
            display: block;
            margin-bottom: 5px;
            margin-left: 20px;
            min-width: 80px;
        }
    language: css
libraries: |-
    https://appsforoffice.microsoft.com/lib/1/hosted/office.js
    @types/office-js

    office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
    office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css

    core-js@2.4.1/client/core.min.js
    @types/core-js

    jquery@3.1.1
    @types/jquery@3.3.1