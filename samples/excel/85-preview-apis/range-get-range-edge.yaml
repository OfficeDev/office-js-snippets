order: 8
id: excel-get-range-edge
name: Select range edge
description: This sample shows two ways to select the edge of a range, based on the currently selected range.
host: EXCEL
api_set:
    ExcelAPI: '1.13'
script:
    content: |
      $("#select-C4").click(() => tryCatch(selectC4));
      $("#select-D5-F7").click(() => tryCatch(selectD5F7));
      $("#get-range-edge-left").click(() => tryCatch(getRangeEdgeLeft));
      $("#get-range-edge-up").click(() => tryCatch(getRangeEdgeUp));
      $("#get-extended-range-right").click(() => tryCatch(getExtendedRangeRight));
      $("#get-extended-range-down").click(() => tryCatch(getExtendedRangeDown));

      async function getRangeEdgeLeft() {
        await Excel.run(async (context) => {
          // Get the selected range.
          const range = context.workbook.getSelectedRange();

          // Get the active cell in the workbook.
          const activeCell = context.workbook.getActiveCell();

          // Get the cell at the furthest edge of the currently selected range, in the "Left" direction. 
          // This action matches the result of using the Control+Arrow key keyboard shortcut while a range is selected.
          const rangeEdge = range.getRangeEdge(
            "Left", // Define the direction as a string.
            activeCell // If the selected range contains more than one cell, the active cell must be defined.
          );

          // Select the edge of the range.
          rangeEdge.select();

          await context.sync();
        });
      }

      async function getRangeEdgeUp() {
        await Excel.run(async (context) => {
          // Get the selected range.
          const range = context.workbook.getSelectedRange();

          // Define the direction with the `KeyboardDirection` enum.
          const direction = Excel.KeyboardDirection.up;

          // Get the active cell in the workbook.
          const activeCell = context.workbook.getActiveCell();

          // Get the cell at the furthest edge of the currently selected range, in the "up" direction. 
          // This action matches the result of using the Control+Arrow key keyboard shortcut while a range is selected.
          const rangeEdge = range.getRangeEdge(
            direction, // Define the direction.
            activeCell // If the selected range contains more than one cell, the active cell must be defined.
          );
          rangeEdge.select();

          await context.sync();
        });
      }

      async function getExtendedRangeRight() {
        await Excel.run(async (context) => {
          // Get the selected range.
          const range = context.workbook.getSelectedRange();

          // Get the active cell in the workbook.
          const activeCell = context.workbook.getActiveCell();

          // Get all the cells from the currently selected range to the furthest edge of the currently selected range, in the "Right" direction. 
          // This action matches the result of using the Control+Shift+Arrow key keyboard shortcut while a range is selected.
          const extendedRange = range.getExtendedRange(
            "Right", // Define the direction as a string.
            activeCell // If the selected range contains more than one cell, the active cell must be defined.
          );
          extendedRange.select();

          await context.sync();
        });
      }

      async function getExtendedRangeDown() {
        await Excel.run(async (context) => {
          // Get the selected range.
          const range = context.workbook.getSelectedRange();

          // Define the direction with the `KeyboardDirection` enum.
          const direction = Excel.KeyboardDirection.down;

          // Get the active cell in the workbook.
          const activeCell = context.workbook.getActiveCell();

          // Get all the cells from the currently selected range to the furthest edge of the currently selected range, in the "down" direction. 
          // This action matches the result of using the Control+Shift+Arrow key keyboard shortcut while a range is selected.
          const extendedRange = range.getExtendedRange(
            direction, // Define the direction.
            activeCell // If the selected range contains more than one cell, the active cell must be defined.
          );
          extendedRange.select();

          await context.sync();
        });
      }

      /** Select a range with one cell. */
      async function selectC4() {
        await Excel.run(async (context) => {
          // Get the active worksheet.
          const sheet = context.workbook.worksheets.getActiveWorksheet();

          // Select cell C4.
          const range = sheet.getRange("C4");
          range.select();
          await context.sync();
        });
      }

      /** Select a range with multiple cells. */
      async function selectD5F7() {
        await Excel.run(async (context) => {
          // Get the active worksheet.
          const sheet = context.workbook.worksheets.getActiveWorksheet();

          // Select range D5:F7.
          const range = sheet.getRange("D5:F7");
          range.select();
          await context.sync();
        });
      }

      /** Default helper for invoking an action and handling errors. */
      async function tryCatch(callback) {
        try {
          await callback();
        } catch (error) {
          // Note: In a production add-in, you'd want to notify the user through your add-in's UI.
          console.error(error);
        }
      }
    language: typescript
template:
    content: |-
      <section class="ms-font-m">
        <p>This sample shows two ways to select the edge of a range, based on the currently selected range.</p>
      </section>

      <section class="setup ms-font-m">
        <h3>Set up</h3>
        <button id="select-C4" class="ms-Button">
          <span class="ms-Button-label">Select single cell</span>
        </button>
        <button id="select-D5-F7" class="ms-Button">
          <span class="ms-Button-label">Select multiple cells</span>
        </button>
      </section>

      <section class="samples ms-font-m">
        <h3>Try it out</h3>
        <p>The first type of range edge selection in this sample shows how to select the cell at the furthest edge of the currently selected range, in the directions up or left. This action matches the result of using the Control+Arrow key keyboard shortcut while a range is selected.</p>
        <button id="get-range-edge-left" class="ms-Button">
          <span class="ms-Button-label">Get left edge of range</span>
        </button>
        <button id="get-range-edge-up" class="ms-Button">
          <span class="ms-Button-label">Get upward edge of range</span>
        </button>
        <br>
        <p>The second type of range edge selection in this sample shows how to select all the cells from the currently selected range to the furthest edge of the range, in the directions right or down. This action matches the result of using the Control+Shift+Arrow key keyboard shortcut while a range is selected.</p>
        <button id="get-extended-range-right" class="ms-Button">
          <span class="ms-Button-label">Get extended range to the right</span>
        </button>
        <button id="get-extended-range-down" class="ms-Button">
          <span class="ms-Button-label">Get extended range downward</span>
        </button>
      </section>
    language: html
style:
    content: |-
        section.samples {
            margin-top: 20px;
        }
        section.samples .ms-Button, section.setup .ms-Button {
            display: block;
            margin-bottom: 5px;
            margin-left: 20px;
            min-width: 80px;
        }
    language: css
libraries: |
    https://appsforoffice.microsoft.com/lib/beta/hosted/office.js
    @types/office-js-preview
    office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
    office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css
    core-js@2.4.1/client/core.min.js
    @types/core-js
    jquery@3.1.1
    @types/jquery@3.3.1