order: 2
id: word-lists-organize-list
name: Organize a list
description: Shows how to create and organize a list.
author: OfficeDev
host: WORD
api_set:
    WordApi: '1.3'
script:
    content: |
        $("#insert-list").on("click", () => tryCatch(insertOrganizeList));
        $("#get-list-props").on("click", () => tryCatch(getListProps));
        $("#setup").on("click", () => tryCatch(setup));

        async function insertOrganizeList() {
          // Inserts a list starting with the first paragraph then set numbering and bullet types of the list items.
          await Word.run(async (context) => {
            const paragraphs: Word.ParagraphCollection = context.document.body.paragraphs;
            paragraphs.load("$none");

            await context.sync();

            // Use the first paragraph to start a new list.
            const list: Word.List = paragraphs.items[0].startNewList();
            list.load("$none");

            await context.sync();

            // To add new items to the list, use Start or End on the insertLocation parameter.
            list.insertParagraph("New list item at the start of the list", "Start");
            const paragraph: Word.Paragraph = list.insertParagraph("New list item at the end of the list (set to list level 5)", "End");

            // Set numbering for list level 1.
            list.setLevelNumbering(0, Word.ListNumbering.arabic);

            // Set bullet type for list level 5.
            list.setLevelBullet(4, Word.ListBullet.arrow);

            // Set list level for the last item in this list.
            paragraph.listItem.level = 4;

            list.load("levelTypes");

            await context.sync();
          });
        }

        async function getListProps() {
          // Gets information about the first list in the document.
          await Word.run(async (context) => {
            const lists: Word.ListCollection = context.document.body.lists;
            lists.load("items");

            await context.sync();

            if (lists.items.length === 0) {
              console.warn("There are no lists in this document.");
              return;
            }
            
            // Get the first list.
            const list: Word.List = lists.getFirst();
            list.load("levelTypes,levelExistences");

            await context.sync();

            const levelTypes  = list.levelTypes;
            console.log("Level types of the first list:");
            for (let i = 0; i < levelTypes.length; i++) {
              console.log(`- Level ${i + 1} (index ${i}): ${levelTypes[i]}`);
            }

            const levelExistences = list.levelExistences;
            console.log("Level existences of the first list:");
            for (let i = 0; i < levelExistences.length; i++) {
              console.log(`- Level ${i + 1} (index ${i}): ${levelExistences[i]}`);
            }
          });
        }

        async function setup() {
          await Word.run(async (context) => {
            const body: Word.Body = context.document.body;
            body.clear();
            body.insertParagraph(
              "Create a list then customize the numbering and bullets. You can also organize the list items into multiple levels and change the style, alignment, etc.",
              "Start"
            );
          });
        }

        // Default helper for invoking an action and handling errors.
        async function tryCatch(callback) {
          try {
            await callback();
          } catch (error) {
            // Note: In a production add-in, you'd want to notify the user through your add-in's UI.
            console.error(error);
          }
        }
    language: typescript
template:
    content: |-
        <section class="ms-Fabric ms-font-m">
            This sample demonstrates how to create and organize a list.
        </section>

        <section class="ms-Fabric setup ms-font-m">
            <h3>Set up</h3>
            <button id="setup" class="ms-Button">
              <span class="ms-Button-label">Add text</span>
            </button>
        </section>

        <section class="ms-Fabric samples ms-font-m">
            <h3>Try it out</h3>
            <button id="insert-list" class="ms-Button">
            <span class="ms-Button-label">Insert list</span>
          </button>
            <button id="get-list-props" class="ms-Button">
              <span class="ms-Button-label">Get list info</span>
            </button>
        </section>
    language: html
style:
    content: |-
        section.samples {
            margin-top: 20px;
        }

        section.samples .ms-Button, section.setup .ms-Button {
            display: block;
            margin-bottom: 5px;
            margin-left: 20px;
            min-width: 80px;
        }
    language: css
libraries: |-
    https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js
    @types/office-js

    office-ui-fabric-core@11.1.0/dist/css/fabric.min.css
    office-ui-fabric-js@1.5.0/dist/css/fabric.components.min.css

    core-js@2.4.1/client/core.min.js
    @types/core-js

    jquery@3.1.1
    @types/jquery@3.3.1