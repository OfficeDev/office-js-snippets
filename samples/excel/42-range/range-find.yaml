order: 4
id: excel-range-find
name: Find text matches within a range
description: Finds a cell within a range based on string matching.
author: !<tag:yaml.org,2002:js/undefined> ''
host: EXCEL
api_set:
    ExcelApi: '1.9'
script:
    content: |-
        document.getElementById("setup").addEventListener("click", () => tryCatch(setup));
        document.getElementById("findText").addEventListener("click", () => tryCatch(findText));
        document.getElementById("findTextWithNullCheck").addEventListener("click", () => tryCatch(findTextWithNullCheck));
        document.getElementById("toggleComplete").addEventListener("click", () => tryCatch(toggleComplete));
        document.getElementById("toggleCase").addEventListener("click", () => tryCatch(toggleCase));
        document.getElementById("toggleDirection").addEventListener("click", () => tryCatch(toggleDirection));

        let isCompleteMatchToggle  = false;
        let isMatchCaseToggle = false;
        let searchDirectionToggle = Excel.SearchDirection.forward;

        async function findText() {
            await Excel.run(async (context) => {
                const sheet = context.workbook.worksheets.getItem("Sample");
                const table = sheet.tables.getItem("ExpensesTable");
                const searchRange = table.getRange();

                // NOTE: If no match is found, an ItemNotFound error
                // is thrown when Range.find is evaluated.
                const searchText = (document.getElementById("searchText") as HTMLTextAreaElement).value;
                const foundRange = searchRange.find(searchText, {
                    completeMatch: isCompleteMatchToggle,
                    matchCase: isMatchCaseToggle,
                    searchDirection: searchDirectionToggle
                });
                
                foundRange.load("address");
                await context.sync();


                console.log(foundRange.address);
            });
        }

        async function findTextWithNullCheck() {
            await Excel.run(async (context) => {
                const sheet = context.workbook.worksheets.getItem("Sample");
                const table = sheet.tables.getItem("ExpensesTable");
                const searchRange = table.getRange();
                const searchText = (document.getElementById("searchText") as HTMLTextAreaElement).value;
                const foundRange = searchRange.findOrNullObject(searchText, {
                    completeMatch: isCompleteMatchToggle,
                    matchCase: isMatchCaseToggle,
                    searchDirection: searchDirectionToggle
                });
                
                foundRange.load("address");
                await context.sync();

                if (foundRange.isNullObject) {
                    console.log("Text not found");
                } else {
                    console.log(foundRange.address);
                }
            });
        }

        function toggleComplete() {
            isCompleteMatchToggle = !isCompleteMatchToggle;
            console.log("Finding complete match = " + isCompleteMatchToggle);
        }

        function toggleCase() {
            isMatchCaseToggle = !isMatchCaseToggle;
            console.log("Finding matched case = " + isMatchCaseToggle);
        }

        function toggleDirection() {
            searchDirectionToggle = searchDirectionToggle === Excel.SearchDirection.forward ? Excel.SearchDirection.backwards : Excel.SearchDirection.forward;
            console.log("Search direction = " + searchDirectionToggle);
        }

        async function setup() {
            await Excel.run(async (context) => {
                context.workbook.worksheets.getItemOrNullObject("Sample").delete();
                const sheet = context.workbook.worksheets.add("Sample");

                const expensesTable = sheet.tables.add("A1:D1", true /*hasHeaders*/);
                expensesTable.name = "ExpensesTable";
                expensesTable.getHeaderRowRange().values = [["Date", "Merchant", "Category", "Amount"]];
                expensesTable.rows.add(null /*add at the end*/, [
                    ["1/1/2017", "The Phone Company", "Communications", "$120"],
                    ["1/2/2017", "Northwind Electric Cars", "Transportation", "$142"],
                    ["1/5/2017", "Best For You Organics Company", "Groceries", "$27"],
                    ["1/10/2017", "Coho Vineyard", "Restaurant", "$33"],
                    ["1/11/2017", "The Phone Company", "communications", "$5"],
                    ["1/15/2017", "Coho Vineyard (Wine)", "Groceries", "$60"],
                    ["1/15/2017", "Best For You Organics Company", "Groceries", "$97"]
                ]);

                sheet.getUsedRange().format.autofitColumns();
                sheet.activate();
                await context.sync();
            });
        }

        /** Default helper for invoking an action and handling errors. */
        async function tryCatch(callback) {
            try {
                await callback();
            } catch (error) {
                // Note: In a production add-in, you'd want to notify the user through your add-in's UI.
                console.error(error);
            }
        }
    language: typescript
template:
    content: |-
        <section class="ms-Fabric ms-font-m">
            <p>This sample shows how to find a cell with a matching string value within a range.</p>
        </section>
        <section class="ms-Fabric setup ms-font-m">
            <h3>Setup</h3>
            <button id="setup" class="ms-Button">
                <span class="ms-Button-label">Create sample data</span>
            </button>
        </section>
        <section class="ms-Fabric setup ms-font-m">
            <h3>Try it out</h3>
          <p>Enter text to search for in the box below and press <b>Find text</b> or <b> Find text with null check</b> to display the found text's address in the console.</p>
            <textarea id="searchText">Groceries</textarea><p/>
            <button id="findText" class="ms-Button">
                <span class="ms-Button-label">Find text</span>
            </button><p/>
            <button id="findTextWithNullCheck" class="ms-Button">
                <span class="ms-Button-label">Find text with null check</span>
            </button><p/>
          <p>Toggle the following search options to test different search behaviors.</p>
          <button id="toggleComplete" class="ms-Button">
                <span class="ms-Button-label">Toggle complete match</span>
            </button><p/>
            <button id="toggleCase" class="ms-Button">
                <span class="ms-Button-label">Toggle case sensitivity</span>
            </button><p/>
            <button id="toggleDirection" class="ms-Button">
                <span class="ms-Button-label">Toggle search direction</span>
            </button>
        </section>
    language: html
style:
    content: |-
        section.samples {
            margin-top: 20px;
        }

        section.samples .ms-Button, section.setup .ms-Button {
            display: block;
            margin-bottom: 5px;
            margin-left: 20px;
            min-width: 80px;
        }
    language: css
libraries: |-
    https://appsforoffice.microsoft.com/lib/1/hosted/office.js
    https://appsforoffice.microsoft.com/lib/1/hosted/office.d.ts

    https://unpkg.com/office-ui-fabric-core@11.1.0/dist/css/fabric.min.css
    https://unpkg.com/office-ui-fabric-js@1.5.0/dist/css/fabric.components.min.css