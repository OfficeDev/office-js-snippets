order: 9
id: word-content-controls-insert-and-change-tracking-state
name: Get content controls by their change tracking state
description: Inserts content controls then retrieves them by their change tracking state.
author: xiruatms
host: WORD
api_set:
    WordApi: '1.5'
script:
    content: |
        $("#insert-controls").on("click", () => tryCatch(insertContentControls));
        $("#setup").on("click", () => tryCatch(setup));

        async function insertContentControls() {
          // Inserts content controls, changes them, then gets them by their change tracking state.
          await Word.run(async (context) => {
            let trackAddedArray: Word.ChangeTrackingState[] = [Word.ChangeTrackingState.added];
            let trackDeletedArray: Word.ChangeTrackingState[] = [Word.ChangeTrackingState.deleted];
            let trackNormalArray: Word.ChangeTrackingState[] = [Word.ChangeTrackingState.normal];
            let paragraphs = context.document.body.paragraphs;
            paragraphs.load();
            await context.sync();
            paragraphs.items[0].insertContentControl("PlainText");
            paragraphs.items[1].insertContentControl("PlainText");
            paragraphs.items[2].insertContentControl("RichText");
            context.document.changeTrackingMode = Word.ChangeTrackingMode.trackAll;
            paragraphs.items[3].insertContentControl("RichText");
            context.document.body
              .getContentControls()
              .getFirst()
              .delete(false);
            context.document.changeTrackingMode = Word.ChangeTrackingMode.off;
            await context.sync();
            let addedContentControls = context.document.body.getContentControls().getByChangeTrackingStates(trackAddedArray);
            let deletedContentControls = context.document.body
              .getContentControls()
              .getByChangeTrackingStates(trackDeletedArray);
            let normalContentControls = context.document.body.getContentControls().getByChangeTrackingStates(trackNormalArray);
            addedContentControls.load();
            deletedContentControls.load();
            normalContentControls.load();
            await context.sync();
            console.log(`Added content controls: ${addedContentControls.items.length}`);
            console.log(`Deleted content controls: ${deletedContentControls.items.length}`);
            console.log(`Normal content controls: ${normalContentControls.items.length}`);
          });
        }

        async function setup() {
          await Word.run(async (context) => {
            const body: Word.Body = context.document.body;
            body.clear();
            body.insertParagraph("One more paragraph.", "Start");
            body.insertParagraph("Inserting another paragraph.", "Start");
            body.insertParagraph(
              "Do you want to create a solution that extends the functionality of Word? You can use the Office Add-ins platform to extend Word clients running on the web, on a Windows desktop, or on a Mac.",
              "Start"
            );
            body.paragraphs
              .getLast()
              .insertText(
                "Use add-in commands to extend the Word UI and launch task panes that run JavaScript that interacts with the content in a Word document. Any code that you can run in a browser can run in a Word add-in. Add-ins that interact with content in a Word document create requests to act on Word objects and synchronize object state.",
                "Replace"
              );
          });
        }

        // Default helper for invoking an action and handling errors.
        async function tryCatch(callback) {
          try {
            await callback();
          } catch (error) {
            // Note: In a production add-in, you'd want to notify the user through your add-in's UI.
            console.error(error);
          }
        }
    language: typescript
template:
    content: |-
        <section class="ms-font-m">
            This sample demonstrates how to insert control controls then change their tracking state.
        </section>

        <section class="setup ms-font-m">
            <h3>Set up</h3>
            <button id="setup" class="ms-Button">
              <span class="ms-Button-label">Setup</span>
          </button>
        </section>

        <section class="samples ms-font-m">
            <h3>Try it out</h3>
            <span class="ms-font-m">Insert content controls and then get by change tracking state.</span>
            <button id="insert-controls" class="ms-Button">
            <span class="ms-Button-label">Insert</span>
          </button>
            <p>
        </section>
    language: html
style:
    content: |-
        section.samples {
            margin-top: 20px;
        }

        section.samples .ms-Button, section.setup .ms-Button {
            display: block;
            margin-bottom: 5px;
            margin-left: 20px;
            min-width: 80px;
        }
    language: css
libraries: |-
    https://appsforoffice.microsoft.com/lib/1/hosted/office.js
    @types/office-js

    office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
    office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css

    core-js@2.4.1/client/core.min.js
    @types/core-js

    jquery@3.1.1
    @types/jquery@3.3.1