order: 19
id: excel-merged-ranges
name: Merged ranges
description: This sample shows how to create and find merged ranges in a worksheet.
host: EXCEL
api_set:
    ExcelAPI: '1.13'
script:
    content: |
        $("#setup").on("click", () => tryCatch(setup));
        $("#create-merged-range").on("click", () => tryCatch(createMergedRange));
        $("#get-merged-range").on("click", () => tryCatch(getMergedRange));

        async function createMergedRange() {
          await Excel.run(async (context) => {
            // Retrieve the worksheet and the table in that worksheet.
            const sheet = context.workbook.worksheets.getActiveWorksheet();
            const tableRange = sheet.getRange("B2:E6");

            // Create a merged range in the first row of the table.
            const chartTitle = tableRange.getRow(0);
            chartTitle.merge(true);

            // Format the merged range.
            chartTitle.format.horizontalAlignment = "Center";

            await context.sync();
          });
        }

        async function getMergedRange() {
          await Excel.run(async (context) => {
            // Retrieve the worksheet and the table in that worksheet.
            const sheet = context.workbook.worksheets.getActiveWorksheet();
            const tableRange = sheet.getRange("B2:E6");

            // Retrieve the merged range within the table and load its details.
            const mergedAreas = tableRange.getMergedAreasOrNullObject();
            mergedAreas.load("address");
            mergedAreas.load("cellCount");

            // Select the merged range.
            const range = mergedAreas.areas.getItemAt(0);
            range.select();
            await context.sync();

            // Print out the details of the `mergedAreas` range object.
            console.log(`Address of the merged range: ${mergedAreas.address}`);
            console.log(`Number of cells in the merged range: ${mergedAreas.cellCount}`);

            await context.sync();
          });
        }

        async function setup() {
          await Excel.run(async (context) => {
            context.workbook.worksheets.getItemOrNullObject("Sample").delete();
            const sheet = context.workbook.worksheets.add("Sample");

            // Create a table.
            const data = [
              ["Product chart", "", "", ""],
              ["Product", "Qty", "Unit Price", "Total Price"],
              ["Almonds", 2, 7.5, "=C4 * D4"],
              ["Coffee", 1, 34.5, "=C5 * D5"],
              ["Chocolate", 5, 9.56, "=C6 * D6"]
            ];

            const tableRange = sheet.getRange("B2:E6");
            tableRange.values = data;
            tableRange.format.autofitColumns();

            // Add a header row to the table.
            const header = tableRange.getRow(1);
            header.format.fill.color = "#4472C4";
            header.format.font.color = "white";

            sheet.activate();
            await context.sync();
          });
        }

        /** Default helper for invoking an action and handling errors. */
        async function tryCatch(callback) {
          try {
            await callback();
          } catch (error) {
            // Note: In a production add-in, you'd want to notify the user through your add-in's UI.
            console.error(error);
          }
        }
    language: typescript
template:
    content: |-
        <section class="ms-font-m">
          <p>This sample shows how to create and find merged ranges in a worksheet.</p>
        </section>

        <section class="setup ms-font-m">
          <h3>Set up</h3>
          <button id="setup" class="ms-Button">
            <span class="ms-Button-label">Add sample data</span>
          </button>
        </section>

        <section class="samples ms-font-m">
          <h3>Try it out</h3>
          <button id="create-merged-range" class="ms-Button">
            <span class="ms-Button-label">Create merged range</span>
          </button>
          <button id="get-merged-range" class="ms-Button">
            <span class="ms-Button-label">Get merged range</span>
          </button>
        </section>
    language: html
style:
    content: |-
        section.samples {
            margin-top: 20px;
        }
        section.samples .ms-Button, section.setup .ms-Button {
            display: block;
            margin-bottom: 5px;
            margin-left: 20px;
            min-width: 80px;
        }
    language: css
libraries: |
    https://appsforoffice.microsoft.com/lib/1/hosted/office.js
    @types/office-js

    office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
    office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css

    core-js@2.4.1/client/core.min.js
    @types/core-js

    jquery@3.1.1
    @types/jquery@3.3.1