order: 7
id: excel-shape-get-active
name: Get active shape
description: Get the active shape in your workbook.
host: EXCEL
api_set:
    ExcelApi: '1.19'
script:
  content: |
    document.getElementById("setup").addEventListener("click", () => tryCatch(setup));
    document.getElementById("add-shape-as-title").addEventListener("click", () => tryCatch(addShapeAsTitle));
    document.getElementById("group").addEventListener("click", () => tryCatch(groupChartShape));
    document.getElementById("get-active-shape").addEventListener("click", () => tryCatch(getActiveShape));

    async function addShapeAsTitle() {
      await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        let shape = sheet.shapes.addGeometricShape(Excel.GeometricShapeType.rectangle);
        shape.name = "ChartTitle";
        shape.height = 20;
        shape.width = 90;
        shape.textFrame.textRange.text = "Sales Quantity";
        shape.textFrame.textRange.font.size = 13;

        let chart = sheet.charts.getItemAt(0);
        chart.load("left, top");
        chart.plotArea.load("width");
        await context.sync();

        shape.left = chart.left + chart.plotArea.width / 2 - 30;
        shape.top = chart.top + 10;

        await context.sync();
      });
    }

    async function groupChartShape() {
      await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        let shape = sheet.shapes.getItem("ChartTitle");
        let chartShape = sheet.shapes.getItem("SalesChart");
        let group = sheet.shapes.addGroup([shape, chartShape]);
        group.name = "GroupChart";
        await context.sync();
      });
    }

    async function getActiveShape() {
      await Excel.run(async (context) => {
        let group = context.workbook.getActiveShapeOrNullObject();
        if (group == null) {
          console.log("No active shape");
        } else {
          let image = group.getAsImage(Excel.PictureFormat.png);
          await context.sync();
          let div = document.getElementById("image");
          let img = document.createElement("img");
          img.src = "data: image / jpeg; base64," + image.value;
          div.appendChild(img);
        }
      });
    }

    /** Set up Sample worksheet. */    
    async function setup() {
      await Excel.run(async (context) => {
        context.workbook.worksheets.getItemOrNullObject("Sample").delete();
        const sheet = context.workbook.worksheets.add("Sample");
        let range = sheet.getRange("A1:C4");

        range.values = [
          ["Type", "Product A", "Product B"],
          ["Q1", 15, 20],
          ["Q2", 22, 15],
          ["Q3", 33, 47]
        ];

        let chart = sheet.charts.add(Excel.ChartType.lineMarkers, range);

        chart.name = "SalesChart";
        // chart.title.text = "Sales Quantity";

        sheet.activate();

        await context.sync();
      });
    }
    
    /** Default helper for invoking an action and handling errors. */
    async function tryCatch(callback) {
      try {
        await callback();
      } catch (error) {
        // Note: In a production add-in, you'd want to notify the user through your add-in's UI.
        console.error(error);
      }
    }
  language: typescript
template:
  content: |-
    <section class="ms-font-m">
      <p>This sample shows how to get the active shape in your workbook and return it to this task pane as an image.</p>
    </section>
    <section class="setup ms-font-m">
      <h3>Setup</h3>
      <button id="setup" class="ms-Button">
        <span class="ms-Button-label">Create a chart</span>
      </button>
    </section>
    <section class="samples ms-font-m">
      <h3>Try it out</h3>
      <p>Add a shape to the workbook. This button adds a shape that covers the existing chart title with a new shape that contains text.</p>
      <button id="add-shape-as-title" class="ms-Button">
        <span class="ms-Button-label">Add shape</span>
      </button>
      <br>
      <p>Group the new chart title shape together with the chart shape.</p>
      <button id="group" class="ms-Button">
        <span class="ms-Button-label">Group shapes</span>
      </button>
      <br>
      <p>Get the active shape and display its image in the task pane. Make sure the chart is selected.</p>
      <button id="get-active-shape" class="ms-Button">
        <span class="ms-Button-label">Get active shape</span>
      </button>
    </section>
    <br>
    <p class="ms-font-m">An image of the active shape:</p>
    <div id="image"></div>
  language: html
style:
  content: |-
    section.samples {
        margin-top: 20px;
    }

    section.samples .ms-Button, section.setup .ms-Button {
        display: block;
        margin-bottom: 5px;
        margin-left: 20px;
        min-width: 80px;
    }
  language: css
libraries: |
    https://appsforoffice.microsoft.com/lib/1/hosted/office.js
    https://appsforoffice.microsoft.com/lib/1/hosted/office.d.ts

    https://unpkg.com/office-ui-fabric-core@11.1.0/dist/css/fabric.min.css
    https://unpkg.com/office-ui-fabric-js@1.5.0/dist/css/fabric.components.min.css
