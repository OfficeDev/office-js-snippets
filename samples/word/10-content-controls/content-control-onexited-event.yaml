order: 6
id: word-content-controls-content-control-onexited-event
name: On exiting content controls
description: 'Registers, triggers, and deregisters onExited event that tracks when the cursor is removed from within content controls.'
host: WORD
api_set:
    WordApi: '1.5'
script:
    content: |
        $("#insert-content-controls").on("click", () => tryCatch(insertContentControls));
        $("#register-event-handlers").on("click", () => tryCatch(registerEventHandlers));
        $("#deregister-event-handlers").on("click", () => tryCatch(deregisterEventHandlers));
        $("#setup").on("click", () => tryCatch(setup));

        let eventContexts = [];

        async function insertContentControls() {
          // Traverses each paragraph of the document and wraps a content control on each.
          await Word.run(async (context) => {
            const paragraphs: Word.ParagraphCollection = context.document.body.paragraphs;
            paragraphs.load("$none"); // Don't need any properties; just wrap each paragraph with a content control.

            await context.sync();

            for (let i = 0; i < paragraphs.items.length; i++) {
              let contentControl = paragraphs.items[i].insertContentControl();
              contentControl.tag = "forTesting";
            }

            console.log("Content controls inserted: " + paragraphs.items.length);

            await context.sync();
          });
        }

        async function registerEventHandlers() {
          await Word.run(async (context) => {
            const contentControls: Word.ContentControlCollection = context.document.contentControls;
            contentControls.load("items");
            await context.sync();

            // Register the onExited event handler on each content control.
            if (contentControls.items.length === 0) {
              console.log("There aren't any content controls in this document so can't register event handlers.");
            } else {
              for (let i = 0; i < contentControls.items.length; i++) {
                eventContexts[i] = contentControls.items[i].onExited.add(contentControlExited);
                contentControls.items[i].track();
              }

              await context.sync();

              console.log("Added event handlers for when the cursor is removed from within content controls.");
            }
          });
        }

        async function contentControlExited(event: Word.ContentControlExitedEventArgs) {
          await Word.run(async (context) => {
            console.log(`${event.eventType} event detected. ID of content control that was exited: ${event.ids[0]}`);
          });
        }

        async function deregisterEventHandlers() {
          await Word.run(async (context) => {
            for (let i = 0; i < eventContexts.length; i++) {
              await Word.run(eventContexts[i].context, async (context) => {
                eventContexts[i].remove();
              });
            }

            await context.sync();

            eventContexts = [];
            console.log("Removed event handlers that were tracking when the cursor is removed from within content controls.");
          });
        }

        async function setup() {
          await Word.run(async (context) => {
            const body: Word.Body = context.document.body;
            body.clear();
            body.insertParagraph("One more paragraph.", "Start");
            body.insertParagraph("Inserting another paragraph.", "Start");
            body.insertParagraph(
              "Do you want to create a solution that extends the functionality of Word? You can use the Office Add-ins platform to extend Word clients running on the web, on a Windows desktop, or on a Mac.",
              "Start"
            );
            body.paragraphs
              .getLast()
              .insertText(
                "Use add-in commands to extend the Word UI and launch task panes that run JavaScript that interacts with the content in a Word document. Any code that you can run in a browser can run in a Word add-in. Add-ins that interact with content in a Word document create requests to act on Word objects and synchronize object state.",
                "Replace"
              );
          });
        }

        // Default helper for invoking an action and handling errors.
        async function tryCatch(callback) {
          try {
            await callback();
          } catch (error) {
            // Note: In a production add-in, you'd want to notify the user through your add-in's UI.
            console.error(error);
          }
        }
    language: typescript
template:
    content: |-
        <section class="ms-font-m">
            This sample demonstrates how to use the onExited event on content controls.
        </section>

        <section class="setup ms-font-m">
            <h3>Set up</h3>
            <button id="setup" class="ms-Button">
            <span class="ms-Button-label">Setup</span>
          </button>
        </section>

        <section class="samples ms-font-m">
            <h3>Try it out</h3>
            <span class="ms-font-m">1. Insert content controls.</span>
            <button id="insert-content-controls" class="ms-Button">
            <span class="ms-Button-label">Insert</span>
          </button>
            <span class="ms-font-m">2. Register event handlers.</span>
            <button id="register-event-handlers" class="ms-Button">
            <span class="ms-Button-label">Register</span>
          </button>
            <p><span class="ms-font-m">3. Place cursor within a content control.</span></p>
            <p><span class="ms-font-m">4. Place cursor in location outside of that content control.</span></p>
            <span class="ms-font-m">5. Remove event handlers.</span>
            <button id="deregister-event-handlers" class="ms-Button">
            <span class="ms-Button-label">Remove</span>
          </button>
        </section>
    language: html
style:
    content: |-
        section.samples {
            margin-top: 20px;
        }

        section.samples .ms-Button, section.setup .ms-Button {
            display: block;
            margin-bottom: 5px;
            margin-left: 20px;
            min-width: 80px;
        }
    language: css
libraries: |-
    https://appsforoffice.microsoft.com/lib/1/hosted/office.js
    @types/office-js

    office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
    office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css

    core-js@2.4.1/client/core.min.js
    @types/core-js

    jquery@3.1.1
    @types/jquery@3.3.1