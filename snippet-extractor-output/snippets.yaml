'Excel.AggregationFunction:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-filters-and-summaries.yaml

    async function genericFunctionSwitch(functionType:
    Excel.AggregationFunction) {
        await Excel.run(async (context) => {
            const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
            pivotTable.dataHierarchies.load("no-properties-needed");
            await context.sync();

            pivotTable.dataHierarchies.items[0].summarizeBy = functionType;
            pivotTable.dataHierarchies.items[1].summarizeBy = functionType;
            await context.sync();
        });
    }
'Excel.Application#calculate:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/90-scenarios/performance-optimization.yaml

    await Excel.run(async (context) => {
      context.application.calculate(Excel.CalculationType.full);
    });
'Excel.Application#decimalSeparator:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/culture-info.yaml

    await Excel.run(async (context) => {
      context.application.load("decimalSeparator,thousandsSeparator");
      context.application.cultureInfo.numberFormat.load("numberDecimalSeparator,numberGroupSeparator");
      await context.sync();

      // Local settings are set under the "Options > Advanced" menu.
      const localDecimalSeparator = context.application.decimalSeparator;
      const localThousandsSeparator = context.application.thousandsSeparator;

      const systemDecimalSeparator = context.application.cultureInfo.numberFormat.numberDecimalSeparator;
      const systemThousandsSeparator = context.application.cultureInfo.numberFormat.numberGroupSeparator;

      console.log("Local character settings: ");
      console.log(`  Local decimal separator: ${localDecimalSeparator}`);
      console.log(`  Local thousands separator: ${localThousandsSeparator}`);

      console.log("System culture settings: ");
      console.log(`  System decimal separator: ${systemDecimalSeparator}`);
      console.log(`  System thousands separator: ${systemThousandsSeparator}`);
      console.log(`  `);

      await context.sync();
    });
'Excel.Application#suspendScreenUpdatingUntilNextSync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/90-scenarios/performance-optimization.yaml

    await Excel.run(async (context) => {
      // Recreate the data in the worksheet with random data.
      const sheet = context.workbook.worksheets.getActiveWorksheet();

      const startTime = Date.now();
      console.log("Starting...");

      // If other parts of the sample have toggled screen painting off, this will stop screen updating until context.sync is called.
      if (pauseScreenPainting) {
        context.application.suspendScreenUpdatingUntilNextSync();
      }

      for (let i = 1; i < ROW_COUNT; i++) {
        for (let j = 1; j < COLUMN_COUNT; j++) {
          let cell = sheet.getCell(i, j);
          cell.values = [[i * j * Math.random()]];

          // If other parts of the sample have toggled tracking off, we will avoid tracking this range and having to manage the proxy objects.
          // For more information, see https://learn.microsoft.com/office/dev/add-ins/concepts/resource-limits-and-performance-optimization#untrack-unneeded-proxy-objects
          if (untrack) {
            cell.untrack();
          }
        }
      }

      await context.sync();

      console.log(`Ending. Adding ${ROW_COUNT * COLUMN_COUNT} cells took ${Date.now() - startTime} milliseconds`);
    });
'Excel.ArrowheadLength:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-lines.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const line = shapes.getItem("StraightLine").line;
        line.beginArrowheadLength = Excel.ArrowheadLength.long;
        line.beginArrowheadWidth = Excel.ArrowheadWidth.wide;
        line.beginArrowheadStyle = Excel.ArrowheadStyle.oval;

        line.endArrowheadLength = Excel.ArrowheadLength.long;
        line.endArrowheadWidth = Excel.ArrowheadWidth.wide;
        line.endArrowheadStyle = Excel.ArrowheadStyle.triangle;

        await context.sync();
    });
'Excel.ArrowheadStyle:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-lines.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const line = shapes.getItem("StraightLine").line;
        line.beginArrowheadLength = Excel.ArrowheadLength.long;
        line.beginArrowheadWidth = Excel.ArrowheadWidth.wide;
        line.beginArrowheadStyle = Excel.ArrowheadStyle.oval;

        line.endArrowheadLength = Excel.ArrowheadLength.long;
        line.endArrowheadWidth = Excel.ArrowheadWidth.wide;
        line.endArrowheadStyle = Excel.ArrowheadStyle.triangle;

        await context.sync();
    });
'Excel.ArrowheadWidth:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-lines.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const line = shapes.getItem("StraightLine").line;
        line.beginArrowheadLength = Excel.ArrowheadLength.long;
        line.beginArrowheadWidth = Excel.ArrowheadWidth.wide;
        line.beginArrowheadStyle = Excel.ArrowheadStyle.oval;

        line.endArrowheadLength = Excel.ArrowheadLength.long;
        line.endArrowheadWidth = Excel.ArrowheadWidth.wide;
        line.endArrowheadStyle = Excel.ArrowheadStyle.triangle;

        await context.sync();
    });
'Excel.AutoFillType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-auto-fill.yaml

    await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getActiveWorksheet();
      const sumCell = sheet.getRange("K4");

      // Copy only the formatting, not the values and formulas.
      sumCell.autoFill("K4:K7", Excel.AutoFillType.fillFormats);
      sumCell.format.autofitColumns();
      await context.sync();
    });
'Excel.AutoFilter#apply:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-auto-filter.yaml

    // This function adds a percentage AutoFilter to the active worksheet 

    // and applies the filter to a column of the used range.

    await Excel.run(async (context) => {
        // Retrieve the active worksheet and the used range on that worksheet.
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        const farmData = sheet.getUsedRange();

        // Add a filter that will only show the rows with the top 50% of values in column 3.
        sheet.autoFilter.apply(farmData, 3, {
            criterion1: "50",
            filterOn: Excel.FilterOn.topPercent
        });

        await context.sync();
    });
'Excel.AutoFilter#clearColumnCriteria:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-auto-filter.yaml

    // This function clears the AutoFilter setting from one column.

    await Excel.run(async (context) => {
        // Retrieve the active worksheet.
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // Clear the filter from only column 3.
        sheet.autoFilter.clearColumnCriteria(3);
        await context.sync();
    });
'Excel.AutoFilter#reapply:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-auto-filter.yaml

    // This function refreshes the AutoFilter to ensure that changes are
    captured.

    await Excel.run(async (context) => {
        // Retrieve the active worksheet.
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // Reapply the filter to capture changes.
        sheet.autoFilter.reapply();
        await context.sync();
    });
'Excel.AutoFilter#remove:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-auto-filter.yaml

    // This function removes all AutoFilters from the active worksheet.

    await Excel.run(async (context) => {
        // Retrieve the active worksheet.
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // Remove all filters.
        sheet.autoFilter.remove();
        await context.sync();
    });
'Excel.Binding#onDataChanged:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/data-changed.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");    
        const salesTable = sheet.tables.getItem("SalesTable");
        const salesByQuarterBinding = context.workbook.bindings.add(salesTable.getRange(), "Table", "SalesByQuarter");
        salesByQuarterBinding.onDataChanged.add(onSalesDataChanged);

        console.log("The data changed handler is registered.");

        await context.sync();
    });
'Excel.BindingType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-disable-events.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const sumRange = sheet.getRange("B20:P20");
        sumRange.load("columnCount");
        await context.sync();

        // add an event handler to each cell in the sum range
        for (let i = 0; i < sumRange.columnCount; i++) {
            let sumBinding = context.workbook.bindings.add(sumRange.getCell(0,i), Excel.BindingType.range, "SumBinding" + i);
            sumBinding.onDataChanged.add(onSumChanged);
        }
        await context.sync();
    });
'Excel.BorderLineStyle:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/cell-properties.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // Creating the SettableCellProperties objects to use for the range.
        // In your add-in, these should be created once, outside the function.
        const topHeaderProps: Excel.SettableCellProperties = {
            // The style property takes a string matching the name of an Excel style.
            // Built-in style names are listed in the `BuiltInStyle` enum.
            // Note that a style will overwrite any formatting,
            // so do not use the format property with the style property.
            style: "Heading1"
        };

        const headerProps: Excel.SettableCellProperties = {
            // Any subproperties of format that are not set will not be changed when these cell properties are set.
            format: {
                fill: {
                    color: "Blue"
                },
                font: {
                    color: "White",
                    bold: true
                }
            }
        };

        const nonApplicableProps: Excel.SettableCellProperties = {
            format: {
                fill: {
                    pattern: Excel.FillPattern.gray25
                },
                font: {
                    color: "Gray",
                    italic: true
                }
            }
        };

        const matchupScoreProps: Excel.SettableCellProperties = {
            format: {
                borders: {
                    bottom: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    left: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    right: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    top: {
                        style: Excel.BorderLineStyle.continuous
                    }
                }
            }
        };

        const range = sheet.getRange("A1:E5");

        // You can use empty JSON objects to avoid changing a cell's properties.
        range.setCellProperties([
            [topHeaderProps, {}, {}, {}, {}],
            [{}, {}, headerProps, headerProps, headerProps],
            [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]
        ]);

        sheet.getUsedRange().format.autofitColumns();
        await context.sync();
    });
'Excel.BuiltInStyle:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/cell-properties.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // Creating the SettableCellProperties objects to use for the range.
        // In your add-in, these should be created once, outside the function.
        const topHeaderProps: Excel.SettableCellProperties = {
            // The style property takes a string matching the name of an Excel style.
            // Built-in style names are listed in the `BuiltInStyle` enum.
            // Note that a style will overwrite any formatting,
            // so do not use the format property with the style property.
            style: "Heading1"
        };

        const headerProps: Excel.SettableCellProperties = {
            // Any subproperties of format that are not set will not be changed when these cell properties are set.
            format: {
                fill: {
                    color: "Blue"
                },
                font: {
                    color: "White",
                    bold: true
                }
            }
        };

        const nonApplicableProps: Excel.SettableCellProperties = {
            format: {
                fill: {
                    pattern: Excel.FillPattern.gray25
                },
                font: {
                    color: "Gray",
                    italic: true
                }
            }
        };

        const matchupScoreProps: Excel.SettableCellProperties = {
            format: {
                borders: {
                    bottom: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    left: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    right: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    top: {
                        style: Excel.BorderLineStyle.continuous
                    }
                }
            }
        };

        const range = sheet.getRange("A1:E5");

        // You can use empty JSON objects to avoid changing a cell's properties.
        range.setCellProperties([
            [topHeaderProps, {}, {}, {}, {}],
            [{}, {}, headerProps, headerProps, headerProps],
            [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]
        ]);

        sheet.getUsedRange().format.autofitColumns();
        await context.sync();
    });
'Excel.CalculationMode:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/workbook-calculation.yaml

    await Excel.run(async (context) => {
      context.application.calculationMode = Excel.CalculationMode.manual;
      context.application.load("calculationMode");
      await context.sync();

      console.log("Current calculation mode: " + context.application.calculationMode);
    });
'Excel.CalculationType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/workbook-calculation.yaml

    await Excel.run(async (context) => {
      context.application.calculate(Excel.CalculationType.recalculate);
      await context.sync();
    });
'Excel.CellPropertiesFill#color:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/cell-properties.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // Creating the SettableCellProperties objects to use for the range.
        // In your add-in, these should be created once, outside the function.
        const topHeaderProps: Excel.SettableCellProperties = {
            // The style property takes a string matching the name of an Excel style.
            // Built-in style names are listed in the `BuiltInStyle` enum.
            // Note that a style will overwrite any formatting,
            // so do not use the format property with the style property.
            style: "Heading1"
        };

        const headerProps: Excel.SettableCellProperties = {
            // Any subproperties of format that are not set will not be changed when these cell properties are set.
            format: {
                fill: {
                    color: "Blue"
                },
                font: {
                    color: "White",
                    bold: true
                }
            }
        };

        const nonApplicableProps: Excel.SettableCellProperties = {
            format: {
                fill: {
                    pattern: Excel.FillPattern.gray25
                },
                font: {
                    color: "Gray",
                    italic: true
                }
            }
        };

        const matchupScoreProps: Excel.SettableCellProperties = {
            format: {
                borders: {
                    bottom: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    left: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    right: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    top: {
                        style: Excel.BorderLineStyle.continuous
                    }
                }
            }
        };

        const range = sheet.getRange("A1:E5");

        // You can use empty JSON objects to avoid changing a cell's properties.
        range.setCellProperties([
            [topHeaderProps, {}, {}, {}, {}],
            [{}, {}, headerProps, headerProps, headerProps],
            [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]
        ]);

        sheet.getUsedRange().format.autofitColumns();
        await context.sync();
    });
'Excel.CellPropertiesFillLoadOptions#color:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/cell-properties.yaml

    await Excel.run(async (context) => {
        const cell = context.workbook.getActiveCell();

        // Define the cell properties to get by setting the matching LoadOptions to true.
        const propertiesToGet = cell.getCellProperties({
            address: true,
            format: {
                fill: {
                    color: true
                },
                font: {
                    color: true
                }
            },
            style: true
        });

        // Sync to get the data from the workbook.
        await context.sync();
        const cellProperties = propertiesToGet.value[0][0];
        console.log(
            `Address: ${cellProperties.address}\nStyle: ${cellProperties.style}\nFill Color: ${cellProperties.format.fill.color}\nFont Color: ${cellProperties.format.font.color}`);
    });
'Excel.CellPropertiesFont#color:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/cell-properties.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // Creating the SettableCellProperties objects to use for the range.
        // In your add-in, these should be created once, outside the function.
        const topHeaderProps: Excel.SettableCellProperties = {
            // The style property takes a string matching the name of an Excel style.
            // Built-in style names are listed in the `BuiltInStyle` enum.
            // Note that a style will overwrite any formatting,
            // so do not use the format property with the style property.
            style: "Heading1"
        };

        const headerProps: Excel.SettableCellProperties = {
            // Any subproperties of format that are not set will not be changed when these cell properties are set.
            format: {
                fill: {
                    color: "Blue"
                },
                font: {
                    color: "White",
                    bold: true
                }
            }
        };

        const nonApplicableProps: Excel.SettableCellProperties = {
            format: {
                fill: {
                    pattern: Excel.FillPattern.gray25
                },
                font: {
                    color: "Gray",
                    italic: true
                }
            }
        };

        const matchupScoreProps: Excel.SettableCellProperties = {
            format: {
                borders: {
                    bottom: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    left: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    right: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    top: {
                        style: Excel.BorderLineStyle.continuous
                    }
                }
            }
        };

        const range = sheet.getRange("A1:E5");

        // You can use empty JSON objects to avoid changing a cell's properties.
        range.setCellProperties([
            [topHeaderProps, {}, {}, {}, {}],
            [{}, {}, headerProps, headerProps, headerProps],
            [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]
        ]);

        sheet.getUsedRange().format.autofitColumns();
        await context.sync();
    });
'Excel.CellPropertiesFontLoadOptions#color:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/cell-properties.yaml

    await Excel.run(async (context) => {
        const cell = context.workbook.getActiveCell();

        // Define the cell properties to get by setting the matching LoadOptions to true.
        const propertiesToGet = cell.getCellProperties({
            address: true,
            format: {
                fill: {
                    color: true
                },
                font: {
                    color: true
                }
            },
            style: true
        });

        // Sync to get the data from the workbook.
        await context.sync();
        const cellProperties = propertiesToGet.value[0][0];
        console.log(
            `Address: ${cellProperties.address}\nStyle: ${cellProperties.style}\nFill Color: ${cellProperties.format.fill.color}\nFont Color: ${cellProperties.format.font.color}`);
    });
'Excel.CellPropertiesLoadOptions#address:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/cell-properties.yaml

    await Excel.run(async (context) => {
        const cell = context.workbook.getActiveCell();

        // Define the cell properties to get by setting the matching LoadOptions to true.
        const propertiesToGet = cell.getCellProperties({
            address: true,
            format: {
                fill: {
                    color: true
                },
                font: {
                    color: true
                }
            },
            style: true
        });

        // Sync to get the data from the workbook.
        await context.sync();
        const cellProperties = propertiesToGet.value[0][0];
        console.log(
            `Address: ${cellProperties.address}\nStyle: ${cellProperties.style}\nFill Color: ${cellProperties.format.fill.color}\nFont Color: ${cellProperties.format.font.color}`);
    });
'Excel.CellValueConditionalFormat#format:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B21:E23");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.cellValue);
        conditionalFormat.cellValue.format.font.color = "red";
        conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

        await context.sync();
    });
'Excel.CellValueConditionalFormat#rule:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B21:E23");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.cellValue);
        conditionalFormat.cellValue.format.font.color = "red";
        conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

        await context.sync();
    });
'Excel.CellValueType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/20-data-types/data-types-error-values.yaml

    // This function sets the value of cell A1 to a #BUSY! error using data
    types.

    await Excel.run(async (context) => {
      // Retrieve the Sample worksheet and cell A1 on that sheet.
      const sheet = context.workbook.worksheets.getItemOrNullObject("Sample");
      const range = sheet.getRange("A1");

      // Get the error data type and set its type to `busy`.
      const error: Excel.ErrorCellValue = {
        type: Excel.CellValueType.error,
        errorType: Excel.ErrorCellValueType.busy
      };

      // Set cell A1 as the busy error.
      range.valuesAsJson = [[error]];
      await context.sync();
    });
'Excel.Chart#getDataTableOrNullObject:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-data-table.yaml

    // This function adds a data table to a chart that already exists on the
    worksheet. 

    await Excel.run(async (context) => {
      // Retrieve the chart named "SalesChart" from the "Sample" worksheet.
      const chart = context.workbook.worksheets.getItem("Sample").charts.getItem("SalesChart");

      // Get the data table object for the chart and set it to visible.
      const chartDataTable = chart.getDataTableOrNullObject();
      chartDataTable.load("visible");
      chartDataTable.visible = true;
      await context.sync();
    });
'Excel.Chart#onActivated:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-chart-activated.yaml

    await Excel.run(async (context) => {

        const pieChart = context.workbook.worksheets.getActiveWorksheet().charts.getItem("Pie");

        // Register the onActivated and onDeactivated event handlers.
        pieChart.onActivated.add(chartActivated);
        pieChart.onDeactivated.add(chartDeactivated);

        await context.sync();

        console.log("Added handlers for Chart onActivated and onDeactivated events.");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-chart-activated.yaml

    async function chartActivated(event) {
        await Excel.run(async (context) => {
            // Retrieve the worksheet.
            const sheet = context.workbook.worksheets.getActiveWorksheet();

            // Retrieve the activated chart by ID and load the name of the chart. 
            const activatedChart = sheet.charts.getItem(event.chartId);
            activatedChart.load(["name"]);
            await context.sync();

            // Print out the activated chart's data.
            console.log(`A chart was activated. ID: ${event.chartId}. Chart name: ${activatedChart.name}.`);
        });
    }
'Excel.Chart#onDeactivated:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-chart-activated.yaml

    await Excel.run(async (context) => {

        const pieChart = context.workbook.worksheets.getActiveWorksheet().charts.getItem("Pie");

        // Register the onActivated and onDeactivated event handlers.
        pieChart.onActivated.add(chartActivated);
        pieChart.onDeactivated.add(chartDeactivated);

        await context.sync();

        console.log("Added handlers for Chart onActivated and onDeactivated events.");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-chart-activated.yaml

    async function chartDeactivated(event) {
        await Excel.run(async (context) => {
            // Callback function for when the chart is deactivated.
            console.log("The pie chart is NOT active.");
        });
    }
'Excel.ChartAxis#displayUnit:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-axis.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        let chart = sheet.charts.getItemAt(0);
        let categoryAxis = chart.axes.categoryAxis;
        let valueAxis = chart.axes.valueAxis;

        // Load to get display unit.
        valueAxis.load("displayUnit");

        await context.sync();

        console.log("The vertical axis display unit is: " + valueAxis.displayUnit);
    });
'Excel.ChartAxis#showDisplayUnitLabel:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-axis.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        let chart = sheet.charts.getItemAt(0);
        let axis = chart.axes.valueAxis;

        // Remove display unit.
        axis.showDisplayUnitLabel = false;

        await context.sync();
    });
'Excel.ChartCollection#onActivated:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-chart-activated.yaml

    await Excel.run(async (context) => {

        const pieChart = context.workbook.worksheets.getActiveWorksheet().charts.getItem("Pie");

        // Register the onActivated and onDeactivated event handlers.
        pieChart.onActivated.add(chartActivated);
        pieChart.onDeactivated.add(chartDeactivated);

        await context.sync();

        console.log("Added handlers for Chart onActivated and onDeactivated events.");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-chart-activated.yaml

    async function chartActivated(event) {
        await Excel.run(async (context) => {
            // Retrieve the worksheet.
            const sheet = context.workbook.worksheets.getActiveWorksheet();

            // Retrieve the activated chart by ID and load the name of the chart. 
            const activatedChart = sheet.charts.getItem(event.chartId);
            activatedChart.load(["name"]);
            await context.sync();

            // Print out the activated chart's data.
            console.log(`A chart was activated. ID: ${event.chartId}. Chart name: ${activatedChart.name}.`);
        });
    }
'Excel.ChartCollection#onDeactivated:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-chart-activated.yaml

    await Excel.run(async (context) => {

        const pieChart = context.workbook.worksheets.getActiveWorksheet().charts.getItem("Pie");

        // Register the onActivated and onDeactivated event handlers.
        pieChart.onActivated.add(chartActivated);
        pieChart.onDeactivated.add(chartDeactivated);

        await context.sync();

        console.log("Added handlers for Chart onActivated and onDeactivated events.");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-chart-activated.yaml

    async function chartDeactivated(event) {
        await Excel.run(async (context) => {
            // Callback function for when the chart is deactivated.
            console.log("The pie chart is NOT active.");
        });
    }
'Excel.ChartDataTable#format:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-data-table.yaml

    // This function adjusts the display and format of a chart data table that
    already exists on the worksheet.

    await Excel.run(async (context) => {
      // Retrieve the chart named "SalesChart" from the "Sample" worksheet.
      const chart = context.workbook.worksheets.getItem("Sample").charts.getItem("SalesChart");

      // Get the chart data table object and load its properties.
      const chartDataTable = chart.getDataTableOrNullObject();
      chartDataTable.load();

      // Set the display properties of the chart data table.
      chartDataTable.showLegendKey = true;
      chartDataTable.showHorizontalBorder = false;
      chartDataTable.showVerticalBorder = true;
      chartDataTable.showOutlineBorder = true;

      // Retrieve the chart data table format object and set font and border properties. 
      const chartDataTableFormat = chartDataTable.format;
      chartDataTableFormat.font.color = "#B76E79";
      chartDataTableFormat.font.name = "Comic Sans";
      chartDataTableFormat.border.color = "blue";
      await context.sync();
    });
'Excel.ChartDataTable#showHorizontalBorder:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-data-table.yaml

    // This function adjusts the display and format of a chart data table that
    already exists on the worksheet.

    await Excel.run(async (context) => {
      // Retrieve the chart named "SalesChart" from the "Sample" worksheet.
      const chart = context.workbook.worksheets.getItem("Sample").charts.getItem("SalesChart");

      // Get the chart data table object and load its properties.
      const chartDataTable = chart.getDataTableOrNullObject();
      chartDataTable.load();

      // Set the display properties of the chart data table.
      chartDataTable.showLegendKey = true;
      chartDataTable.showHorizontalBorder = false;
      chartDataTable.showVerticalBorder = true;
      chartDataTable.showOutlineBorder = true;

      // Retrieve the chart data table format object and set font and border properties. 
      const chartDataTableFormat = chartDataTable.format;
      chartDataTableFormat.font.color = "#B76E79";
      chartDataTableFormat.font.name = "Comic Sans";
      chartDataTableFormat.border.color = "blue";
      await context.sync();
    });
'Excel.ChartDataTable#showLegendKey:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-data-table.yaml

    // This function adjusts the display and format of a chart data table that
    already exists on the worksheet.

    await Excel.run(async (context) => {
      // Retrieve the chart named "SalesChart" from the "Sample" worksheet.
      const chart = context.workbook.worksheets.getItem("Sample").charts.getItem("SalesChart");

      // Get the chart data table object and load its properties.
      const chartDataTable = chart.getDataTableOrNullObject();
      chartDataTable.load();

      // Set the display properties of the chart data table.
      chartDataTable.showLegendKey = true;
      chartDataTable.showHorizontalBorder = false;
      chartDataTable.showVerticalBorder = true;
      chartDataTable.showOutlineBorder = true;

      // Retrieve the chart data table format object and set font and border properties. 
      const chartDataTableFormat = chartDataTable.format;
      chartDataTableFormat.font.color = "#B76E79";
      chartDataTableFormat.font.name = "Comic Sans";
      chartDataTableFormat.border.color = "blue";
      await context.sync();
    });
'Excel.ChartDataTable#showOutlineBorder:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-data-table.yaml

    // This function adjusts the display and format of a chart data table that
    already exists on the worksheet.

    await Excel.run(async (context) => {
      // Retrieve the chart named "SalesChart" from the "Sample" worksheet.
      const chart = context.workbook.worksheets.getItem("Sample").charts.getItem("SalesChart");

      // Get the chart data table object and load its properties.
      const chartDataTable = chart.getDataTableOrNullObject();
      chartDataTable.load();

      // Set the display properties of the chart data table.
      chartDataTable.showLegendKey = true;
      chartDataTable.showHorizontalBorder = false;
      chartDataTable.showVerticalBorder = true;
      chartDataTable.showOutlineBorder = true;

      // Retrieve the chart data table format object and set font and border properties. 
      const chartDataTableFormat = chartDataTable.format;
      chartDataTableFormat.font.color = "#B76E79";
      chartDataTableFormat.font.name = "Comic Sans";
      chartDataTableFormat.border.color = "blue";
      await context.sync();
    });
'Excel.ChartDataTable#showVerticalBorder:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-data-table.yaml

    // This function adjusts the display and format of a chart data table that
    already exists on the worksheet.

    await Excel.run(async (context) => {
      // Retrieve the chart named "SalesChart" from the "Sample" worksheet.
      const chart = context.workbook.worksheets.getItem("Sample").charts.getItem("SalesChart");

      // Get the chart data table object and load its properties.
      const chartDataTable = chart.getDataTableOrNullObject();
      chartDataTable.load();

      // Set the display properties of the chart data table.
      chartDataTable.showLegendKey = true;
      chartDataTable.showHorizontalBorder = false;
      chartDataTable.showVerticalBorder = true;
      chartDataTable.showOutlineBorder = true;

      // Retrieve the chart data table format object and set font and border properties. 
      const chartDataTableFormat = chartDataTable.format;
      chartDataTableFormat.font.color = "#B76E79";
      chartDataTableFormat.font.name = "Comic Sans";
      chartDataTableFormat.border.color = "blue";
      await context.sync();
    });
'Excel.ChartDataTable#visible:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-data-table.yaml

    // This function adds a data table to a chart that already exists on the
    worksheet. 

    await Excel.run(async (context) => {
      // Retrieve the chart named "SalesChart" from the "Sample" worksheet.
      const chart = context.workbook.worksheets.getItem("Sample").charts.getItem("SalesChart");

      // Get the data table object for the chart and set it to visible.
      const chartDataTable = chart.getDataTableOrNullObject();
      chartDataTable.load("visible");
      chartDataTable.visible = true;
      await context.sync();
    });
'Excel.ChartDataTableFormat#border:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-data-table.yaml

    // This function adjusts the display and format of a chart data table that
    already exists on the worksheet.

    await Excel.run(async (context) => {
      // Retrieve the chart named "SalesChart" from the "Sample" worksheet.
      const chart = context.workbook.worksheets.getItem("Sample").charts.getItem("SalesChart");

      // Get the chart data table object and load its properties.
      const chartDataTable = chart.getDataTableOrNullObject();
      chartDataTable.load();

      // Set the display properties of the chart data table.
      chartDataTable.showLegendKey = true;
      chartDataTable.showHorizontalBorder = false;
      chartDataTable.showVerticalBorder = true;
      chartDataTable.showOutlineBorder = true;

      // Retrieve the chart data table format object and set font and border properties. 
      const chartDataTableFormat = chartDataTable.format;
      chartDataTableFormat.font.color = "#B76E79";
      chartDataTableFormat.font.name = "Comic Sans";
      chartDataTableFormat.border.color = "blue";
      await context.sync();
    });
'Excel.ChartDataTableFormat#font:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-data-table.yaml

    // This function adjusts the display and format of a chart data table that
    already exists on the worksheet.

    await Excel.run(async (context) => {
      // Retrieve the chart named "SalesChart" from the "Sample" worksheet.
      const chart = context.workbook.worksheets.getItem("Sample").charts.getItem("SalesChart");

      // Get the chart data table object and load its properties.
      const chartDataTable = chart.getDataTableOrNullObject();
      chartDataTable.load();

      // Set the display properties of the chart data table.
      chartDataTable.showLegendKey = true;
      chartDataTable.showHorizontalBorder = false;
      chartDataTable.showVerticalBorder = true;
      chartDataTable.showOutlineBorder = true;

      // Retrieve the chart data table format object and set font and border properties. 
      const chartDataTableFormat = chartDataTable.format;
      chartDataTableFormat.font.color = "#B76E79";
      chartDataTableFormat.font.name = "Comic Sans";
      chartDataTableFormat.border.color = "blue";
      await context.sync();
    });
'Excel.ChartFill#setSolidColor:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-point.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        let pointsCollection = sheet.charts.getItemAt(0).series.getItemAt(0).points;
        let point = pointsCollection.getItemAt(2);

        // Set color for chart point.
        point.format.fill.setSolidColor('red');

        await context.sync();        
    });
'Excel.ChartLegendFormat#font:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-legend.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        let chart = sheet.charts.getItemAt(0);
        chart.legend.visible = true;

        // Format the legend font.
        let font = chart.legend.format.font;
        font.bold = true;
        font.color = "red";
        font.italic = true;
        font.size = 15;
        font.name = "Calibri";
        font.underline = "Single";

        await context.sync();
    });
'Excel.ChartSeries#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-series.yaml

    await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getItem("Sample");
      const seriesCollection = sheet.charts.getItemAt(0).series;
      seriesCollection.load("count");
      await context.sync();

      if (seriesCollection.count > 0) {
        const series = seriesCollection.getItemAt(0);

        // Delete the first series.
        series.delete();
      }

      await context.sync();
    });
'Excel.ChartSeries#getDimensionDataSourceString:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-data-source.yaml

    // This function retrieves the data source information of a chart series in
    the Sample worksheet.

    await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getItem("Sample");

      // Get the first chart series from the first chart on the worksheet.
      const seriesCollection = sheet.charts.getItemAt(0).series;
      const series = seriesCollection.getItemAt(0);

      // Get the series data source string and type values. 
      const dataSourceString = series.getDimensionDataSourceString("Values");
      const dataSourceType = series.getDimensionDataSourceType("Values");

      series.load("name");
      await context.sync();
      
      // Log the data source information to the console.
      console.log(series.name + " data source string: " + dataSourceString.value);
      console.log(series.name + " data source type: " + dataSourceType.value);
    });
'Excel.ChartSeries#getDimensionDataSourceType:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-data-source.yaml

    // This function retrieves the data source information of a chart series in
    the Sample worksheet.

    await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getItem("Sample");

      // Get the first chart series from the first chart on the worksheet.
      const seriesCollection = sheet.charts.getItemAt(0).series;
      const series = seriesCollection.getItemAt(0);

      // Get the series data source string and type values. 
      const dataSourceString = series.getDimensionDataSourceString("Values");
      const dataSourceType = series.getDimensionDataSourceType("Values");

      series.load("name");
      await context.sync();
      
      // Log the data source information to the console.
      console.log(series.name + " data source string: " + dataSourceString.value);
      console.log(series.name + " data source type: " + dataSourceType.value);
    });
'Excel.ChartSeries#getDimensionValues:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-bubble-chart.yaml

    await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getItem("Sample");

      // The sample chart is of type `Excel.ChartType.bubble`.
      const bubbleChart = sheet.charts.getItem("Product Chart");

      // Get the first series in the chart.
      const firstSeries = bubbleChart.series.getItemAt(0);

      // Get the values for the dimensions we're interested in.
      const bubbleSize = firstSeries.getDimensionValues(Excel.ChartSeriesDimension.bubbleSizes);
      const xValues = firstSeries.getDimensionValues(Excel.ChartSeriesDimension.xvalues);
      const yValues = firstSeries.getDimensionValues(Excel.ChartSeriesDimension.yvalues);
      const category = firstSeries.getDimensionValues(Excel.ChartSeriesDimension.categories);

      await context.sync();

      // Log the information.
      console.log(`Series ${category.value} - X:${xValues.value},Y:${yValues.value},Bubble:${bubbleSize.value}`);
    });
'Excel.ChartSeries#markerBackgroundColor:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-series-markers.yaml

    await Excel.run(async (context) => {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let salesTable = sheet.tables.getItem("SalesTable");
        let dataRange = sheet.getRange("A1:E7");

        // Create an XY scatter chart.
        let chart = sheet.charts.add("XYScatterSmooth", dataRange, "Auto");
        chart.title.text = "Bicycle Parts Quarterly Sales"; 
      
        let series = chart.series;
        let series0 = series.getItemAt(0);
        let series1 = series.getItemAt(1);
        let series2 = series.getItemAt(2);
        let series3 = series.getItemAt(3);

        // Set markers.
        series0.markerStyle = "Dash";
        series0.markerForegroundColor = "black";
        series1.markerStyle = "Star";
        series1.markerForegroundColor = "black";
        series2.markerStyle = "X";
        series2.markerSize = 12;
        series3.markerStyle = "Triangle";
        series3.markerBackgroundColor = "purple";

        await context.sync();
    });
'Excel.ChartSeries#markerForegroundColor:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-series-markers.yaml

    await Excel.run(async (context) => {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let salesTable = sheet.tables.getItem("SalesTable");
        let dataRange = sheet.getRange("A1:E7");

        // Create an XY scatter chart.
        let chart = sheet.charts.add("XYScatterSmooth", dataRange, "Auto");
        chart.title.text = "Bicycle Parts Quarterly Sales"; 
      
        let series = chart.series;
        let series0 = series.getItemAt(0);
        let series1 = series.getItemAt(1);
        let series2 = series.getItemAt(2);
        let series3 = series.getItemAt(3);

        // Set markers.
        series0.markerStyle = "Dash";
        series0.markerForegroundColor = "black";
        series1.markerStyle = "Star";
        series1.markerForegroundColor = "black";
        series2.markerStyle = "X";
        series2.markerSize = 12;
        series3.markerStyle = "Triangle";
        series3.markerBackgroundColor = "purple";

        await context.sync();
    });
'Excel.ChartSeries#markerSize:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-series-markers.yaml

    await Excel.run(async (context) => {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let salesTable = sheet.tables.getItem("SalesTable");
        let dataRange = sheet.getRange("A1:E7");

        // Create an XY scatter chart.
        let chart = sheet.charts.add("XYScatterSmooth", dataRange, "Auto");
        chart.title.text = "Bicycle Parts Quarterly Sales"; 
      
        let series = chart.series;
        let series0 = series.getItemAt(0);
        let series1 = series.getItemAt(1);
        let series2 = series.getItemAt(2);
        let series3 = series.getItemAt(3);

        // Set markers.
        series0.markerStyle = "Dash";
        series0.markerForegroundColor = "black";
        series1.markerStyle = "Star";
        series1.markerForegroundColor = "black";
        series2.markerStyle = "X";
        series2.markerSize = 12;
        series3.markerStyle = "Triangle";
        series3.markerBackgroundColor = "purple";

        await context.sync();
    });
'Excel.ChartSeries#markerStyle:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-series-markers.yaml

    await Excel.run(async (context) => {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let salesTable = sheet.tables.getItem("SalesTable");
        let dataRange = sheet.getRange("A1:E7");

        // Create an XY scatter chart.
        let chart = sheet.charts.add("XYScatterSmooth", dataRange, "Auto");
        chart.title.text = "Bicycle Parts Quarterly Sales"; 
      
        let series = chart.series;
        let series0 = series.getItemAt(0);
        let series1 = series.getItemAt(1);
        let series2 = series.getItemAt(2);
        let series3 = series.getItemAt(3);

        // Set markers.
        series0.markerStyle = "Dash";
        series0.markerForegroundColor = "black";
        series1.markerStyle = "Star";
        series1.markerForegroundColor = "black";
        series2.markerStyle = "X";
        series2.markerSize = 12;
        series3.markerStyle = "Triangle";
        series3.markerBackgroundColor = "purple";

        await context.sync();
    });
'Excel.ChartSeries#setBubbleSizes:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-bubble-chart.yaml

    await Excel.run(async (context) => {
      /*
        The table is expected to look like this:
        Product, Inventory, Price, Current Market Share
        Calamansi, 2000, $2.45, 10%
        ...

        We want each bubble to represent a single row.
      */

      // Get the worksheet and table data.
      const sheet = context.workbook.worksheets.getItem("Sample");
      const table = sheet.tables.getItem("Sales");
      const dataRange = table.getDataBodyRange();

      // Get the table data without the row names.
      const valueRange = dataRange.getOffsetRange(0, 1).getResizedRange(0, -1);

      // Create the chart.
      const bubbleChart = sheet.charts.add(Excel.ChartType.bubble, valueRange);
      bubbleChart.name = "Product Chart";

      // Remove the default series, since we want a unique series for each row.
      bubbleChart.series.getItemAt(0).delete();

      // Load the data necessary to make a chart series.
      dataRange.load(["rowCount", "values"]);
      await context.sync();

      // For each row, create a chart series (a bubble).
      for (let i = 0; i < dataRange.rowCount; i++) {
        const newSeries = bubbleChart.series.add(dataRange.values[i][0], i);
        newSeries.setXAxisValues(dataRange.getCell(i, 1));
        newSeries.setValues(dataRange.getCell(i, 2));
        newSeries.setBubbleSizes(dataRange.getCell(i, 3));

        // Show the product name and market share percentage.
        newSeries.dataLabels.showSeriesName = true;
        newSeries.dataLabels.showBubbleSize = true;
        newSeries.dataLabels.showValue = false;
      }

      await context.sync();
    });
'Excel.ChartSeries#setValues:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-series.yaml

    await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getItem("Sample");

      let seriesCollection = sheet.charts.getItemAt(0);
      let rangeSelection = sheet.getRange("C2:C7");
      let xRangeSelection = sheet.getRange("A1:A7");

      // Add a series.
      let newSeries = seriesCollection.series.add("Qtr2");
      newSeries.setValues(rangeSelection);
      newSeries.setXAxisValues(xRangeSelection);

      await context.sync();
    });
'Excel.ChartSeriesBy:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-data-source.yaml

    await Excel.run(async (context) => {
      // Create a new worksheet called "Sample" and activate it.
      context.workbook.worksheets.getItemOrNullObject("Sample").delete();
      const sheet = context.workbook.worksheets.add("Sample");
      
      // Create an a table named SalesTable on the Sample worksheet.
      let expensesTable = sheet.tables.add("A1:E1", true);
      expensesTable.name = "SalesTable";

      expensesTable.getHeaderRowRange().values = [["Product", "Qtr1", "Qtr2", "Qtr3", "Qtr4"]];        
      expensesTable.rows.add(null, [
        ["Frames", 5000, 7000, 6544, 4377],
        ["Saddles", 400, 323, 276, 651],
        ["Brake levers", 12000, 8766, 8456, 9812],
        ["Chains", 1550, 1088, 692, 853],
        ["Mirrors", 225, 600, 923, 544],
        ["Spokes", 6005, 7634, 4589, 8765]
      ]);
      
      sheet.getUsedRange().format.autofitColumns();
      sheet.getUsedRange().format.autofitRows();
      sheet.activate();

      // Create a line chart based on data from SalesTable.
      let dataRange = sheet.getRange("A1:E7");
      let chart = sheet.charts.add("Line", dataRange, Excel.ChartSeriesBy.rows);

      // Position and style the chart.
      chart.setPosition("A15", "E30");
      chart.legend.position = "Right";
      chart.legend.format.fill.setSolidColor("white");

      await context.sync();
    });
'Excel.ChartSeriesDimension:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-bubble-chart.yaml

    await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getItem("Sample");

      // The sample chart is of type `Excel.ChartType.bubble`.
      const bubbleChart = sheet.charts.getItem("Product Chart");

      // Get the first series in the chart.
      const firstSeries = bubbleChart.series.getItemAt(0);

      // Get the values for the dimensions we're interested in.
      const bubbleSize = firstSeries.getDimensionValues(Excel.ChartSeriesDimension.bubbleSizes);
      const xValues = firstSeries.getDimensionValues(Excel.ChartSeriesDimension.xvalues);
      const yValues = firstSeries.getDimensionValues(Excel.ChartSeriesDimension.yvalues);
      const category = firstSeries.getDimensionValues(Excel.ChartSeriesDimension.categories);

      await context.sync();

      // Log the information.
      console.log(`Series ${category.value} - X:${xValues.value},Y:${yValues.value},Bubble:${bubbleSize.value}`);
    });
'Excel.ChartTitle#getSubstring:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-title-format.yaml

    await Excel.run(async (context) => {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let chart = sheet.charts.getItemAt(0);

        // Get first seven characters of the title and color them green.
        chart.title.getSubstring(0, 7).font.color = "Yellow";
        await context.sync();
    });
'Excel.ChartTitle#textOrientation:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-title-format.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const title = sheet.charts.getItemAt(0).title;
        title.textOrientation = -45;

        await context.sync();
    });
'Excel.ChartTrendline#type:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-trendlines.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        let seriesCollection = sheet.charts.getItemAt(0).series;

        // Get the trendline for series 1 and load its type property.  
        let trendline = seriesCollection.getItemAt(0).trendlines.getItem(0);
        trendline.load("type");

        await context.sync();

        console.log("The trendline type is:" + trendline.type);  
    });
'Excel.ChartTrendlineCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-trendlines.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        let seriesCollection = sheet.charts.getItemAt(0).series;

         // Add a trendline.  
        seriesCollection.getItemAt(0).trendlines.add("Linear");

        await context.sync();
    });
'Excel.ChartTrendlineFormat#line:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-trendlines.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        let seriesCollection = sheet.charts.getItemAt(0).series; 
        let trendline = seriesCollection.getItemAt(0).trendlines.getItem(0);

        // Set format of the trendline to a solid, red line.
        let line = trendline.format.line;
        line.color = '#FF0000';

        await context.sync();

        console.log("The trendline color has been set to:" + line.color);
    });
'Excel.ChartType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-create-several-charts.yaml

    await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");
      let salesTable = sheet.tables.getItem("SalesTable");

      let dataRange = sheet.getRange("A1:E7");
      let chart = sheet.charts.add(Excel.ChartType.line, dataRange, "Auto");

      chart.setPosition("A22", "F35");
      chart.legend.position = "Right";
      chart.legend.format.fill.setSolidColor("white");
      chart.dataLabels.format.font.size = 15;
      chart.dataLabels.format.font.color = "black";
      chart.title.text = "Bicycle Parts Quarterly Sales";

      await context.sync();
    });
'Excel.ClearApplyTo:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-hyperlink.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Orders");

        const productsRange = sheet.getRange("A3:A11");
        productsRange.load("values");

        await context.sync();

        // Clear all hyperlinks.
        for (let i = 0; i < productsRange.values.length; i++) {
            let cellRange = productsRange.getCell(i, 0);

            // Clear the hyperlink.
            // This eliminates the hyperlink but does not update text format.
            cellRange.clear(Excel.ClearApplyTo.hyperlinks);

            // Update text format.
            cellRange.format.font.underline = Excel.RangeUnderlineStyle.none;
            cellRange.format.font.color = "#000000";
        }

        await context.sync();
    });
'Excel.CloseBehavior:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/workbook-save-and-close.yaml

    await Excel.run(async (context) => {
        context.workbook.close(Excel.CloseBehavior.skipSave);
    });
'Excel.ColorScaleConditionalFormat#criteria:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B2:M5");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.colorScale);
        const criteria = {
            minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
            midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
            maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
        };
        conditionalFormat.colorScale.criteria = criteria;

        await context.sync();
    });
'Excel.Comment#content:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/12-comment/comment-basics.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Comments");
        const comment = sheet.comments.getItemAt(0);
        comment.content = "PLEASE add headers here.";
        await context.sync();
    });
'Excel.Comment#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/12-comment/comment-basics.yaml

    await Excel.run(async (context) => {
        context.workbook.comments.getItemByCell("Comments!A2").delete();
        await context.sync();
    });
'Excel.Comment#load:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/12-comment/comment-basics.yaml

    await Excel.run(async (context) => {
        const comment = context.workbook.comments.getItemByCell("Comments!A2");
        comment.load(["authorEmail", "authorName", "creationDate"]);
        await context.sync();

        console.log(`${comment.creationDate.toDateString()}: ${comment.authorName} (${comment.authorEmail})`);
        await context.sync();
    });
'Excel.Comment#resolved:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/12-comment/comment-resolution.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Comments");
        sheet.comments.getItemAt(0).resolved = true;
        await context.sync();
    });
'Excel.CommentCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/12-comment/comment-basics.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Comments");

        // Note that an InvalidArgument error will be thrown if multiple cells passed to `comment.add`.
        sheet.comments.add("A2", "TODO: add data.");
        await context.sync();
    });
'Excel.CommentCollection#onAdded:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-comment-event-handler.yaml

    await Excel.run(async (context) => {
        const comments = context.workbook.worksheets.getActiveWorksheet().comments;

        // Register the onAdded, onChanged, and onDeleted comment event handlers.
        comments.onAdded.add(commentAdded);
        comments.onChanged.add(commentChanged);
        comments.onDeleted.add(commentDeleted);

        await context.sync();

        console.log("Added event handlers for when comments are added, changed, or deleted.");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-comment-event-handler.yaml

    async function commentAdded(event: Excel.CommentAddedEventArgs) {
        // Retrieve the added comment using the comment ID.
        // Note: This function assumes only a single comment is added at a time. 
        await Excel.run(async (context) => {
            const addedComment = context.workbook.comments.getItem(event.commentDetails[0].commentId);

            // Load the added comment's data.
            addedComment.load(["content", "authorName", "creationDate"]);

            await context.sync();

            // Print out the added comment's data.
            console.log(`A comment was added:`);
            console.log(`    ID: ${event.commentDetails[0].commentId}`);
            console.log(`    Comment content:${addedComment.content}`);
            console.log(`    Comment author:${addedComment.authorName}`);
            console.log(`    Creation date:${addedComment.creationDate}`);
        });
    }
'Excel.CommentCollection#onChanged:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-comment-event-handler.yaml

    await Excel.run(async (context) => {
        const comments = context.workbook.worksheets.getActiveWorksheet().comments;

        // Register the onAdded, onChanged, and onDeleted comment event handlers.
        comments.onAdded.add(commentAdded);
        comments.onChanged.add(commentChanged);
        comments.onDeleted.add(commentDeleted);

        await context.sync();

        console.log("Added event handlers for when comments are added, changed, or deleted.");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-comment-event-handler.yaml

    async function commentChanged(event: Excel.CommentChangedEventArgs) {
        // Retrieve the changed comment using the comment ID.
        // Note: This function assumes only a single comment is changed at a time. 
        await Excel.run(async (context) => {
            const changedComment = context.workbook.comments.getItem(event.commentDetails[0].commentId);

            // Load the changed comment's data.
            changedComment.load(["content", "authorName", "creationDate"]);

            await context.sync();

            // Print out the changed comment's data.
            console.log(`A comment was changed:`);
            console.log(`    ID: ${event.commentDetails[0].commentId}`);
            console.log(`    Updated comment content: ${changedComment.content}`);
            console.log(`    Comment author: ${changedComment.authorName}`);
            console.log(`    Creation date: ${changedComment.creationDate}`);
        });
    }
'Excel.CommentCollection#onDeleted:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-comment-event-handler.yaml

    await Excel.run(async (context) => {
        const comments = context.workbook.worksheets.getActiveWorksheet().comments;

        // Register the onAdded, onChanged, and onDeleted comment event handlers.
        comments.onAdded.add(commentAdded);
        comments.onChanged.add(commentChanged);
        comments.onDeleted.add(commentDeleted);

        await context.sync();

        console.log("Added event handlers for when comments are added, changed, or deleted.");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-comment-event-handler.yaml

    async function commentDeleted(event: Excel.CommentDeletedEventArgs) {
        // Print out the deleted comment's ID.
        // Note: This function assumes only a single comment is deleted at a time. 
        await Excel.run(async (context) => {
            console.log(`A comment was deleted:`);
            console.log(`    ID: ${event.commentDetails[0].commentId}`);
        });
    }
'Excel.CommentReply#content:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/12-comment/comment-replies.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Comments");
        const comment = sheet.comments.getItemAt(0);
        const reply = comment.replies.getItemAt(0);
        reply.load("content");
        // Sync to load the content of the comment reply.
        await context.sync();

        // Append "Please!" to the end of the comment reply.
        reply.content += " Please!";
        await context.sync();
    });
'Excel.CommentReply#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/12-comment/comment-replies.yaml

    await Excel.run(async (context) => {
        // Remove the first comment reply from this worksheet's first comment.
        const sheet = context.workbook.worksheets.getItem("Comments");
        const comment = sheet.comments.getItemAt(0);
        comment.replies.getItemAt(0).delete();
        await context.sync();
    });
'Excel.CommentReplyCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/12-comment/comment-replies.yaml

    await Excel.run(async (context) => {
        // Adds a reply to the first comment in this worksheet.
        const sheet = context.workbook.worksheets.getItem("Comments");
        const comment = sheet.comments.getItemAt(0);
        comment.replies.add("Add content to this worksheet.");
        await context.sync();
    });
'Excel.CommentRichContent#mentions:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/12-comment/comment-mentions.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Comments");
        const mention = {
            email: "kakri@contoso.com",
            id: 0,
            name: "Kate Kristensen"
        };

        // This will tag the mention's name using the '@' syntax.
        // They will be notified via email.
        const commentBody = {
            mentions: [mention],
            richContent: '<at id="0">' + mention.name + "</at> -  Can you take a look?"
        };

        // Note that an InvalidArgument error will be thrown if multiple cells passed to `comment.add`.
        sheet.comments.add("A1", commentBody, Excel.ContentType.mention);
        await context.sync();
    });
'Excel.ConditionalCellValueRule#formula1:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B21:E23");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.cellValue);
        conditionalFormat.cellValue.format.font.color = "red";
        conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

        await context.sync();
    });
'Excel.ConditionalCellValueRule#operator:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B21:E23");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.cellValue);
        conditionalFormat.cellValue.format.font.color = "red";
        conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

        await context.sync();
    });
'Excel.ConditionalDataBarDirection:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.dataBar);
        conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;

        await context.sync();
    });
'Excel.ConditionalFormat#cellValue:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B21:E23");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.cellValue);
        conditionalFormat.cellValue.format.font.color = "red";
        conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

        await context.sync();
    });
'Excel.ConditionalFormat#colorScale:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B2:M5");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.colorScale);
        const criteria = {
            minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
            midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
            maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
        };
        conditionalFormat.colorScale.criteria = criteria;

        await context.sync();
    });
'Excel.ConditionalFormat#custom:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
        conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
        conditionalFormat.custom.format.font.color = "green";

        await context.sync();
    });
'Excel.ConditionalFormat#dataBar:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.dataBar);
        conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;

        await context.sync();
    });
'Excel.ConditionalFormat#getRange:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const worksheetRange = sheet.getRange();
        worksheetRange.conditionalFormats.load("type");

        await context.sync();

        let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
        worksheetRange.conditionalFormats.items.forEach(item => {
            cfRangePairs.push({
                cf: item,
                range: item.getRange().load("address")
            });
        });

        await context.sync();

        if (cfRangePairs.length > 0) {
            cfRangePairs.forEach(item => {
                console.log(item.cf.type);
            });
        } else {
            console.log("No conditional formats applied.");
        }
    });
'Excel.ConditionalFormat#iconSet:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.iconSet);
        const iconSetCF = conditionalFormat.iconSet;
        iconSetCF.style = Excel.IconSet.threeTriangles;

        /*
            The iconSetCF.criteria array is automatically prepopulated with
            criterion elements whose properties have been given default settings.
            You can't write to each property of a criterion directly. Instead,
            replace the whole criteria object.

            With a "three*" icon set style, such as "threeTriangles", the third
            element in the criteria array (criteria[2]) defines the "top" icon;
            e.g., a green triangle. The second (criteria[1]) defines the "middle"
            icon. The first (criteria[0]) defines the "low" icon, but it
            can often be left empty as the following object shows, because every
            cell that does not match the other two criteria always gets the low
            icon.            
        */
        iconSetCF.criteria = [
            {} as any,
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=700"
            },
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=1000",
            }
        ];

        await context.sync();
    });
'Excel.ConditionalFormat#preset:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B2:M5");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.presetCriteria);
        conditionalFormat.preset.format.font.color = "white";
        conditionalFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage };

        await context.sync();
    });
'Excel.ConditionalFormat#textComparison:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B16:D18");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.containsText);
        conditionalFormat.textComparison.format.font.color = "red";
        conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

        await context.sync();
    });
'Excel.ConditionalFormat#type:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const worksheetRange = sheet.getRange();
        worksheetRange.conditionalFormats.load("type");

        await context.sync();

        let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
        worksheetRange.conditionalFormats.items.forEach(item => {
            cfRangePairs.push({
                cf: item,
                range: item.getRange().load("address")
            });
        });

        await context.sync();

        if (cfRangePairs.length > 0) {
            cfRangePairs.forEach(item => {
                console.log(item.cf.type);
            });
        } else {
            console.log("No conditional formats applied.");
        }
    });
'Excel.ConditionalFormatCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B2:M5");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.colorScale);
        const criteria = {
            minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
            midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
            maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
        };
        conditionalFormat.colorScale.criteria = criteria;

        await context.sync();
    });
'Excel.ConditionalFormatCollection#clearAll:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange();
        range.conditionalFormats.clearAll();

        await context.sync();

        $(".conditional-formats").hide();
    });
'Excel.ConditionalFormatCollection#getItemAt:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const worksheetRange = sheet.getRange();
        worksheetRange.conditionalFormats.load("type");

        await context.sync();

        let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
        worksheetRange.conditionalFormats.items.forEach(item => {
            cfRangePairs.push({
                cf: item,
                range: item.getRange().load("address")
            });
        });

        await context.sync();

        if (cfRangePairs.length > 0) {
            cfRangePairs.forEach(item => {
                console.log(item.cf.type);
            });
        } else {
            console.log("No conditional formats applied.");
        }
    });
'Excel.ConditionalFormatColorCriterionType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B2:M5");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.colorScale);
        const criteria = {
            minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
            midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
            maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
        };
        conditionalFormat.colorScale.criteria = criteria;

        await context.sync();
    });
'Excel.ConditionalFormatIconRuleType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.iconSet);
        const iconSetCF = conditionalFormat.iconSet;
        iconSetCF.style = Excel.IconSet.threeTriangles;

        /*
            The iconSetCF.criteria array is automatically prepopulated with
            criterion elements whose properties have been given default settings.
            You can't write to each property of a criterion directly. Instead,
            replace the whole criteria object.

            With a "three*" icon set style, such as "threeTriangles", the third
            element in the criteria array (criteria[2]) defines the "top" icon;
            e.g., a green triangle. The second (criteria[1]) defines the "middle"
            icon. The first (criteria[0]) defines the "low" icon, but it
            can often be left empty as the following object shows, because every
            cell that does not match the other two criteria always gets the low
            icon.            
        */
        iconSetCF.criteria = [
            {} as any,
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=700"
            },
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=1000",
            }
        ];

        await context.sync();
    });
'Excel.ConditionalFormatPresetCriterion:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-advanced.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        queueCommandsToClearAllConditionalFormats(sheet);

        const temperatureDataRange = sheet.tables.getItem("TemperatureTable").getDataBodyRange();

        /* When the priority property of ConditionalFormat objects 
           is not explicitly set, they are prioritized in the order
           that they are added, with zero-based numbering: 0, 1, ...
           Contradictions are resolved in favor of the format with
           the lower priority number. In the example below, negative
           numbers will get a green background, but NOT a blue font,
           because priority goes to the format that gives them a red font.
        */

        // Set low numbers to bold, dark red font. This format will
        // get priority 0.
        const presetFormat = temperatureDataRange.conditionalFormats
            .add(Excel.ConditionalFormatType.presetCriteria);
        presetFormat.preset.format.font.color = "red";
        presetFormat.preset.format.font.bold = true;
        presetFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevBelowAverage };

         // Set negative numbers to blue font with green background. 
         // This format will get priority 1.
        const cellValueFormat = temperatureDataRange.conditionalFormats
            .add(Excel.ConditionalFormatType.cellValue);
        cellValueFormat.cellValue.format.font.color = "blue";
        cellValueFormat.cellValue.format.fill.color = "lightgreen";
        cellValueFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

        await context.sync();
    });
'Excel.ConditionalFormatRule#formula:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
        conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
        conditionalFormat.custom.format.font.color = "green";

        await context.sync();
    });
'Excel.ConditionalFormatType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-advanced.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        queueCommandsToClearAllConditionalFormats(sheet);

        const temperatureDataRange = sheet.tables.getItem("TemperatureTable").getDataBodyRange();

        /* When the priority property of ConditionalFormat objects 
           is not explicitly set, they are prioritized in the order
           that they are added, with zero-based numbering: 0, 1, ...
           Contradictions are resolved in favor of the format with
           the lower priority number. In the example below, negative
           numbers will get a green background, but NOT a blue font,
           because priority goes to the format that gives them a red font.
        */

        // Set low numbers to bold, dark red font. This format will
        // get priority 0.
        const presetFormat = temperatureDataRange.conditionalFormats
            .add(Excel.ConditionalFormatType.presetCriteria);
        presetFormat.preset.format.font.color = "red";
        presetFormat.preset.format.font.bold = true;
        presetFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevBelowAverage };

         // Set negative numbers to blue font with green background. 
         // This format will get priority 1.
        const cellValueFormat = temperatureDataRange.conditionalFormats
            .add(Excel.ConditionalFormatType.cellValue);
        cellValueFormat.cellValue.format.font.color = "blue";
        cellValueFormat.cellValue.format.fill.color = "lightgreen";
        cellValueFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

        await context.sync();
    });
'Excel.ConditionalIconCriterion#formula:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.iconSet);
        const iconSetCF = conditionalFormat.iconSet;
        iconSetCF.style = Excel.IconSet.threeTriangles;

        /*
            The iconSetCF.criteria array is automatically prepopulated with
            criterion elements whose properties have been given default settings.
            You can't write to each property of a criterion directly. Instead,
            replace the whole criteria object.

            With a "three*" icon set style, such as "threeTriangles", the third
            element in the criteria array (criteria[2]) defines the "top" icon;
            e.g., a green triangle. The second (criteria[1]) defines the "middle"
            icon. The first (criteria[0]) defines the "low" icon, but it
            can often be left empty as the following object shows, because every
            cell that does not match the other two criteria always gets the low
            icon.            
        */
        iconSetCF.criteria = [
            {} as any,
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=700"
            },
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=1000",
            }
        ];

        await context.sync();
    });
'Excel.ConditionalIconCriterion#operator:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.iconSet);
        const iconSetCF = conditionalFormat.iconSet;
        iconSetCF.style = Excel.IconSet.threeTriangles;

        /*
            The iconSetCF.criteria array is automatically prepopulated with
            criterion elements whose properties have been given default settings.
            You can't write to each property of a criterion directly. Instead,
            replace the whole criteria object.

            With a "three*" icon set style, such as "threeTriangles", the third
            element in the criteria array (criteria[2]) defines the "top" icon;
            e.g., a green triangle. The second (criteria[1]) defines the "middle"
            icon. The first (criteria[0]) defines the "low" icon, but it
            can often be left empty as the following object shows, because every
            cell that does not match the other two criteria always gets the low
            icon.            
        */
        iconSetCF.criteria = [
            {} as any,
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=700"
            },
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=1000",
            }
        ];

        await context.sync();
    });
'Excel.ConditionalIconCriterion#type:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.iconSet);
        const iconSetCF = conditionalFormat.iconSet;
        iconSetCF.style = Excel.IconSet.threeTriangles;

        /*
            The iconSetCF.criteria array is automatically prepopulated with
            criterion elements whose properties have been given default settings.
            You can't write to each property of a criterion directly. Instead,
            replace the whole criteria object.

            With a "three*" icon set style, such as "threeTriangles", the third
            element in the criteria array (criteria[2]) defines the "top" icon;
            e.g., a green triangle. The second (criteria[1]) defines the "middle"
            icon. The first (criteria[0]) defines the "low" icon, but it
            can often be left empty as the following object shows, because every
            cell that does not match the other two criteria always gets the low
            icon.            
        */
        iconSetCF.criteria = [
            {} as any,
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=700"
            },
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=1000",
            }
        ];

        await context.sync();
    });
'Excel.ConditionalIconCriterionOperator:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.iconSet);
        const iconSetCF = conditionalFormat.iconSet;
        iconSetCF.style = Excel.IconSet.threeTriangles;

        /*
            The iconSetCF.criteria array is automatically prepopulated with
            criterion elements whose properties have been given default settings.
            You can't write to each property of a criterion directly. Instead,
            replace the whole criteria object.

            With a "three*" icon set style, such as "threeTriangles", the third
            element in the criteria array (criteria[2]) defines the "top" icon;
            e.g., a green triangle. The second (criteria[1]) defines the "middle"
            icon. The first (criteria[0]) defines the "low" icon, but it
            can often be left empty as the following object shows, because every
            cell that does not match the other two criteria always gets the low
            icon.            
        */
        iconSetCF.criteria = [
            {} as any,
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=700"
            },
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=1000",
            }
        ];

        await context.sync();
    });
'Excel.ConditionalPresetCriteriaRule#criterion:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B2:M5");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.presetCriteria);
        conditionalFormat.preset.format.font.color = "white";
        conditionalFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage };

        await context.sync();
    });
'Excel.ConditionalTextComparisonRule#text:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B16:D18");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.containsText);
        conditionalFormat.textComparison.format.font.color = "red";
        conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

        await context.sync();
    });
'Excel.ConditionalTextOperator:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B16:D18");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.containsText);
        conditionalFormat.textComparison.format.font.color = "red";
        conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

        await context.sync();
    });
'Excel.ConnectorType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-lines.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const line = shapes.addLine(200, 50, 300, 150, Excel.ConnectorType.straight);
        line.name = "StraightLine";
        await context.sync();
    });
'Excel.ContentType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/12-comment/comment-mentions.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Comments");
        const mention = {
            email: "kakri@contoso.com",
            id: 0,
            name: "Kate Kristensen"
        };

        // This will tag the mention's name using the '@' syntax.
        // They will be notified via email.
        const commentBody = {
            mentions: [mention],
            richContent: '<at id="0">' + mention.name + "</at> -  Can you take a look?"
        };

        // Note that an InvalidArgument error will be thrown if multiple cells passed to `comment.add`.
        sheet.comments.add("A1", commentBody, Excel.ContentType.mention);
        await context.sync();
    });
'Excel.CultureInfo#datetimeFormat:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/culture-info-date-time.yaml

    await Excel.run(async (context) => {
      context.application.cultureInfo.datetimeFormat.load([
        "longDatePattern",
        "shortDatePattern",
        "dateSeparator",
        "longTimePattern",
        "timeSeparator"
      ]);
      await context.sync();

      // Use the cultural settings API to retrieve the user's system date and time settings.
      const systemLongDatePattern = context.application.cultureInfo.datetimeFormat.longDatePattern;
      const systemShortDatePattern = context.application.cultureInfo.datetimeFormat.shortDatePattern;
      const systemDateSeparator = context.application.cultureInfo.datetimeFormat.dateSeparator;
      const systemLongTimePattern = context.application.cultureInfo.datetimeFormat.longTimePattern;
      const systemTimeSeparator = context.application.cultureInfo.datetimeFormat.timeSeparator;

      // Write the date and time settings in your table. 
      const sheet = context.workbook.worksheets.getActiveWorksheet();
      const dateTimeData = sheet.getRange("A2:B6");
      dateTimeData.values = [
        ["Long date", systemLongDatePattern], 
        ["Short date", systemShortDatePattern], 
        ["Date separator", systemDateSeparator], 
        ["Long time format", systemLongTimePattern],
        ["Time separator", systemTimeSeparator]
      ];

      sheet.tables
        .getItemAt(0)
        .getRange()
        .format.autofitColumns();

      await context.sync();
    });
'Excel.CustomConditionalFormat#format:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
        conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
        conditionalFormat.custom.format.font.color = "green";

        await context.sync();
    });
'Excel.CustomPropertyCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/26-document/custom-properties.yaml

    await Excel.run(async (context) => {
      // Get the key/value pair from the task pane.
      const userKey = $("#key").text();
      const userValue = $("#value").text();

      // Add the custom property.
      const customDocProperties = context.workbook.properties.custom;
      customDocProperties.add(userKey, userValue);

      await context.sync();

      console.log(`Successfully set custom document property ${userKey}:${userValue}.`);
    });
'Excel.CustomXmlPart#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/18-custom-xml-parts/create-set-get-and-delete-custom-xml-parts.yaml

    await Excel.run(async (context) => {
        const settings = context.workbook.settings;
        const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
        await context.sync();

        if (xmlPartIDSetting.value) {   
            let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);
            const xmlBlob = customXmlPart.getXml();
            customXmlPart.delete();
            customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);

            await context.sync();

            if (customXmlPart.isNullObject) {
                $("#display-xml").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);

                // Delete the unneeded setting too.
                xmlPartIDSetting.delete();            
            } else {
                const readableXml = addLineBreaksToXML(xmlBlob.value);
                const strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\n${readableXml}`
                $("#display-xml").text(strangeMessage);
            }

            await context.sync();
        }
    });
'Excel.CustomXmlPart#getXml:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/18-custom-xml-parts/create-set-get-and-delete-custom-xml-parts.yaml

    await Excel.run(async (context) => {
        // You must have the xmlns attribute to populate the 
        // CustomXml.namespaceUri property.
        const originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
        const customXmlPart = context.workbook.customXmlParts.add(originalXml);
        customXmlPart.load("id");
        const xmlBlob = customXmlPart.getXml();

        await context.sync();

        const readableXml = addLineBreaksToXML(xmlBlob.value);
        $("#display-xml").text(readableXml);

        // Store the XML part's ID in a setting.
        const settings = context.workbook.settings;
        settings.add("ContosoReviewXmlPartId", customXmlPart.id);

        await context.sync();
    });
'Excel.CustomXmlPart#id:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/18-custom-xml-parts/create-set-get-and-delete-custom-xml-parts.yaml

    await Excel.run(async (context) => {
        // You must have the xmlns attribute to populate the 
        // CustomXml.namespaceUri property.
        const originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
        const customXmlPart = context.workbook.customXmlParts.add(originalXml);
        customXmlPart.load("id");
        const xmlBlob = customXmlPart.getXml();

        await context.sync();

        const readableXml = addLineBreaksToXML(xmlBlob.value);
        $("#display-xml").text(readableXml);

        // Store the XML part's ID in a setting.
        const settings = context.workbook.settings;
        settings.add("ContosoReviewXmlPartId", customXmlPart.id);

        await context.sync();
    });
'Excel.CustomXmlPart#setXml:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/18-custom-xml-parts/create-set-get-and-delete-custom-xml-parts.yaml

    await Excel.run(async (context) => {
        const settings = context.workbook.settings;
        const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
        await context.sync();

        if (xmlPartIDSetting.value) {   
            const customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);

            // The setXml method does a whole-for-whole replacement 
            // of the entire XML.
            customXmlPart.setXml("<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>John</Reviewer><Reviewer>Hitomi</Reviewer></Reviewers>");
            const xmlBlob = customXmlPart.getXml();
            await context.sync();

            const readableXml = addLineBreaksToXML(xmlBlob.value);
            $("#display-xml").text(readableXml);
            await context.sync();
        }
    });
'Excel.CustomXmlPartCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/18-custom-xml-parts/create-set-get-and-delete-custom-xml-parts.yaml

    await Excel.run(async (context) => {
        // You must have the xmlns attribute to populate the 
        // CustomXml.namespaceUri property.
        const originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
        const customXmlPart = context.workbook.customXmlParts.add(originalXml);
        customXmlPart.load("id");
        const xmlBlob = customXmlPart.getXml();

        await context.sync();

        const readableXml = addLineBreaksToXML(xmlBlob.value);
        $("#display-xml").text(readableXml);

        // Store the XML part's ID in a setting.
        const settings = context.workbook.settings;
        settings.add("ContosoReviewXmlPartId", customXmlPart.id);

        await context.sync();
    });
'Excel.CustomXmlPartCollection#getByNamespace:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/18-custom-xml-parts/test-xml-for-unique-namespace.yaml

    await Excel.run(async (context) => {
        $("#display-xml").text("");
        const contosoNamespace = "http://schemas.contoso.com/review/1.0";
        const customXmlParts = context.workbook.customXmlParts;
        const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
        const numberOfPartsInNamespace = filteredXmlParts.getCount();

        await context.sync();

        if (numberOfPartsInNamespace.value == 1) {
            const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
            const xmlBlob = onlyXmlPartInNamespace.getXml();

            await context.sync();

            // Make it a bit more readable.
            const readableXml = xmlBlob.value.replace(/></g, ">\n<");

            $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                ${readableXml}`);

        } else {
            console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
        }        

        await context.sync();
    });
'Excel.CustomXmlPartCollection#getItem:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/18-custom-xml-parts/create-set-get-and-delete-custom-xml-parts.yaml

    await Excel.run(async (context) => {
        const settings = context.workbook.settings;
        const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
        await context.sync();

        if (xmlPartIDSetting.value) {   
            const customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);

            // The setXml method does a whole-for-whole replacement 
            // of the entire XML.
            customXmlPart.setXml("<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>John</Reviewer><Reviewer>Hitomi</Reviewer></Reviewers>");
            const xmlBlob = customXmlPart.getXml();
            await context.sync();

            const readableXml = addLineBreaksToXML(xmlBlob.value);
            $("#display-xml").text(readableXml);
            await context.sync();
        }
    });
'Excel.CustomXmlPartScopedCollection#getCount:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/18-custom-xml-parts/test-xml-for-unique-namespace.yaml

    await Excel.run(async (context) => {
        $("#display-xml").text("");
        const contosoNamespace = "http://schemas.contoso.com/review/1.0";
        const customXmlParts = context.workbook.customXmlParts;
        const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
        const numberOfPartsInNamespace = filteredXmlParts.getCount();

        await context.sync();

        if (numberOfPartsInNamespace.value == 1) {
            const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
            const xmlBlob = onlyXmlPartInNamespace.getXml();

            await context.sync();

            // Make it a bit more readable.
            const readableXml = xmlBlob.value.replace(/></g, ">\n<");

            $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                ${readableXml}`);

        } else {
            console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
        }        

        await context.sync();
    });
'Excel.CustomXmlPartScopedCollection#getItemOrNullObject:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/18-custom-xml-parts/create-set-get-and-delete-custom-xml-parts.yaml

    await Excel.run(async (context) => {
        const settings = context.workbook.settings;
        const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
        await context.sync();

        if (xmlPartIDSetting.value) {   
            let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);
            const xmlBlob = customXmlPart.getXml();
            customXmlPart.delete();
            customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);

            await context.sync();

            if (customXmlPart.isNullObject) {
                $("#display-xml").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);

                // Delete the unneeded setting too.
                xmlPartIDSetting.delete();            
            } else {
                const readableXml = addLineBreaksToXML(xmlBlob.value);
                const strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\n${readableXml}`
                $("#display-xml").text(strangeMessage);
            }

            await context.sync();
        }
    });
'Excel.CustomXmlPartScopedCollection#getOnlyItem:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/18-custom-xml-parts/test-xml-for-unique-namespace.yaml

    await Excel.run(async (context) => {
        $("#display-xml").text("");
        const contosoNamespace = "http://schemas.contoso.com/review/1.0";
        const customXmlParts = context.workbook.customXmlParts;
        const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
        const numberOfPartsInNamespace = filteredXmlParts.getCount();

        await context.sync();

        if (numberOfPartsInNamespace.value == 1) {
            const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
            const xmlBlob = onlyXmlPartInNamespace.getXml();

            await context.sync();

            // Make it a bit more readable.
            const readableXml = xmlBlob.value.replace(/></g, ">\n<");

            $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                ${readableXml}`);

        } else {
            console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
        }        

        await context.sync();
    });
'Excel.DataBarConditionalFormat#barDirection:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.dataBar);
        conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;

        await context.sync();
    });
'Excel.DataPivotHierarchy#name:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-create-and-modify.yaml

    await Excel.run(async (context) => {
        const dataHierarchies = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales").dataHierarchies
        dataHierarchies.load("no-properties-needed");
        await context.sync();

        dataHierarchies.items[0].name = "Farm Sales";
        dataHierarchies.items[1].name = "Wholesale";
        await context.sync();
    });
'Excel.DataPivotHierarchy#showAs:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-calculations.yaml

    await Excel.run(async (context) => {
        const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
        const farmDataHierarchy: Excel.DataPivotHierarchy = pivotTable.dataHierarchies.getItem("Sum of Crates Sold at Farm");        
        const wholesaleDataHierarchy: Excel.DataPivotHierarchy = pivotTable.dataHierarchies.getItem("Sum of Crates Sold Wholesale");

        farmDataHierarchy.load("showAs");
        wholesaleDataHierarchy.load("showAs");
        await context.sync();

        // Show the crates of each fruit type sold at the farm as a percentage of the column's total.
        let farmShowAs = farmDataHierarchy.showAs;
        farmShowAs.calculation = Excel.ShowAsCalculation.percentOfColumnTotal;
        farmShowAs.baseField = pivotTable.rowHierarchies.getItem("Type").fields.getItem("Type");
        farmDataHierarchy.showAs = farmShowAs;

        let wholesaleShowAs = wholesaleDataHierarchy.showAs;
        wholesaleShowAs.calculation = Excel.ShowAsCalculation.percentOfColumnTotal;
        wholesaleShowAs.baseField = pivotTable.rowHierarchies.getItem("Type").fields.getItem("Type");
        wholesaleDataHierarchy.showAs = wholesaleShowAs;
        await context.sync();
    });
'Excel.DataValidation#errorAlert:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/22-data-validation/data-validation.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Decision");
        const commentsRange = 
            sheet.tables.getItem("NameOptionsTable").columns.getItem("Comments").getDataBodyRange();

        // When you are developing, it is a good practice to
        // clear the dataValidation object with each run of your code.
        commentsRange.dataValidation.clear();   

        // If the value of A2 is contained in the value of C2, then 
        // SEARCH(A2,C2) returns the number where it begins. Otherwise,
        // it does not return a number.
        let redundantStringRule = {
            custom: {
                formula: "=NOT(ISNUMBER(SEARCH(A2,C2)))"
            }
        };
        commentsRange.dataValidation.rule = redundantStringRule;
        commentsRange.dataValidation.errorAlert = {
            message: "It is redundant to include the baby name in the comment.",
            showAlert: true,
            style: "Information",
            title: "Baby Name in Comment"
        };

        await context.sync();
    });
'Excel.DataValidation#prompt:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/22-data-validation/data-validation.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Decision");
        const rankingRange = sheet.tables.getItem("NameOptionsTable").columns.getItem("Ranking").getDataBodyRange();

        // When you are developing, it is a good practice to
        // clear the dataValidation object with each run of your code.
        rankingRange.dataValidation.clear();

        let greaterThanZeroRule = {
            wholeNumber: {
                formula1: 0,
                operator: Excel.DataValidationOperator.greaterThan
            }
        };
        rankingRange.dataValidation.rule = greaterThanZeroRule;

        rankingRange.dataValidation.prompt = {
            message: "Please enter a positive number.",
            showPrompt: true,
            title: "Positive numbers only."
        };

        rankingRange.dataValidation.errorAlert = {
            message: "Sorry, only positive numbers are allowed",
            showAlert: true,
            style: "Stop",
            title: "Negative Number Entered"
        };

        await context.sync();
    });
'Excel.DataValidation#rule:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/22-data-validation/data-validation.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Decision");
        const nameRange = 
            sheet.tables.getItem("NameOptionsTable").columns.getItem("Baby Name").getDataBodyRange();

        // When you are developing, it is a good practice to
        // clear the dataValidation object with each run of your code.
        nameRange.dataValidation.clear();

        const nameSourceRange = context.workbook.worksheets.getItem("Names").getRange("A1:A3");

        let approvedListRule = {
            list: {
                inCellDropDown: true,
                source: nameSourceRange
            }
        };
        nameRange.dataValidation.rule = approvedListRule;

        await context.sync();
    });
'Excel.DataValidationOperator:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/22-data-validation/data-validation.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Decision");
        const rankingRange = sheet.tables.getItem("NameOptionsTable").columns.getItem("Ranking").getDataBodyRange();

        // When you are developing, it is a good practice to
        // clear the dataValidation object with each run of your code.
        rankingRange.dataValidation.clear();

        let greaterThanZeroRule = {
            wholeNumber: {
                formula1: 0,
                operator: Excel.DataValidationOperator.greaterThan
            }
        };
        rankingRange.dataValidation.rule = greaterThanZeroRule;

        rankingRange.dataValidation.prompt = {
            message: "Please enter a positive number.",
            showPrompt: true,
            title: "Positive numbers only."
        };

        rankingRange.dataValidation.errorAlert = {
            message: "Sorry, only positive numbers are allowed",
            showAlert: true,
            style: "Stop",
            title: "Negative Number Entered"
        };

        await context.sync();
    });
'Excel.DataValidationRule#list:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/22-data-validation/data-validation.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Decision");
        const nameRange = 
            sheet.tables.getItem("NameOptionsTable").columns.getItem("Baby Name").getDataBodyRange();

        // When you are developing, it is a good practice to
        // clear the dataValidation object with each run of your code.
        nameRange.dataValidation.clear();

        const nameSourceRange = context.workbook.worksheets.getItem("Names").getRange("A1:A3");

        let approvedListRule = {
            list: {
                inCellDropDown: true,
                source: nameSourceRange
            }
        };
        nameRange.dataValidation.rule = approvedListRule;

        await context.sync();
    });
'Excel.DataValidationRule#wholeNumber:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/22-data-validation/data-validation.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Decision");
        const rankingRange = sheet.tables.getItem("NameOptionsTable").columns.getItem("Ranking").getDataBodyRange();

        // When you are developing, it is a good practice to
        // clear the dataValidation object with each run of your code.
        rankingRange.dataValidation.clear();

        let greaterThanZeroRule = {
            wholeNumber: {
                formula1: 0,
                operator: Excel.DataValidationOperator.greaterThan
            }
        };
        rankingRange.dataValidation.rule = greaterThanZeroRule;

        rankingRange.dataValidation.prompt = {
            message: "Please enter a positive number.",
            showPrompt: true,
            title: "Positive numbers only."
        };

        rankingRange.dataValidation.errorAlert = {
            message: "Sorry, only positive numbers are allowed",
            showAlert: true,
            style: "Stop",
            title: "Negative Number Entered"
        };

        await context.sync();
    });
'Excel.DateFilterCondition:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotfilters.yaml

    await Excel.run(async (context) => {
      // Add a date-based PivotFilter.

      // Get the PivotTable.
      const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");

      // PivotFilters can only be applied to PivotHierarchies that are being used for pivoting.
      // If it's not already there, add "Date Updated" to the hierarchies.
      let dateHierarchy = pivotTable.rowHierarchies.getItemOrNullObject("Date Updated");
      await context.sync();
      if (dateHierarchy.isNullObject) {
        dateHierarchy = pivotTable.rowHierarchies.add(pivotTable.hierarchies.getItem("Date Updated"));
      }

      // Apply a date filter to filter out anything logged before August.
      const filterField = dateHierarchy.fields.getItem("Date Updated");
      const dateFilter = {
        condition: Excel.DateFilterCondition.afterOrEqualTo,
        comparator: {
          date: "2020-08-01",
          specificity: Excel.FilterDatetimeSpecificity.month
        }
      };
      filterField.applyFilter({ dateFilter: dateFilter });

      await context.sync();
    });
'Excel.DeleteShiftDirection:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-worksheet.yaml

    // This function deletes data from a range and sets the delete shift
    direction to "up".

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("A5:F5");
        range.delete(Excel.DeleteShiftDirection.up);
    });
'Excel.DocumentProperties#custom:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/26-document/custom-properties.yaml

    await Excel.run(async (context) => {
      // Load the keys and values of all custom properties.
      const customDocProperties = context.workbook.properties.custom;
      customDocProperties.load(["key", "value"]);
      await context.sync();

      // Log each custom property to the console.
      // Note that your document may have more properties than those you have set using this snippet.
      customDocProperties.items.forEach((property) => {
        console.log(`${property.key}:${property.value}`);
      });
    });
'Excel.DynamicFilterCriteria:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/46-table/filter-data.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        const expensesTable = sheet.tables.getItem("ExpensesTable");

        let filter = expensesTable.columns.getItem("Amount").filter;
        filter.apply({
            filterOn: Excel.FilterOn.dynamic,
            dynamicCriteria: Excel.DynamicFilterCriteria.belowAverage
        });

        filter = expensesTable.columns.getItem("Category").filter;
        filter.apply({
                filterOn: Excel.FilterOn.values,
                values: ["Restaurant", "Groceries"]
        });

        await context.sync();
       });
'Excel.EntityCompactLayoutIcons:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/20-data-types/data-types-entity-icons.yaml

    function createEntitiesWithIcons(icons): Excel.EntityCellValue[][] {
      /* This method creates an entity data type for each
       * icon in the `EntityCompactLayoutIcons` enum,
       * and then displays the icon name with its icon.
       */
      let entities = [];
      icons.forEach(function(iconName, index, array) {
        let icon = iconNames[iconName];
        entities.push([
          {
            type: "Entity",
            text: iconName,
            properties: {},
            layouts: {
              compact: {
                icon
              }
            }
          }
        ]);
      });
      return entities;
    }
'Excel.ErrorCellValue:type':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/20-data-types/data-types-error-values.yaml

    // This function sets the value of cell A1 to a #BUSY! error using data
    types.

    await Excel.run(async (context) => {
      // Retrieve the Sample worksheet and cell A1 on that sheet.
      const sheet = context.workbook.worksheets.getItemOrNullObject("Sample");
      const range = sheet.getRange("A1");

      // Get the error data type and set its type to `busy`.
      const error: Excel.ErrorCellValue = {
        type: Excel.CellValueType.error,
        errorType: Excel.ErrorCellValueType.busy
      };

      // Set cell A1 as the busy error.
      range.valuesAsJson = [[error]];
      await context.sync();
    });
'Excel.ErrorCellValueType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/20-data-types/data-types-error-values.yaml

    // This function sets the value of cell A1 to a #BUSY! error using data
    types.

    await Excel.run(async (context) => {
      // Retrieve the Sample worksheet and cell A1 on that sheet.
      const sheet = context.workbook.worksheets.getItemOrNullObject("Sample");
      const range = sheet.getRange("A1");

      // Get the error data type and set its type to `busy`.
      const error: Excel.ErrorCellValue = {
        type: Excel.CellValueType.error,
        errorType: Excel.ErrorCellValueType.busy
      };

      // Set cell A1 as the busy error.
      range.valuesAsJson = [[error]];
      await context.sync();
    });
'Excel.FillPattern:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/cell-properties.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // Creating the SettableCellProperties objects to use for the range.
        // In your add-in, these should be created once, outside the function.
        const topHeaderProps: Excel.SettableCellProperties = {
            // The style property takes a string matching the name of an Excel style.
            // Built-in style names are listed in the `BuiltInStyle` enum.
            // Note that a style will overwrite any formatting,
            // so do not use the format property with the style property.
            style: "Heading1"
        };

        const headerProps: Excel.SettableCellProperties = {
            // Any subproperties of format that are not set will not be changed when these cell properties are set.
            format: {
                fill: {
                    color: "Blue"
                },
                font: {
                    color: "White",
                    bold: true
                }
            }
        };

        const nonApplicableProps: Excel.SettableCellProperties = {
            format: {
                fill: {
                    pattern: Excel.FillPattern.gray25
                },
                font: {
                    color: "Gray",
                    italic: true
                }
            }
        };

        const matchupScoreProps: Excel.SettableCellProperties = {
            format: {
                borders: {
                    bottom: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    left: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    right: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    top: {
                        style: Excel.BorderLineStyle.continuous
                    }
                }
            }
        };

        const range = sheet.getRange("A1:E5");

        // You can use empty JSON objects to avoid changing a cell's properties.
        range.setCellProperties([
            [topHeaderProps, {}, {}, {}, {}],
            [{}, {}, headerProps, headerProps, headerProps],
            [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]
        ]);

        sheet.getUsedRange().format.autofitColumns();
        await context.sync();
    });
'Excel.FilterCriteria#filterOn:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-auto-filter.yaml

    // This function adds a percentage AutoFilter to the active worksheet 

    // and applies the filter to a column of the used range.

    await Excel.run(async (context) => {
        // Retrieve the active worksheet and the used range on that worksheet.
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        const farmData = sheet.getUsedRange();

        // Add a filter that will only show the rows with the top 50% of values in column 3.
        sheet.autoFilter.apply(farmData, 3, {
            criterion1: "50",
            filterOn: Excel.FilterOn.topPercent
        });

        await context.sync();
    });
'Excel.FilterDatetimeSpecificity:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotfilters.yaml

    await Excel.run(async (context) => {
      // Add a date-based PivotFilter.

      // Get the PivotTable.
      const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");

      // PivotFilters can only be applied to PivotHierarchies that are being used for pivoting.
      // If it's not already there, add "Date Updated" to the hierarchies.
      let dateHierarchy = pivotTable.rowHierarchies.getItemOrNullObject("Date Updated");
      await context.sync();
      if (dateHierarchy.isNullObject) {
        dateHierarchy = pivotTable.rowHierarchies.add(pivotTable.hierarchies.getItem("Date Updated"));
      }

      // Apply a date filter to filter out anything logged before August.
      const filterField = dateHierarchy.fields.getItem("Date Updated");
      const dateFilter = {
        condition: Excel.DateFilterCondition.afterOrEqualTo,
        comparator: {
          date: "2020-08-01",
          specificity: Excel.FilterDatetimeSpecificity.month
        }
      };
      filterField.applyFilter({ dateFilter: dateFilter });

      await context.sync();
    });
'Excel.FormattedNumberCellValue#numberFormat:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/20-data-types/data-types-formatted-number.yaml

    // This function creates a formatted number data type,

    // and sets the format of this data type as a currency.

    await Excel.run(async (context) => {
      // Get the Sample worksheet and a range on that sheet.
      const sheet = context.workbook.worksheets.getItemOrNullObject("Sample");
      const currencyRange = sheet.getRange("A2");

      // Write a number formatted as currency to cell A2.
      currencyRange.valuesAsJson = [
        [
          {
            type: Excel.CellValueType.formattedNumber,
            basicValue: 12.34,
            numberFormat: "$* #,##0.00"
          }
        ]
      ];

      await context.sync();
    });
'Excel.FormattedNumberCellValue#type:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/20-data-types/data-types-formatted-number.yaml

    // This function creates a formatted number data type,

    // and sets the format of this data type as a date.

    await Excel.run(async (context) => {
      // Get the Sample worksheet and a range on that sheet.
      const sheet = context.workbook.worksheets.getItemOrNullObject("Sample");
      const dateRange = sheet.getRange("A1");

      // Write a number formatted as a date to cell A1.
      dateRange.valuesAsJson = [
        [
          {
            type: Excel.CellValueType.formattedNumber,
            basicValue: 32889.0,
            numberFormat: "m/d/yyyy"
          }
        ]
      ];
      await context.sync();
    });
'Excel.GeometricShapeType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-create-and-delete.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.addGeometricShape(Excel.GeometricShapeType.hexagon);
        shape.left = 5;
        shape.top = 5;
        shape.height = 175;
        shape.width = 200;
        await context.sync();
    });
'Excel.GroupOption:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/outline.yaml

    Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        
        // Group the larger, main level. Note that the outline controls
        // will be on row 10, meaning 4-9 will collapse and expand.
        sheet.getRange("4:9").group(Excel.GroupOption.byRows);

        // Group the smaller, sublevels. Note that the outline controls
        // will be on rows 6 and 9, meaning 4-5 and 7-8 will collapse and expand.
        sheet.getRange("4:5").group(Excel.GroupOption.byRows);
        sheet.getRange("7:8").group(Excel.GroupOption.byRows);
        await context.sync();
    });
'Excel.HorizontalAlignment:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-merged-ranges.yaml

    await Excel.run(async (context) => {
      // Retrieve the worksheet and the table in that worksheet.
      const sheet = context.workbook.worksheets.getActiveWorksheet();
      const tableRange = sheet.getRange("B2:E6");

      // Create a merged range in the first row of the table.
      const chartTitle = tableRange.getRow(0);
      chartTitle.merge(true);

      // Format the merged range.
      chartTitle.format.horizontalAlignment = "Center";

      await context.sync();
    });
'Excel.IconSet:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.iconSet);
        const iconSetCF = conditionalFormat.iconSet;
        iconSetCF.style = Excel.IconSet.threeTriangles;

        /*
            The iconSetCF.criteria array is automatically prepopulated with
            criterion elements whose properties have been given default settings.
            You can't write to each property of a criterion directly. Instead,
            replace the whole criteria object.

            With a "three*" icon set style, such as "threeTriangles", the third
            element in the criteria array (criteria[2]) defines the "top" icon;
            e.g., a green triangle. The second (criteria[1]) defines the "middle"
            icon. The first (criteria[0]) defines the "low" icon, but it
            can often be left empty as the following object shows, because every
            cell that does not match the other two criteria always gets the low
            icon.            
        */
        iconSetCF.criteria = [
            {} as any,
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=700"
            },
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=1000",
            }
        ];

        await context.sync();
    });
'Excel.IconSetConditionalFormat#criteria:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.iconSet);
        const iconSetCF = conditionalFormat.iconSet;
        iconSetCF.style = Excel.IconSet.threeTriangles;

        /*
            The iconSetCF.criteria array is automatically prepopulated with
            criterion elements whose properties have been given default settings.
            You can't write to each property of a criterion directly. Instead,
            replace the whole criteria object.

            With a "three*" icon set style, such as "threeTriangles", the third
            element in the criteria array (criteria[2]) defines the "top" icon;
            e.g., a green triangle. The second (criteria[1]) defines the "middle"
            icon. The first (criteria[0]) defines the "low" icon, but it
            can often be left empty as the following object shows, because every
            cell that does not match the other two criteria always gets the low
            icon.            
        */
        iconSetCF.criteria = [
            {} as any,
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=700"
            },
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=1000",
            }
        ];

        await context.sync();
    });
'Excel.IconSetConditionalFormat#style:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.iconSet);
        const iconSetCF = conditionalFormat.iconSet;
        iconSetCF.style = Excel.IconSet.threeTriangles;

        /*
            The iconSetCF.criteria array is automatically prepopulated with
            criterion elements whose properties have been given default settings.
            You can't write to each property of a criterion directly. Instead,
            replace the whole criteria object.

            With a "three*" icon set style, such as "threeTriangles", the third
            element in the criteria array (criteria[2]) defines the "top" icon;
            e.g., a green triangle. The second (criteria[1]) defines the "middle"
            icon. The first (criteria[0]) defines the "low" icon, but it
            can often be left empty as the following object shows, because every
            cell that does not match the other two criteria always gets the low
            icon.            
        */
        iconSetCF.criteria = [
            {} as any,
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=700"
            },
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=1000",
            }
        ];

        await context.sync();
    });
'Excel.Image#format:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-images.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const image = sheet.shapes.getItem("Image").image;
        image.load("format");
        await context.sync();

        console.log("The image's format is: " + image.format);
        await context.sync();
    });
'Excel.InsertShiftDirection:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/insert-delete-clear-range.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B4:E4");

        range.insert(Excel.InsertShiftDirection.down);
        
        await context.sync();
    });
'Excel.KeyboardDirection:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-get-range-edge.yaml

    await Excel.run(async (context) => {
      // Get the selected range.
      const range = context.workbook.getSelectedRange();

      // Specify the direction with the `KeyboardDirection` enum.
      const direction = Excel.KeyboardDirection.up;

      // Get the active cell in the workbook.
      const activeCell = context.workbook.getActiveCell();

      // Get the top-most cell of the current used range.
      // This method acts like the Ctrl+Arrow key keyboard shortcut while a range is selected.
      const rangeEdge = range.getRangeEdge(
        direction,
        activeCell // If the selected range contains more than one cell, the active cell must be defined.
      );
      rangeEdge.select();

      await context.sync();
    });
'Excel.LabelFilterCondition:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotfilters.yaml

    await Excel.run(async (context) => {
      // Add a PivotFilter to filter based on the strings of item labels.

      // Get the PivotTable.
      const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");

      // Get the "Type" field.
      const field = pivotTable.hierarchies.getItem("Type").fields.getItem("Type");

      // Filter out any types that start with "L" ("Lemons" and "Limes" in this case).
      const filter: Excel.PivotLabelFilter = {
        condition: Excel.LabelFilterCondition.beginsWith,
        substring: "L",
        exclusive: true
      };

      // Apply the label filter to the field.
      field.applyFilter({ labelFilter: filter });

      await context.sync();
    });
'Excel.Line#connectBeginShape:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-lines.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const line = shapes.getItem("StraightLine").line;
        line.connectBeginShape(shapes.getItem("Left"), 2);
        line.connectEndShape(shapes.getItem("Right"), 0);
        await context.sync();
    });
'Excel.Line#connectEndShape:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-lines.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const line = shapes.getItem("StraightLine").line;
        line.connectBeginShape(shapes.getItem("Left"), 2);
        line.connectEndShape(shapes.getItem("Right"), 0);
        await context.sync();
    });
'Excel.Line#disconnectBeginShape:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-lines.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const line = shapes.getItem("StraightLine").line;
        line.disconnectBeginShape();
        line.disconnectEndShape();
        await context.sync();
    });
'Excel.Line#disconnectEndShape:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-lines.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const line = shapes.getItem("StraightLine").line;
        line.disconnectBeginShape();
        line.disconnectEndShape();
        await context.sync();
    });
'Excel.NamedItem:class':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/34-named-item/create-and-remove-named-item.yaml

    await Excel.run(async (context) => {
        // Log all the named items in the active worksheet.
        const namedItems = context.workbook.worksheets.getActiveWorksheet().names.load();
        await context.sync();

        console.log("This worksheet contains " + namedItems.items.length + " named items.");

        for (let i = 0; i < namedItems.items.length; i++) {
            const namedItem : Excel.NamedItem = namedItems.items[i];
            console.log(JSON.stringify(namedItem)) + "\n";
        }

        await context.sync();
    });
'Excel.NamedItem#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/34-named-item/create-and-remove-named-item.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const totalName = sheet.names.getItemOrNullObject("TotalAmount");
        totalName.load();
        await context.sync();

        if (totalName.value) {
            totalName.delete();

            // Replace the named item (TotalAmount) with the actual formula for TotalAmount to avoid displaying #NAME in the cell.
            sheet.getRange("D11").values = [["=SUM(ExpensesTable[AMOUNT])"]];
        } else {
            console.log("No named item created for the formula.");
        }

        await context.sync();
    });
'Excel.NamedItem#formula:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/34-named-item/update-named-item.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        // Get the named item
        const myNamedItem = sheet.names.getItemOrNullObject("MyRange");
        myNamedItem.load("name, formula");
        await context.sync();

        if (myNamedItem.isNullObject) {
            console.log(`There is no named item. Create it with "Add named item for a range" first.`);
        } else {                    
            // Update named item to point to the second range
            myNamedItem.formula = "=Sample!$B$10:$D$14";
            sheet.getRange("B10:D14").select();
            await context.sync();

            console.log(`Just updated the named item "${myNamedItem.name}" -- it's now located here: ${myNamedItem.formula}`);
        }
    });
'Excel.NamedItemCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/34-named-item/create-and-remove-named-item.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const headerRange = sheet.getRange("A1:D1");

        sheet.names.add("ExpensesHeader", headerRange);
        const namedItems = sheet.names.load("name, type");

        await context.sync();
    });
'Excel.NumberFormatInfo#numberDecimalSeparator:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/culture-info.yaml

    // This will convert a number like "14,37" to "14.37"

    // (assuming the system decimal separator is ".").
      await Excel.run(async (context) => {
    const sheet = context.workbook.worksheets.getItem("Sample");

    const decimalSource = sheet.getRange("B2");

    decimalSource.load("values");

    context.application.cultureInfo.numberFormat.load("numberDecimalSeparator");

    await context.sync();


    const systemDecimalSeparator =
    context.application.cultureInfo.numberFormat.numberDecimalSeparator;

    const oldDecimalString: string = decimalSource.values[0][0];


    // This assumes the input column is standardized to use "," as the decimal
    separator. 

    const newDecimalString = oldDecimalString.replace(",",
    systemDecimalSeparator);


    const resultRange = sheet.getRange("C2");

    resultRange.values = [[newDecimalString]];

    resultRange.format.autofitColumns();

    await context.sync();
      });
'Excel.NumberFormatInfo#numberGroupSeparator:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/culture-info.yaml

    await Excel.run(async (context) => {
      // This will convert a number like "123-456-789" to "123,456,789"
      // (assuming the system thousands separator is ",").
      const sheet = context.workbook.worksheets.getItem("Sample");
      const bigNumberSource = sheet.getRange("B3");
      bigNumberSource.load("values");
      context.application.cultureInfo.numberFormat.load("numberGroupSeparator");
      await context.sync();

      const systemThousandsSeparator = context.application.cultureInfo.numberFormat.numberGroupSeparator;
      const oldBigNumberString: string = bigNumberSource.values[0][0];
      
      // This assumes the input column is standardized to use "-" as the number group separator. 
      const newBigNumberString = oldBigNumberString.replace(/-/g, systemThousandsSeparator);

      const resultRange = sheet.getRange("C3");
      resultRange.values = [[newBigNumberString]];
      resultRange.format.autofitColumns();
      await context.sync();
    });
'Excel.PageBreakCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-page-layout.yaml

    await Excel.run(async (context) => {
        const farmSheet = context.workbook.worksheets.getItem("Print");
        farmSheet.horizontalPageBreaks.add("A21:E21");
        await context.sync();
    });
'Excel.PageLayout#centerHorizontally:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-page-layout.yaml

    await Excel.run(async (context) => {
        const farmSheet = context.workbook.worksheets.getItem("Print");
        farmSheet.pageLayout.centerHorizontally = true;
        farmSheet.pageLayout.centerVertically = true;
        await context.sync();
    });
'Excel.PageLayout#centerVertically:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-page-layout.yaml

    await Excel.run(async (context) => {
        const farmSheet = context.workbook.worksheets.getItem("Print");
        farmSheet.pageLayout.centerHorizontally = true;
        farmSheet.pageLayout.centerVertically = true;
        await context.sync();
    });
'Excel.PageLayout#orientation:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-page-layout.yaml

    await Excel.run(async (context) => {
        const farmSheet = context.workbook.worksheets.getItem("Print");
        farmSheet.pageLayout.orientation = Excel.PageOrientation.landscape;
        await context.sync();
    });
'Excel.PageLayout#setPrintArea:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-page-layout.yaml

    await Excel.run(async (context) => {
        const farmSheet = context.workbook.worksheets.getItem("Print");
        farmSheet.pageLayout.setPrintArea("A1:D41");
        await context.sync();
    });
'Excel.PageLayout#setPrintTitleRows:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-page-layout.yaml

    await Excel.run(async (context) => {
        const farmSheet = context.workbook.worksheets.getItem("Print");
        farmSheet.pageLayout.setPrintTitleRows("$1:$1");
        await context.sync();
    });
'Excel.PageLayout#zoom:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-page-layout.yaml

    await Excel.run(async (context) => {
        const farmSheet = context.workbook.worksheets.getItem("Print");
        farmSheet.pageLayout.zoom = { scale: 200 };
        await context.sync();
    });
'Excel.PageOrientation:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-page-layout.yaml

    await Excel.run(async (context) => {
        const farmSheet = context.workbook.worksheets.getItem("Print");
        farmSheet.pageLayout.orientation = Excel.PageOrientation.landscape;
        await context.sync();
    });
'Excel.PictureFormat:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-images.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.getItem("Image");
        const result = shape.getAsImage(Excel.PictureFormat.png);
        await context.sync();

        const imageString = result.value;
        // Your add-in would save this string as a .png file.
        console.log("The image's Base64-encoded string: " + imageString);
    });
'Excel.PivotField#clearAllFilters:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotfilters.yaml

    await Excel.run(async (context) => {
      // Clear all the PivotFilters.

      // Get the PivotTable.
      const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
      pivotTable.hierarchies.load("name");
      await context.sync();

      // Clear the filters on each PivotField.
      pivotTable.hierarchies.items.forEach((hierarchy) => {
        hierarchy.fields.getItem(hierarchy.name).clearAllFilters();
      });
      await context.sync();
    });
'Excel.PivotFilters#dateFilter:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotfilters.yaml

    await Excel.run(async (context) => {
      // Add a date-based PivotFilter.

      // Get the PivotTable.
      const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");

      // PivotFilters can only be applied to PivotHierarchies that are being used for pivoting.
      // If it's not already there, add "Date Updated" to the hierarchies.
      let dateHierarchy = pivotTable.rowHierarchies.getItemOrNullObject("Date Updated");
      await context.sync();
      if (dateHierarchy.isNullObject) {
        dateHierarchy = pivotTable.rowHierarchies.add(pivotTable.hierarchies.getItem("Date Updated"));
      }

      // Apply a date filter to filter out anything logged before August.
      const filterField = dateHierarchy.fields.getItem("Date Updated");
      const dateFilter = {
        condition: Excel.DateFilterCondition.afterOrEqualTo,
        comparator: {
          date: "2020-08-01",
          specificity: Excel.FilterDatetimeSpecificity.month
        }
      };
      filterField.applyFilter({ dateFilter: dateFilter });

      await context.sync();
    });
'Excel.PivotFilters#labelFilter:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotfilters.yaml

    await Excel.run(async (context) => {
      // Add a PivotFilter to filter based on the strings of item labels.

      // Get the PivotTable.
      const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");

      // Get the "Type" field.
      const field = pivotTable.hierarchies.getItem("Type").fields.getItem("Type");

      // Filter out any types that start with "L" ("Lemons" and "Limes" in this case).
      const filter: Excel.PivotLabelFilter = {
        condition: Excel.LabelFilterCondition.beginsWith,
        substring: "L",
        exclusive: true
      };

      // Apply the label filter to the field.
      field.applyFilter({ labelFilter: filter });

      await context.sync();
    });
'Excel.PivotFilters#manualFilter:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotfilters.yaml

    await Excel.run(async (context) => {
      // Add a PivotFilter to filter on manually-selected items.

      // Get the PivotTable.
      const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");

      // PivotFilters can only be applied to PivotHierarchies that are being used for pivoting.
      // If it's not already there, add "Classification" to the hierarchies.
      let classHierarchy = pivotTable.filterHierarchies.getItemOrNullObject("Classification");
      await context.sync();
      if (classHierarchy.isNullObject) {
        classHierarchy = pivotTable.filterHierarchies.add(pivotTable.hierarchies.getItem("Classification"));
      }

      // Apply a manual filter to include only a specific PivotItem (the string "Organic").
      const filterField = classHierarchy.fields.getItem("Classification");
      const manualFilter = { selectedItems: ["Organic"]};
      filterField.applyFilter({ manualFilter: manualFilter });

      await context.sync();
    });
'Excel.PivotFilters#valueFilter:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotfilters.yaml

    await Excel.run(async (context) => {
      // Add a PivotFilter to filter on the values correlated with a row.

      // Get the PivotTable.
      const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");

      // Get the "Farm" field.
      const field = pivotTable.hierarchies.getItem("Farm").fields.getItem("Farm");

      // Filter to only include rows with more than 500 wholesale crates sold.
      const filter: Excel.PivotValueFilter = {
        condition: Excel.ValueFilterCondition.greaterThan,
        comparator: 500,
        value: "Sum of Crates Sold Wholesale"
      };

      // Apply the value filter to the field.
      field.applyFilter({ valueFilter: filter });

      await context.sync();
    });
'Excel.PivotHierarchy#fields:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotfilters.yaml

    await Excel.run(async (context) => {
      // Add a PivotFilter to filter on the values correlated with a row.

      // Get the PivotTable.
      const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");

      // Get the "Farm" field.
      const field = pivotTable.hierarchies.getItem("Farm").fields.getItem("Farm");

      // Filter to only include rows with more than 500 wholesale crates sold.
      const filter: Excel.PivotValueFilter = {
        condition: Excel.ValueFilterCondition.greaterThan,
        comparator: 500,
        value: "Sum of Crates Sold Wholesale"
      };

      // Apply the value filter to the field.
      field.applyFilter({ valueFilter: filter });

      await context.sync();
    });
'Excel.PivotLayout#altTextDescription:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml

    await Excel.run(async (context) => {
      // Set the alt text for the displayed PivotTable.
      const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
      const pivotLayout = pivotTable.layout;

      pivotLayout.altTextTitle = "Farm Sales PivotTable";
      pivotLayout.altTextDescription = "A summary of fruit sales. It is pivoted on farm name, and fruit type. The aggregated data is both the sums of crates sold at the farms and the sums of crates sold wholesale.";
      console.log("Adding alt text. Check the PivotTable settings to see the changes.");

      await context.sync();
    });
'Excel.PivotLayout#displayBlankLineAfterEachItem:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml

    await Excel.run(async (context) => {
      // Add a blank row after each PivotItem in the row hierarchy.
      const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
      const pivotLayout = pivotTable.layout;

      pivotLayout.displayBlankLineAfterEachItem(true);
      console.log("Setting `PivotLayout.displayBlankLineAfterEachItem` to true.");

      await context.sync();
    });
'Excel.PivotLayout#emptyCellText:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml

    await Excel.run(async (context) => {
      // Set a default value for an empty cell in the PivotTable. This doesn't include cells left blank by the layout.
      const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
      const pivotLayout = pivotTable.layout;

      pivotLayout.emptyCellText = "--";

      // Set the text alignment to match the rest of the PivotTable.
      pivotLayout.getDataBodyRange().format.horizontalAlignment = Excel.HorizontalAlignment.right;
      await context.sync();
    });
'Excel.PivotLayout#fillEmptyCells:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml

    await Excel.run(async (context) => {
      // Toggle whether empty cells are filled with a default value.
      const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
      const pivotLayout = pivotTable.layout;

      pivotLayout.load("fillEmptyCells");
      await context.sync();

      let fillToSet = !pivotLayout.fillEmptyCells;
      console.log(`Filling empty cells? - ${fillToSet}`);

      pivotLayout.fillEmptyCells = fillToSet;
      await context.sync();
    });
'Excel.PivotLayout#getDataBodyRange:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-filters-and-summaries.yaml

    await Excel.run(async (context) => {
        const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");

        // The layout controls the ranges used by the PivotTable.
        const range = pivotTable.layout.getDataBodyRange();

        // Get all the data hierarchy totals.
        const grandTotalRange = range.getLastRow();
        grandTotalRange.load("address");
        await context.sync();
        
        // Use the wholesale and farm sale totals to make a final sum.
        const masterTotalRange = context.workbook.worksheets.getActiveWorksheet().getRange("B27:C27");
        masterTotalRange.formulas = [["All Crates", "=SUM(" + grandTotalRange.address + ")"]];
        await context.sync();
    });
'Excel.PivotLayout#layoutType:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml

    await Excel.run(async (context) => {
      // Change the PivotLayout.type to a new type.
      const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
      pivotTable.layout.load("layoutType");
      await context.sync();

      // Cycle between the three layout types.
      if (pivotTable.layout.layoutType === "Compact") {
        pivotTable.layout.layoutType = "Outline";
      } else if (pivotTable.layout.layoutType === "Outline") {
        pivotTable.layout.layoutType = "Tabular";
      } else {
        pivotTable.layout.layoutType = "Compact";
      }

      await context.sync();
      console.log("Pivot layout is now " + pivotTable.layout.layoutType);
    });
'Excel.PivotLayout#preserveFormatting:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml

    await Excel.run(async (context) => {
      // Set whether the PivotTable keeps the established format after it is refreshed and recalculated.
      const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
      const pivotLayout = pivotTable.layout;

      pivotLayout.load("preserveFormatting");
      await context.sync();

      let preserveFormattingToSet = !pivotLayout.preserveFormatting;
      console.log(`Preserve the formatting PivotTable after a refresh? - ${preserveFormattingToSet}`);

      pivotLayout.preserveFormatting = preserveFormattingToSet;
      await context.sync();
    });
'Excel.PivotLayout#repeatAllItemLabels:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml

    await Excel.run(async (context) => {
      // Repeat the PivotItem labels for each row used by another level of the row hierarchy.
      const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
      const pivotLayout = pivotTable.layout;

      pivotLayout.repeatAllItemLabels(true);
      console.log("Setting `PivotLayout.repeatAllItemLabels` to true.");

      await context.sync();
    });
'Excel.PivotLayout#showColumnGrandTotals:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml

    await Excel.run(async (context) => {
      // Turn the grand totals on and off for the rows and columns.
      const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
      const pivotLayout = pivotTable.layout;

      pivotLayout.load(["showRowGrandTotals", "showColumnGrandTotals"]);
      await context.sync();

      let showColumnTotals = !pivotLayout.showColumnGrandTotals;
      let showRowTotals = !pivotLayout.showRowGrandTotals;
      console.log(`Show column grand totals? - ${showColumnTotals}`);
      console.log(`Show row grand totals? - ${showRowTotals}`);

      pivotLayout.showColumnGrandTotals = showColumnTotals;
      pivotLayout.showRowGrandTotals = showRowTotals;

      await context.sync();
    });
'Excel.PivotLayout#showFieldHeaders:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml

    await Excel.run(async (context) => {
      // Turn the field headers on and off for the row and column hierarchies.
      const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
      const pivotLayout = pivotTable.layout;
      pivotLayout.load("showFieldHeaders");
      await context.sync();

      let showHeaders = !pivotLayout.showFieldHeaders;
      console.log(`Show field headers? - ${showHeaders}`);
      pivotLayout.showFieldHeaders = showHeaders;
      await context.sync();
    });
'Excel.PivotLayout#showRowGrandTotals:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml

    await Excel.run(async (context) => {
      // Turn the grand totals on and off for the rows and columns.
      const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
      const pivotLayout = pivotTable.layout;

      pivotLayout.load(["showRowGrandTotals", "showColumnGrandTotals"]);
      await context.sync();

      let showColumnTotals = !pivotLayout.showColumnGrandTotals;
      let showRowTotals = !pivotLayout.showRowGrandTotals;
      console.log(`Show column grand totals? - ${showColumnTotals}`);
      console.log(`Show row grand totals? - ${showRowTotals}`);

      pivotLayout.showColumnGrandTotals = showColumnTotals;
      pivotLayout.showRowGrandTotals = showRowTotals;

      await context.sync();
    });
'Excel.PivotTable#columnHierarchies:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-create-and-modify.yaml

    await Excel.run(async (context) => {
        const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");       

        // Check if the PivotTable already has a column.
        const column = pivotTable.columnHierarchies.getItemOrNullObject("Farm");
        column.load("id");
        await context.sync();

        if (column.isNullObject) {
            // Adding the farm column to the column hierarchy automatically removes it from the row hierarchy.
            pivotTable.columnHierarchies.add(pivotTable.hierarchies.getItem("Farm"));
        } else {
            pivotTable.columnHierarchies.remove(column);
        }

        await context.sync();
    });
'Excel.PivotTable#dataHierarchies:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-create-and-modify.yaml

    await Excel.run(async (context) => {
        const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
        pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem("Crates Sold at Farm"));
        pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem("Crates Sold Wholesale"));

        await context.sync();
    });
'Excel.PivotTable#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-create-and-modify.yaml

    await Excel.run(async (context) => {
        context.workbook.worksheets.getItem("Pivot").pivotTables.getItem("Farm Sales").delete();

        await context.sync();
    });
'Excel.PivotTable#filterHierarchies:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-filters-and-summaries.yaml

    async function filter(functionType: Excel.AggregationFunction) {
        await Excel.run(async (context) => {
            const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
            const filters = pivotTable.filterHierarchies;
            const filter = filters.getItemOrNullObject("Classification");
            filter.load();
            await context.sync();

            // Add the Classification hierarchy to the filter, if it's not already there.
            if (filter.isNullObject) {
                filters.add(pivotTable.hierarchies.getItem("Classification"));
                await context.sync();
            }
        });
    }
'Excel.PivotTable#getDataSourceString:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-source-data.yaml

    // This function logs information about the data source of a PivotTable.

    await Excel.run(async (context) => {
      const worksheet = context.workbook.worksheets.getItem("TotalPivot");
      const pivotTable = worksheet.pivotTables.getItem("All Farm Sales");

      // Retrieve the type and string representation of the data source of the PivotTable.
      const pivotTableDataSourceType = pivotTable.getDataSourceType();
      const pivotTableDataSourceString = pivotTable.getDataSourceString();
      await context.sync();

      // Log the data source information.
      console.log("Data source: " + pivotTableDataSourceString.value);
      console.log("Source type: " + pivotTableDataSourceType.value);
    });
'Excel.PivotTable#getDataSourceType:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-source-data.yaml

    // This function logs information about the data source of a PivotTable.

    await Excel.run(async (context) => {
      const worksheet = context.workbook.worksheets.getItem("TotalPivot");
      const pivotTable = worksheet.pivotTables.getItem("All Farm Sales");

      // Retrieve the type and string representation of the data source of the PivotTable.
      const pivotTableDataSourceType = pivotTable.getDataSourceType();
      const pivotTableDataSourceString = pivotTable.getDataSourceString();
      await context.sync();

      // Log the data source information.
      console.log("Data source: " + pivotTableDataSourceString.value);
      console.log("Source type: " + pivotTableDataSourceType.value);
    });
'Excel.PivotTable#layout:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-create-and-modify.yaml

    await Excel.run(async (context) => {
        const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
        pivotTable.layout.load("layoutType");
        await context.sync();

        // Cycle between the three layout types.
        if (pivotTable.layout.layoutType === "Compact") {
            pivotTable.layout.layoutType = "Outline";
        } else if (pivotTable.layout.layoutType === "Outline") {
            pivotTable.layout.layoutType = "Tabular";
        } else {
            pivotTable.layout.layoutType = "Compact";
        }
        await context.sync();
        console.log("Pivot layout is now " + pivotTable.layout.layoutType);
    });
'Excel.PivotTable#refresh:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-refresh.yaml

    // This function refreshes the "Farm Sales" PivotTable,

    // which updates the PivotTable with changes made to the source table.

    await Excel.run(async (context) => {
      const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
      pivotTable.refresh();
      await context.sync();
    });
'Excel.PivotTableCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-create-and-modify.yaml

    await Excel.run(async (context) => {
        const rangeToAnalyze = context.workbook.worksheets.getItem("Data").getRange("A1:E21");
        const rangeToPlacePivot = context.workbook.worksheets.getItem("Pivot").getRange("A2");
        context.workbook.worksheets.getItem("Pivot").pivotTables.add("Farm Sales", rangeToAnalyze, rangeToPlacePivot);

        await context.sync();
    });
'Excel.PivotTableCollection#getItem:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-refresh.yaml

    // This function refreshes the "Farm Sales" PivotTable,

    // which updates the PivotTable with changes made to the source table.

    await Excel.run(async (context) => {
      const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
      pivotTable.refresh();
      await context.sync();
    });
'Excel.PresetCriteriaConditionalFormat#rule:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B2:M5");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.presetCriteria);
        conditionalFormat.preset.format.font.color = "white";
        conditionalFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage };

        await context.sync();
    });
'Excel.Range#autoFill:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-auto-fill.yaml

    await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getActiveWorksheet();
      const sumCell = sheet.getRange("P4");
      
      // Copy everything. The formulas will be contextually updated based on their new locations.
      sumCell.autoFill("P4:P7", Excel.AutoFillType.fillCopy);
      sumCell.format.autofitColumns();
      await context.sync();
    });
'Excel.Range#copyFrom:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-copyfrom.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        // Place a label in front of the copied data.
        sheet.getRange("F2").values = [["Copied Formula"]];

        // Copy a range preserving the formulas.
        // Note: non-formula values are copied over as is.
        sheet.getRange("G2").copyFrom("A1:E1", Excel.RangeCopyType.formulas);
        await context.sync();
    });
'Excel.Range#find:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-find.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const table = sheet.tables.getItem("ExpensesTable");
        const searchRange = table.getRange();

        // NOTE: If no match is found, an ItemNotFound error
        // is thrown when Range.find is evaluated.
        const foundRange = searchRange.find($("#searchText").val().toString(), {
            completeMatch: isCompleteMatchToggle,
            matchCase: isMatchCaseToggle,
            searchDirection: searchDirectionToggle
        });
        
        foundRange.load("address");
        await context.sync();


        console.log(foundRange.address);
    });
'Excel.Range#findOrNullObject:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-find.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const table = sheet.tables.getItem("ExpensesTable");
        const searchRange = table.getRange();
        const foundRange = searchRange.findOrNullObject($("#searchText").val().toString(), {
            completeMatch: isCompleteMatchToggle,
            matchCase: isMatchCaseToggle,
            searchDirection: searchDirectionToggle
        });
        
        foundRange.load("address");
        await context.sync();

        if (foundRange.isNullObject) {
            console.log("Text not found");
        } else {
            console.log(foundRange.address);
        }
    });
'Excel.Range#getCellProperties:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/cell-properties.yaml

    await Excel.run(async (context) => {
        const cell = context.workbook.getActiveCell();

        // Define the cell properties to get by setting the matching LoadOptions to true.
        const propertiesToGet = cell.getCellProperties({
            address: true,
            format: {
                fill: {
                    color: true
                },
                font: {
                    color: true
                }
            },
            style: true
        });

        // Sync to get the data from the workbook.
        await context.sync();
        const cellProperties = propertiesToGet.value[0][0];
        console.log(
            `Address: ${cellProperties.address}\nStyle: ${cellProperties.style}\nFill Color: ${cellProperties.format.fill.color}\nFont Color: ${cellProperties.format.font.color}`);
    });
'Excel.Range#getDependents:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-dependents.yaml

    // This function highlights all the dependent cells of the active cell.

    // Dependent cells contain formulas that refer to other cells.

    await Excel.run(async (context) => {
      // Get addresses of the active cell's dependent cells.
      const range = context.workbook.getActiveCell();
      const dependents = range.getDependents();
      range.load("address");
      dependents.areas.load("address");
      await context.sync();

      console.log(`All dependent cells of ${range.address}:`);

      // Use the dependents API to loop through dependents of the active cell.
      for (let i = 0; i < dependents.areas.items.length; i++) {
        // Highlight and print out the address of each dependent cell.
        dependents.areas.items[i].format.fill.color = "Orange";
        console.log(`  ${dependents.areas.items[i].address}`);
      }
      await context.sync();
    });
'Excel.Range#getDirectDependents:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-direct-dependents.yaml

    await Excel.run(async (context) => {
      // Direct dependents are cells that contain formulas that refer to other cells.
      let range = context.workbook.getActiveCell();
      let directDependents = range.getDirectDependents();
      range.load("address");
      directDependents.areas.load("address");
      await context.sync();
      
      console.log(`Direct dependent cells of ${range.address}:`);
      
      // Use the direct dependents API to loop through direct dependents of the active cell.
      for (let i = 0; i < directDependents.areas.items.length; i++) {
        // Highlight and print the address of each dependent cell.
        directDependents.areas.items[i].format.fill.color = "Yellow";
        console.log(`  ${directDependents.areas.items[i].address}`);
      }
      await context.sync();
    });
'Excel.Range#getDirectPrecedents:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/precedents.yaml

    await Excel.run(async (context) => {
      // Precedents are cells referenced by the formula in a cell.
      // A "direct precedent" is a cell directly referenced by the selected formula.
      let range = context.workbook.getActiveCell();
      let directPrecedents = range.getDirectPrecedents();
      range.load("address");
      directPrecedents.areas.load("address");
      await context.sync();

      console.log(`Direct precedent cells of ${range.address}:`);

      // Use the direct precedents API to loop through precedents of the active cell.
      for (let i = 0; i < directPrecedents.areas.items.length; i++) {
        // Highlight and console the address of each precedent cell.
        directPrecedents.areas.items[i].format.fill.color = "Yellow";
        console.log(`  ${directPrecedents.areas.items[i].address}`);
      }
      await context.sync();
    });
'Excel.Range#getExtendedRange:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-get-range-edge.yaml

    await Excel.run(async (context) => {
      // Get the selected range.
      const range = context.workbook.getSelectedRange();

      // Specify the direction with the `KeyboardDirection` enum.
      const direction = Excel.KeyboardDirection.down;

      // Get the active cell in the workbook.
      const activeCell = context.workbook.getActiveCell();

      // Get all the cells from the currently selected range to the bottom-most edge of the used range.
      // This method acts like the Ctrl+Shift+Arrow key keyboard shortcut while a range is selected.
      const extendedRange = range.getExtendedRange(
        direction,
        activeCell // If the selected range contains more than one cell, the active cell must be defined.
      );
      extendedRange.select();

      await context.sync();
    });
'Excel.Range#getIntersectionOrNullObject:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-relationships.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const salesTable = sheet.tables.getItem("SalesTable");
        const dataRange = salesTable.getDataBodyRange();

        // We want the most recent quarter that has data, so
        // exclude quarters without data and get the last of
        // the remaining columns.
        const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
        const currentQuarterRange = usedDataRange.getLastColumn();

        // Asian and European teams have separate contests.
        const asianSalesRange = sheet.getRange("A2:E4");
        const europeanSalesRange = sheet.getRange("A5:E7");

        // The data for each chart is the intersection of the
        // current quarter column and the rows for the continent.
        const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
        const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

        // Must sync before you can test the output of *OrNullObject
        // method/property.
        await context.sync();

        if (asianContestRange.isNullObject) {
            // See the declaration of this function for how to
            // test this code path.
            reportMissingData("Asian");
        } else {
            createContinentChart(
                sheet,
                "Asian",
                asianContestRange,
                "A9",
                "F24"
            );
        }

        if (europeanContestRange.isNullObject) {
            // See the declaration of this function for how to
            // test this code path.
            reportMissingData("European");
        } else {
            createContinentChart(
                sheet,
                "European",
                europeanContestRange,
                "A25",
                "F40"
            );
        }

        await context.sync();
    });
'Excel.Range#getMergedAreasOrNullObject:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-merged-ranges.yaml

    await Excel.run(async (context) => {
      // Retrieve the worksheet and the table in that worksheet.
      const sheet = context.workbook.worksheets.getActiveWorksheet();
      const tableRange = sheet.getRange("B2:E6");

      // Retrieve the merged range within the table and load its details.
      const mergedAreas = tableRange.getMergedAreasOrNullObject();
      mergedAreas.load("address");
      mergedAreas.load("cellCount");

      // Select the merged range.
      const range = mergedAreas.areas.getItemAt(0);
      range.select();
      await context.sync();

      // Print out the details of the `mergedAreas` range object.
      console.log(`Address of the merged range: ${mergedAreas.address}`);
      console.log(`Number of cells in the merged range: ${mergedAreas.cellCount}`);

      await context.sync();
    });
'Excel.Range#getPivotTables:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-get-pivottables.yaml

    await Excel.run(async (context) => {
      const activeRange = context.workbook.getSelectedRange();

      // Get all the PivotTables that intersect with this range.
      const partiallyContainedPivotTables = activeRange.getPivotTables();
      // Get all the PivotTables that are completely contained within this range.
      const fullyContainedPivotTables = activeRange.getPivotTables(true);

      partiallyContainedPivotTables.load("name");
      fullyContainedPivotTables.load("name");
      await context.sync();

      // Display the names in the console.
      console.log("PivotTables in the current range:")
      partiallyContainedPivotTables.items.forEach((pivotTable) => {
        console.log(`\t${pivotTable.name}`);
      });
      console.log("PivotTables completely contained in the current range:")
      fullyContainedPivotTables.items.forEach((pivotTable) => {
        console.log(`\t${pivotTable.name}`);
      });
    });
'Excel.Range#getPrecedents:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/precedents.yaml

    await Excel.run(async (context) => {
      // Precedents are cells referenced by the formula in a cell.
      let range = context.workbook.getActiveCell();
      let precedents = range.getPrecedents();
      range.load("address");
      precedents.areas.load("address");
      await context.sync();

      console.log(`All precedent cells of ${range.address}:`);

      // Use the precedents API to loop through precedents of the active cell.
      for (let i = 0; i < precedents.areas.items.length; i++) {
        // Highlight and console the address of each precedent cell.
        precedents.areas.items[i].format.fill.color = "Orange";
        console.log(`  ${precedents.areas.items[i].address}`);
      }
      await context.sync();
    });
'Excel.Range#getRangeEdge:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-get-range-edge.yaml

    await Excel.run(async (context) => {
      // Get the selected range.
      const range = context.workbook.getSelectedRange();

      // Specify the direction with the `KeyboardDirection` enum.
      const direction = Excel.KeyboardDirection.up;

      // Get the active cell in the workbook.
      const activeCell = context.workbook.getActiveCell();

      // Get the top-most cell of the current used range.
      // This method acts like the Ctrl+Arrow key keyboard shortcut while a range is selected.
      const rangeEdge = range.getRangeEdge(
        direction,
        activeCell // If the selected range contains more than one cell, the active cell must be defined.
      );
      rangeEdge.select();

      await context.sync();
    });
'Excel.Range#getSpecialCells:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-areas.yaml

    await Excel.run(async (context) => {

        const sheet = context.workbook.worksheets.getActiveWorksheet();
        const usedRange = sheet.getUsedRange();

        // Find the ranges with either text or logical (boolean) values.
        const formulaRanges = usedRange.getSpecialCells("Constants", "LogicalText");
        formulaRanges.format.fill.color = "orange";

        return context.sync();
    });
'Excel.Range#getSpillingToRange:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/dynamic-arrays.yaml

    await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getItem("Sample");

      // Set G4 to a formula that returns a dynamic array.
      const targetCell = sheet.getRange("G4");
      targetCell.formulas = [["=A4:D4"]];

      // Get the address of the cells that the dynamic array spilled into.
      const spillRange = targetCell.getSpillingToRange();
      spillRange.load("address");

      // Fit the columns for readability.
      sheet.getUsedRange().format.autofitColumns();
      await context.sync();

      console.log(`Copying the table headers spilled into ${spillRange.address}.`);
    });
'Excel.Range#getUsedRange:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-relationships.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const salesTable = sheet.tables.getItem("SalesTable");
        const dataRange = salesTable.getDataBodyRange();

        // We want the most recent quarter that has data, so
        // exclude quarters without data and get the last of
        // the remaining columns.
        const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
        const currentQuarterRange = usedDataRange.getLastColumn();

        // Asian and European teams have separate contests.
        const asianSalesRange = sheet.getRange("A2:E4");
        const europeanSalesRange = sheet.getRange("A5:E7");

        // The data for each chart is the intersection of the
        // current quarter column and the rows for the continent.
        const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
        const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

        // Must sync before you can test the output of *OrNullObject
        // method/property.
        await context.sync();

        if (asianContestRange.isNullObject) {
            // See the declaration of this function for how to
            // test this code path.
            reportMissingData("Asian");
        } else {
            createContinentChart(
                sheet,
                "Asian",
                asianContestRange,
                "A9",
                "F24"
            );
        }

        if (europeanContestRange.isNullObject) {
            // See the declaration of this function for how to
            // test this code path.
            reportMissingData("European");
        } else {
            createContinentChart(
                sheet,
                "European",
                europeanContestRange,
                "A25",
                "F40"
            );
        }

        await context.sync();
    });
'Excel.Range#getUsedRangeOrNullObject:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/used-range.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const salesTable = sheet.tables.getItem("SalesTable");
        const dataRange = salesTable.getDataBodyRange();

        // Pass true so only cells with values count as used
        const usedDataRange = dataRange.getUsedRangeOrNullObject(
            true /* valuesOnly */
        );

        //Must sync before reading value returned from *OrNullObject method/property.
        await context.sync();

        if (usedDataRange.isNullObject) {
            console.log("Need Data to Make Chart");
            console.log("To create a meaningful chart, press 'Fill the table' (or add names to the Product column and numbers to some of the other cells). Then press 'Try to create chart' again.");
        } else {
            const chart = sheet.charts.add(
                Excel.ChartType.columnClustered,
                dataRange,
                "Columns"
            );
            chart.setPosition("A15", "F30");
            chart.title.text = "Quarterly sales chart";
            chart.legend.position = "Right";
            chart.legend.format.fill.setSolidColor("white");
            chart.dataLabels.format.font.size = 15;
            chart.dataLabels.format.font.color = "black";
        }

        await context.sync();
    });
'Excel.Range#group:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/outline.yaml

    Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        
        // Group the larger, main level. Note that the outline controls
        // will be on row 10, meaning 4-9 will collapse and expand.
        sheet.getRange("4:9").group(Excel.GroupOption.byRows);

        // Group the smaller, sublevels. Note that the outline controls
        // will be on rows 6 and 9, meaning 4-5 and 7-8 will collapse and expand.
        sheet.getRange("4:5").group(Excel.GroupOption.byRows);
        sheet.getRange("7:8").group(Excel.GroupOption.byRows);
        await context.sync();
    });
'Excel.Range#hyperlink:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-hyperlink.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Orders");

        let productsRange = sheet.getRange("A3:A5");
        productsRange.load("values");

        await context.sync();

        // Create a hyperlink to a URL 
        // for each product name in the first table.
        for (let i = 0; i < productsRange.values.length; i++) {
            let cellRange = productsRange.getCell(i, 0);
            let cellText = productsRange.values[i][0];

            let hyperlink = {
                textToDisplay: cellText,
                screenTip: "Search Bing for '" + cellText + "'",
                address: "https://www.bing.com?q=" + cellText
            }
            cellRange.hyperlink = hyperlink;
        }

        await context.sync();
    });
'Excel.Range#merge:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-merged-ranges.yaml

    await Excel.run(async (context) => {
      // Retrieve the worksheet and the table in that worksheet.
      const sheet = context.workbook.worksheets.getActiveWorksheet();
      const tableRange = sheet.getRange("B2:E6");

      // Create a merged range in the first row of the table.
      const chartTitle = tableRange.getRow(0);
      chartTitle.merge(true);

      // Format the merged range.
      chartTitle.format.horizontalAlignment = "Center";

      await context.sync();
    });
'Excel.Range#moveTo:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-copyfrom.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        // Place a label in front of the moved data.
        sheet.getRange("F12").values = [["Moved Range:"]];

        // Move the range from A1:E1 to G12:K12.
        sheet.getRange("A1:E1").moveTo("G12");
        await context.sync();
    });
'Excel.Range#removeDuplicates:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-remove-duplicates.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B2:D11");

        const deleteResult = range.removeDuplicates([0],true);    
        deleteResult.load();    
        await context.sync();

        console.log(deleteResult.removed + " entries with duplicate names removed.");
        console.log(deleteResult.uniqueRemaining + " entries with unique names remain in the range.");
    });
'Excel.Range#set:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/90-scenarios/multiple-property-set.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        const sourceRange = sheet.getRange("B2:E2");
        sourceRange.load("format/fill/color, format/font/name, format/font/color");
        await context.sync();

        // Set properties based on the loaded and synced 
        // source range.
        const targetRange = sheet.getRange("B7:E7");
        targetRange.set(sourceRange); 
        targetRange.format.autofitColumns();
        await context.sync();
    });
'Excel.Range#setCellProperties:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/cell-properties.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // Creating the SettableCellProperties objects to use for the range.
        // In your add-in, these should be created once, outside the function.
        const topHeaderProps: Excel.SettableCellProperties = {
            // The style property takes a string matching the name of an Excel style.
            // Built-in style names are listed in the `BuiltInStyle` enum.
            // Note that a style will overwrite any formatting,
            // so do not use the format property with the style property.
            style: "Heading1"
        };

        const headerProps: Excel.SettableCellProperties = {
            // Any subproperties of format that are not set will not be changed when these cell properties are set.
            format: {
                fill: {
                    color: "Blue"
                },
                font: {
                    color: "White",
                    bold: true
                }
            }
        };

        const nonApplicableProps: Excel.SettableCellProperties = {
            format: {
                fill: {
                    pattern: Excel.FillPattern.gray25
                },
                font: {
                    color: "Gray",
                    italic: true
                }
            }
        };

        const matchupScoreProps: Excel.SettableCellProperties = {
            format: {
                borders: {
                    bottom: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    left: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    right: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    top: {
                        style: Excel.BorderLineStyle.continuous
                    }
                }
            }
        };

        const range = sheet.getRange("A1:E5");

        // You can use empty JSON objects to avoid changing a cell's properties.
        range.setCellProperties([
            [topHeaderProps, {}, {}, {}, {}],
            [{}, {}, headerProps, headerProps, headerProps],
            [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]
        ]);

        sheet.getUsedRange().format.autofitColumns();
        await context.sync();
    });
'Excel.Range#sort:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/event-column-and-row-sort.yaml

    async function sortTopToBottom(criteria: string) {
        await Excel.run(async (context) => {
            const sheet = context.workbook.worksheets.getActiveWorksheet();
            const range = sheet.getRange("A1:E5");

            // Find the column header that provides the sort criteria.
            const header = range.find(criteria, {});
            header.load("columnIndex");
            await context.sync();

            range.sort.apply(
                [
                    {
                        key: header.columnIndex,
                        sortOn: Excel.SortOn.value
                    }
                ],
                false /*matchCase*/,
                true /*hasHeaders*/,
                Excel.SortOrientation.rows
            );
            await context.sync();
        });
    }
'Excel.Range#style:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/style.yaml

    await Excel.run(async (context) => {
        let worksheet = context.workbook.worksheets.getItem("Sample");
        let range = worksheet.getRange("A1:E1");

        // Apply built-in style. 
        // Styles are in the Home tab ribbon.
        range.style = Excel.BuiltInStyle.neutral;
        range.format.horizontalAlignment = "Right";

        await context.sync();
    });
'Excel.Range#ungroup:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/outline.yaml

    Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        
        // This removes two levels of groups from the "A1-R10" range.
        // Any groups at the same level on the same dimension will be removed by a single call.
        sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byRows);
        sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byRows);
        sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byColumns);
        sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byColumns);
        await context.sync();
    });
'Excel.Range#valuesAsJson:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/20-data-types/data-types-formatted-number.yaml

    // This function creates a formatted number data type,

    // and sets the format of this data type as a date.

    await Excel.run(async (context) => {
      // Get the Sample worksheet and a range on that sheet.
      const sheet = context.workbook.worksheets.getItemOrNullObject("Sample");
      const dateRange = sheet.getRange("A1");

      // Write a number formatted as a date to cell A1.
      dateRange.valuesAsJson = [
        [
          {
            type: Excel.CellValueType.formattedNumber,
            basicValue: 32889.0,
            numberFormat: "m/d/yyyy"
          }
        ]
      ];
      await context.sync();
    });
'Excel.RangeAreas#format:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-areas.yaml

    await Excel.run(async (context) => {

        const sheet = context.workbook.worksheets.getActiveWorksheet();
        const usedRange = sheet.getUsedRange();

        // Find the ranges with formulas.
        const formulaRanges = usedRange.getSpecialCells("Formulas");
        formulaRanges.format.fill.color = "lightgreen";

        await context.sync();
    });
'Excel.RangeCopyType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-copyfrom.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        // Place a label in front of the copied data.
        sheet.getRange("F2").values = [["Copied Formula"]];

        // Copy a range preserving the formulas.
        // Note: non-formula values are copied over as is.
        sheet.getRange("G2").copyFrom("A1:E1", Excel.RangeCopyType.formulas);
        await context.sync();
    });
'Excel.RangeFormat#textOrientation:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-text-orientation.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B2:E2");

        // Set textOrientation to either an integer between -90 and 90
        // or to 180 for vertically-oriented text.
        range.format.textOrientation = 90;

        await context.sync();
    });
'Excel.RangeHyperlink#address:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-hyperlink.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Orders");

        let productsRange = sheet.getRange("A3:A5");
        productsRange.load("values");

        await context.sync();

        // Create a hyperlink to a URL 
        // for each product name in the first table.
        for (let i = 0; i < productsRange.values.length; i++) {
            let cellRange = productsRange.getCell(i, 0);
            let cellText = productsRange.values[i][0];

            let hyperlink = {
                textToDisplay: cellText,
                screenTip: "Search Bing for '" + cellText + "'",
                address: "https://www.bing.com?q=" + cellText
            }
            cellRange.hyperlink = hyperlink;
        }

        await context.sync();
    });
'Excel.RangeHyperlink#documentReference:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-hyperlink.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Orders");

        let productsRange = sheet.getRange("A9:A11");
        productsRange.load("values");

        await context.sync();

        // Create a hyperlink to a location within the workbook
        // for each product name in the second table.
        for (let i = 0; i < productsRange.values.length; i++) {
            let cellRange = productsRange.getCell(i, 0);
            let cellText = productsRange.values[i][0];

            let hyperlink = {
                textToDisplay: cellText,
                screenTip: "Navigate to the '" + cellText + "' worksheet",
                documentReference: cellText + "!A1"
            }
            cellRange.hyperlink = hyperlink;
        }

        await context.sync();
    });
'Excel.RangeHyperlink#screenTip:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-hyperlink.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Orders");

        let productsRange = sheet.getRange("A3:A5");
        productsRange.load("values");

        await context.sync();

        // Create a hyperlink to a URL 
        // for each product name in the first table.
        for (let i = 0; i < productsRange.values.length; i++) {
            let cellRange = productsRange.getCell(i, 0);
            let cellText = productsRange.values[i][0];

            let hyperlink = {
                textToDisplay: cellText,
                screenTip: "Search Bing for '" + cellText + "'",
                address: "https://www.bing.com?q=" + cellText
            }
            cellRange.hyperlink = hyperlink;
        }

        await context.sync();
    });
'Excel.RangeHyperlink#textToDisplay:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-hyperlink.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Orders");

        let productsRange = sheet.getRange("A3:A5");
        productsRange.load("values");

        await context.sync();

        // Create a hyperlink to a URL 
        // for each product name in the first table.
        for (let i = 0; i < productsRange.values.length; i++) {
            let cellRange = productsRange.getCell(i, 0);
            let cellText = productsRange.values[i][0];

            let hyperlink = {
                textToDisplay: cellText,
                screenTip: "Search Bing for '" + cellText + "'",
                address: "https://www.bing.com?q=" + cellText
            }
            cellRange.hyperlink = hyperlink;
        }

        await context.sync();
    });
'Excel.RangeUnderlineStyle:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-hyperlink.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Orders");

        const productsRange = sheet.getRange("A3:A11");
        productsRange.load("values");

        await context.sync();

        // Clear all hyperlinks.
        for (let i = 0; i < productsRange.values.length; i++) {
            let cellRange = productsRange.getCell(i, 0);

            // Clear the hyperlink.
            // This eliminates the hyperlink but does not update text format.
            cellRange.clear(Excel.ClearApplyTo.hyperlinks);

            // Update text format.
            cellRange.format.font.underline = Excel.RangeUnderlineStyle.none;
            cellRange.format.font.color = "#000000";
        }

        await context.sync();
    });
'Excel.ReadingOrder:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/style.yaml

    await Excel.run(async (context) => {
        let style = context.workbook.styles.getItem("Diagonal Orientation Style");            
        style.load("textOrientation, horizontalAlignment, autoIndent, readingOrder, wrapText, includeProtection, shrinkToFit, locked");

        await context.sync();

        console.log("Orientation: " + style.textOrientation);
        console.log("Horizontal alignment: " + style.horizontalAlignment);
        console.log("Add indent: " + style.autoIndent);
        console.log("Reading order: " + style.readingOrder);
        console.log("Wrap text: " + style.wrapText);
        console.log("Include protection: " + style.includeProtection);
        console.log("Shrink to fit: " + style.shrinkToFit);
        console.log("Style locked: " + style.locked);
    });
'Excel.RemoveDuplicatesResult#uniqueRemaining:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-remove-duplicates.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B2:D11");

        const deleteResult = range.removeDuplicates([0],true);    
        deleteResult.load();    
        await context.sync();

        console.log(deleteResult.removed + " entries with duplicate names removed.");
        console.log(deleteResult.uniqueRemaining + " entries with unique names remain in the range.");
    });
'Excel.Runtime#enableEvents:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-disable-events.yaml

    await Excel.run(async (context) => {
        context.runtime.load("enableEvents");
        await context.sync();

        // check if events are enabled and toggle accordingly
        const eventBoolean = !context.runtime.enableEvents
        context.runtime.enableEvents = eventBoolean;
        if (eventBoolean) {
            console.log("Events are currently on.");
        } else {
            console.log("Events are currently off.");
        }

        await context.sync();
    });
'Excel.SaveBehavior:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/workbook-save-and-close.yaml

    await Excel.run(async (context) => {
        context.workbook.save(Excel.SaveBehavior.prompt);
    });
'Excel.SearchDirection:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-find.yaml

    searchDirectionToggle = searchDirectionToggle ===
    Excel.SearchDirection.forward ? Excel.SearchDirection.backwards :
    Excel.SearchDirection.forward;

    console.log("Search direction = " + searchDirectionToggle);
'Excel.SettableCellProperties#style:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/cell-properties.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // Creating the SettableCellProperties objects to use for the range.
        // In your add-in, these should be created once, outside the function.
        const topHeaderProps: Excel.SettableCellProperties = {
            // The style property takes a string matching the name of an Excel style.
            // Built-in style names are listed in the `BuiltInStyle` enum.
            // Note that a style will overwrite any formatting,
            // so do not use the format property with the style property.
            style: "Heading1"
        };

        const headerProps: Excel.SettableCellProperties = {
            // Any subproperties of format that are not set will not be changed when these cell properties are set.
            format: {
                fill: {
                    color: "Blue"
                },
                font: {
                    color: "White",
                    bold: true
                }
            }
        };

        const nonApplicableProps: Excel.SettableCellProperties = {
            format: {
                fill: {
                    pattern: Excel.FillPattern.gray25
                },
                font: {
                    color: "Gray",
                    italic: true
                }
            }
        };

        const matchupScoreProps: Excel.SettableCellProperties = {
            format: {
                borders: {
                    bottom: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    left: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    right: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    top: {
                        style: Excel.BorderLineStyle.continuous
                    }
                }
            }
        };

        const range = sheet.getRange("A1:E5");

        // You can use empty JSON objects to avoid changing a cell's properties.
        range.setCellProperties([
            [topHeaderProps, {}, {}, {}, {}],
            [{}, {}, headerProps, headerProps, headerProps],
            [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]
        ]);

        sheet.getUsedRange().format.autofitColumns();
        await context.sync();
    });
'Excel.Setting#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/create-get-change-delete-settings.yaml

    await Excel.run(async (context) => {
        const settings = context.workbook.settings;
        let needsReview = settings.getItem("NeedsReview");
        needsReview.delete();
        needsReview = settings.getItemOrNullObject("NeedsReview");

        await context.sync();

        if (needsReview.isNullObject) {
            console.log("The setting has been deleted");
        } else {
            console.log("The setting was not deleted");
        }

        await context.sync();
    });
'Excel.SettingCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml

    await Excel.run(async (context) => {
        const settings = context.workbook.settings; 
        settings.onSettingsChanged.add(onChangedSetting);

        await context.sync();
        console.log("Settings changed handler registered.");
    });
'Excel.SettingCollection#getItemOrNullObject:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/create-get-change-delete-settings.yaml

    await Excel.run(async (context) => {
        const settings = context.workbook.settings;
        let needsReview = settings.getItem("NeedsReview");
        needsReview.delete();
        needsReview = settings.getItemOrNullObject("NeedsReview");

        await context.sync();

        if (needsReview.isNullObject) {
            console.log("The setting has been deleted");
        } else {
            console.log("The setting was not deleted");
        }

        await context.sync();
    });
'Excel.SettingCollection#onSettingsChanged:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml

    await Excel.run(async (context) => {
        const settings = context.workbook.settings; 
        settings.onSettingsChanged.add(onChangedSetting);

        await context.sync();
        console.log("Settings changed handler registered.");
    });
'Excel.Shape#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-create-and-delete.yaml

    await Excel.run(async (context) => {
        context.workbook.worksheets.getItemOrNullObject("Shapes").delete();
        const sheet = context.workbook.worksheets.add("Shapes");

        const shapes = sheet.shapes;

        // load all the shapes in the collection without loading their properties
        shapes.load("items/$none");
        await context.sync();

        shapes.items.forEach((shape) => shape.delete());
        await context.sync();
    });
'Excel.Shape#fill:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-create-and-delete.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.addGeometricShape(Excel.GeometricShapeType.smileyFace);
        shape.left = 300;
        shape.top = 100;
        shape.height = 100;
        shape.width = 100;
        shape.fill.foregroundColor = "yellow"
        await context.sync();
    });
'Excel.Shape#getAsImage:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-images.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.getItem("Image");
        const result = shape.getAsImage(Excel.PictureFormat.png);
        await context.sync();

        const imageString = result.value;
        // Your add-in would save this string as a .png file.
        console.log("The image's Base64-encoded string: " + imageString);
    });
'Excel.Shape#group:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-groups.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");

        const shapeGroup = sheet.shapes.getItem("Group").group;
        shapeGroup.ungroup();
        console.log("Shapes ungrouped");

        await context.sync();
    });
'Excel.Shape#incrementLeft:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-move-and-order.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.getItem("Square")
        shape.incrementLeft(-25);
        await context.sync();
    });
'Excel.Shape#incrementRotation:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-images.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.getItem("Image");
        shape.incrementRotation(180);
        await context.sync();
    });
'Excel.Shape#incrementTop:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-move-and-order.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.getItem("Pentagon")
        shape.incrementTop(25);
        await context.sync();
    });
'Excel.Shape#line:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-lines.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const line = shapes.getItem("StraightLine").line;
        line.beginArrowheadLength = Excel.ArrowheadLength.long;
        line.beginArrowheadWidth = Excel.ArrowheadWidth.wide;
        line.beginArrowheadStyle = Excel.ArrowheadStyle.oval;

        line.endArrowheadLength = Excel.ArrowheadLength.long;
        line.endArrowheadWidth = Excel.ArrowheadWidth.wide;
        line.endArrowheadStyle = Excel.ArrowheadStyle.triangle;

        await context.sync();
    });
'Excel.Shape#lockAspectRatio:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-move-and-order.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.getItem("Octagon")
        shape.lockAspectRatio = true;
        shape.scaleHeight(1.25, Excel.ShapeScaleType.currentSize);
        await context.sync();
    });
'Excel.Shape#rotation:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-create-and-delete.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.addGeometricShape(Excel.GeometricShapeType.triangle);
        shape.left = 100;
        shape.top = 300;
        shape.height = 150;
        shape.width = 200;
        shape.rotation = 45;
        shape.fill.clear();
        await context.sync();
    });
'Excel.Shape#scaleHeight:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-move-and-order.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.getItem("Octagon")
        shape.lockAspectRatio = true;
        shape.scaleHeight(1.25, Excel.ShapeScaleType.currentSize);
        await context.sync();
    });
'Excel.Shape#setZOrder:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-move-and-order.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.getItem("Octagon")
        shape.setZOrder(Excel.ShapeZOrder.sendBackward);
        await context.sync();
    });
'Excel.ShapeAutoSize:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-textboxes.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const textbox = shapes.getItem("Textbox");
        textbox.textFrame.autoSizeSetting = Excel.ShapeAutoSize.autoSizeShapeToFitText;
        await context.sync();
    });
'Excel.ShapeCollection#addGeometricShape:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-create-and-delete.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.addGeometricShape(Excel.GeometricShapeType.hexagon);
        shape.left = 5;
        shape.top = 5;
        shape.height = 175;
        shape.width = 200;
        await context.sync();
    });
'Excel.ShapeCollection#addGroup:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-groups.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const square = sheet.shapes.getItem("Square");
        const pentagon = sheet.shapes.getItem("Pentagon");
        const octagon = sheet.shapes.getItem("Octagon");

        const shapeGroup = sheet.shapes.addGroup([square, pentagon, octagon]);
        shapeGroup.name = "Group";
        console.log("Shapes grouped");

        await context.sync();
    });
'Excel.ShapeCollection#addImage:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-images.yaml

    const myFile = <HTMLInputElement>document.getElementById("selectedFile");

    const reader = new FileReader();


    reader.onload = (event) => {
        Excel.run((context) => {
            const startIndex = reader.result.toString().indexOf("base64,");
            const myBase64 = reader.result.toString().substr(startIndex + 7);
            const sheet = context.workbook.worksheets.getItem("Shapes");
            const image = sheet.shapes.addImage(myBase64);
            image.name = "Image";
            return context.sync();
        });
    };


    // Read in the image file as a data URL.

    reader.readAsDataURL(myFile.files[0]);
'Excel.ShapeCollection#addLine:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-lines.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const line = shapes.addLine(200, 50, 300, 150, Excel.ConnectorType.straight);
        line.name = "StraightLine";
        await context.sync();
    });
'Excel.ShapeCollection#addTextBox:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-textboxes.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const textbox = shapes.addTextBox("A box with text");
        textbox.left = 100;
        textbox.top = 100;
        textbox.height = 20;
        textbox.width = 175;
        textbox.name = "Textbox";
        await context.sync();
    });
'Excel.ShapeGroup#ungroup:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-groups.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");

        const shapeGroup = sheet.shapes.getItem("Group").group;
        shapeGroup.ungroup();
        console.log("Shapes ungrouped");

        await context.sync();
    });
'Excel.ShapeScaleType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-move-and-order.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.getItem("Octagon")
        shape.lockAspectRatio = true;
        shape.scaleHeight(1.25, Excel.ShapeScaleType.currentSize);
        await context.sync();
    });
'Excel.ShapeTextHorizontalAlignment:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-textboxes.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const textbox = shapes.getItem("Textbox");
        textbox.textFrame.horizontalAlignment = Excel.ShapeTextHorizontalAlignment.center;
        await context.sync();
    });
'Excel.ShapeZOrder:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-move-and-order.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.getItem("Octagon")
        shape.setZOrder(Excel.ShapeZOrder.sendBackward);
        await context.sync();
    });
'Excel.SheetVisibility:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-visibility.yaml

    await Excel.run(async (context) => {

        const visibleSheets = await filterWorksheetsByVisibility(context, Excel.SheetVisibility.visible);

        if (visibleSheets.length > 1) {
            console.log(`Hiding worksheet named "${visibleSheets[0].name}"...`);

            visibleSheets[0].visibility = Excel.SheetVisibility.hidden;

            await context.sync();

        } else {
            console.log("Cannot hide the only visible worksheet");
        }
    });
'Excel.ShowAsCalculation:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-calculations.yaml

    await Excel.run(async (context) => {
        const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
        const farmDataHierarchy: Excel.DataPivotHierarchy = pivotTable.dataHierarchies.getItem("Sum of Crates Sold at Farm");        
        const wholesaleDataHierarchy: Excel.DataPivotHierarchy = pivotTable.dataHierarchies.getItem("Sum of Crates Sold Wholesale");

        farmDataHierarchy.load("showAs");
        wholesaleDataHierarchy.load("showAs");
        await context.sync();

        // Show the crates of each fruit type sold at the farm as a percentage of the column's total.
        let farmShowAs = farmDataHierarchy.showAs;
        farmShowAs.calculation = Excel.ShowAsCalculation.percentOfColumnTotal;
        farmShowAs.baseField = pivotTable.rowHierarchies.getItem("Type").fields.getItem("Type");
        farmDataHierarchy.showAs = farmShowAs;

        let wholesaleShowAs = wholesaleDataHierarchy.showAs;
        wholesaleShowAs.calculation = Excel.ShowAsCalculation.percentOfColumnTotal;
        wholesaleShowAs.baseField = pivotTable.rowHierarchies.getItem("Type").fields.getItem("Type");
        wholesaleDataHierarchy.showAs = wholesaleShowAs;
        await context.sync();
    });
'Excel.ShowAsRule#baseItem:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-calculations.yaml

    await Excel.run(async (context) => {
        const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
        const farmDataHierarchy: Excel.DataPivotHierarchy = pivotTable.dataHierarchies.getItem("Sum of Crates Sold at Farm");
        const wholesaleDataHierarchy: Excel.DataPivotHierarchy = pivotTable.dataHierarchies.getItem("Sum of Crates Sold Wholesale");

        farmDataHierarchy.load("showAs");
        wholesaleDataHierarchy.load("showAs");
        await context.sync();

        // Show the difference between crate sales of the "A Farms" and the other farms.
        // This difference is both aggregated and shown for individual fruit types (where applicable).
        let farmShowAs = farmDataHierarchy.showAs;
        farmShowAs.calculation = Excel.ShowAsCalculation.differenceFrom;
        farmShowAs.baseField = pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm");
        farmShowAs.baseItem = pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm").items.getItem("A Farms");
        farmDataHierarchy.showAs = farmShowAs;

        let wholesaleShowAs = wholesaleDataHierarchy.showAs;
        wholesaleShowAs.calculation = Excel.ShowAsCalculation.differenceFrom;
        wholesaleShowAs.baseField = pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm");
        wholesaleShowAs.baseItem = pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm").items.getItem("A Farms");
        wholesaleDataHierarchy.showAs = wholesaleShowAs;
        await context.sync();
    });
'Excel.Slicer#clearFilters:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-slicer.yaml

    await Excel.run(async (context) => {
        const slicer = context.workbook.slicers.getItem("Fruit Slicer");
        slicer.clearFilters();
        await context.sync();
    });
'Excel.Slicer#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-slicer.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        sheet.slicers.getItemAt(0).delete();
        await context.sync();
    });
'Excel.Slicer#selectItems:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-slicer.yaml

    await Excel.run(async (context) => {
        const slicer = context.workbook.slicers.getItem("Fruit Slicer");
        slicer.selectItems(["Lemon", "Lime", "Orange"]);
        await context.sync();
    });
'Excel.Slicer#style:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-slicer.yaml

    await Excel.run(async (context) => {
        const slicer = context.workbook.slicers.getItem("Fruit Slicer");
        slicer.style = "SlicerStyleLight6";
        await context.sync();
    });
'Excel.SlicerCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-slicer.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Pivot");
        const slicer = sheet.slicers.add(
            "Farm Sales", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */
            "Type" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */
        );
        slicer.name = "Fruit Slicer";
        await context.sync();
    });
'Excel.SlicerCollection#getItem:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-slicer.yaml

    await Excel.run(async (context) => {
        const slicer = context.workbook.slicers.getItem("Fruit Slicer");
        slicer.caption = "Fruit Types";
        slicer.left = 395;
        slicer.top = 15;
        slicer.height = 135;
        slicer.width = 150;
        await context.sync();
    });
'Excel.SortOn:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/event-column-and-row-sort.yaml

    async function sortTopToBottom(criteria: string) {
        await Excel.run(async (context) => {
            const sheet = context.workbook.worksheets.getActiveWorksheet();
            const range = sheet.getRange("A1:E5");

            // Find the column header that provides the sort criteria.
            const header = range.find(criteria, {});
            header.load("columnIndex");
            await context.sync();

            range.sort.apply(
                [
                    {
                        key: header.columnIndex,
                        sortOn: Excel.SortOn.value
                    }
                ],
                false /*matchCase*/,
                true /*hasHeaders*/,
                Excel.SortOrientation.rows
            );
            await context.sync();
        });
    }
'Excel.SortOrientation:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/event-column-and-row-sort.yaml

    async function sortLeftToRight(criteria: string) {
        await Excel.run(async (context) => {
            const sheet = context.workbook.worksheets.getActiveWorksheet();
            const range = sheet.getRange("A1:E5");

            // Find the row header that provides the sort criteria.
            const header = range.find(criteria, {});
            header.load("rowIndex");
            await context.sync();

            range.sort.apply(
                [
                    {
                        key: header.rowIndex,
                        sortOn: Excel.SortOn.value
                    }
                ],
                false /*matchCase*/,
                true /*hasHeaders*/,
                Excel.SortOrientation.columns
            );
            await context.sync();
        });
    }
'CustomFunctions.StreamingInvocation#setResult:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/16-custom-functions/streaming-function.yaml

    /** @CustomFunction 
     * @description Increments the cell with a given amount at a specified interval in milliseconds.
     * @param {number} amount - The amount to add to the cell value on each increment.
     * @param {number} interval - The time in milliseconds to wait before the next increment on the cell.
     * @param {CustomFunctions.StreamingInvocation<number>} invocation - Parameter to send results to Excel
     *     or respond to the user canceling the function.
     * @returns An incrementing value.
     */
    function increment(amount: number, interval: number, invocation:
    CustomFunctions.StreamingInvocation<number>): void {
      let result = 0;
      const timer = setInterval(() => {
        result += amount;
        invocation.setResult(result);
      }, interval);

      invocation.onCanceled = () => {
        clearInterval(timer);
      }
    }
'Excel.Style#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/style.yaml

    await Excel.run(async (context) => {
        let style = context.workbook.styles.getItem("Diagonal Orientation Style");

        // Delete the diagonal orientation style from the style collection.
        // Styles are in the Home tab ribbon.
        style.delete();

        await context.sync();

        console.log("Successfully deleted the diagonal orientation style from the Home tab ribbon.");
    });
'Excel.Style#font:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/style.yaml

    await Excel.run(async (context) => {
        let style = context.workbook.styles.getItem("Normal");
        style.font.load("bold, color, italic, name, size");
        style.fill.load("color");

        await context.sync();

        console.log("Bold: " + style.font.bold);
        console.log("Font color: " + style.font.color);
        console.log("Italic: " + style.font.italic);
        console.log("Name: " + style.font.name);
        console.log("Size: " + style.font.size);
        console.log("Fill color: " + style.fill.color);
    });
'Excel.Style#horizontalAlignment:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/style.yaml

    await Excel.run(async (context) => {
        let worksheet = context.workbook.worksheets.getItem("Sample");
        let range = worksheet.getRange("A1:E1");

        // Apply built-in style. 
        // Styles are in the Home tab ribbon.
        range.style = Excel.BuiltInStyle.neutral;
        range.format.horizontalAlignment = "Right";

        await context.sync();
    });
'Excel.Style#load:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/style.yaml

    await Excel.run(async (context) => {
        let style = context.workbook.styles.getItem("Diagonal Orientation Style");            
        style.load("textOrientation, horizontalAlignment, autoIndent, readingOrder, wrapText, includeProtection, shrinkToFit, locked");

        await context.sync();

        console.log("Orientation: " + style.textOrientation);
        console.log("Horizontal alignment: " + style.horizontalAlignment);
        console.log("Add indent: " + style.autoIndent);
        console.log("Reading order: " + style.readingOrder);
        console.log("Wrap text: " + style.wrapText);
        console.log("Include protection: " + style.includeProtection);
        console.log("Shrink to fit: " + style.shrinkToFit);
        console.log("Style locked: " + style.locked);
    });
'Excel.StyleCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/style.yaml

    await Excel.run(async (context) => {
        let styles = context.workbook.styles;

        // Add a new style to the style collection.
        // Styles is in the Home tab ribbon.
        styles.add("Diagonal Orientation Style");
              
        let newStyle = styles.getItem("Diagonal Orientation Style");
        
        // The "Diagonal Orientation Style" properties.
        newStyle.textOrientation = 38;
        newStyle.autoIndent = true;
        newStyle.includeProtection = true;
        newStyle.shrinkToFit = true;
        newStyle.locked = false;
        
        await context.sync();

        console.log("Successfully added a new style with diagonal orientation to the Home tab ribbon.");
    });
'Excel.StyleCollection#getItem:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/style.yaml

    await Excel.run(async (context) => {
        let styles = context.workbook.styles;

        // Add a new style to the style collection.
        // Styles is in the Home tab ribbon.
        styles.add("Diagonal Orientation Style");
              
        let newStyle = styles.getItem("Diagonal Orientation Style");
        
        // The "Diagonal Orientation Style" properties.
        newStyle.textOrientation = 38;
        newStyle.autoIndent = true;
        newStyle.includeProtection = true;
        newStyle.shrinkToFit = true;
        newStyle.locked = false;
        
        await context.sync();

        console.log("Successfully added a new style with diagonal orientation to the Home tab ribbon.");
    });
'Excel.Table#onChanged:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-table-changed.yaml

    await Excel.run(async (context) => {
        let table = context.workbook.tables.getItemAt(0);
        table.onChanged.add(onChange);

        await context.sync();
        console.log("A handler has been registered for the onChanged event");
    });
'Excel.Table#onSelectionChanged:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-table-changed.yaml

    await Excel.run(async (context) => {
        let table = context.workbook.tables.getItemAt(0);
        table.onSelectionChanged.add(onSelectionChange);

        await context.sync();
        console.log("A handler has been registered for table onSelectionChanged event");
    });
'Excel.Table#resize:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/46-table/resize-table.yaml

    await Excel.run(async (context) => {
      // Retrieve the worksheet and a table on that worksheet.
      const sheet = context.workbook.worksheets.getItem("Sample");
      const expensesTable = sheet.tables.getItem("ExpensesTable");
      
      // Resize the table.
      expensesTable.resize("A1:D20");
      
      await context.sync();
    });
'Excel.TableChangedEventArgs#details:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/data-change-event-details.yaml

    async function onTableChanged(eventArgs: Excel.TableChangedEventArgs) {
        await Excel.run(async (context) => {
            const details = eventArgs.details;
            const address = eventArgs.address;

            console.log(`Change at ${address}: was ${details.valueBefore}(${details.valueTypeBefore}),`
              + ` now is ${details.valueAfter}(${details.valueTypeAfter})`);
        });
    }
'Excel.TableChangedEventArgs#tableId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-tablecollection-changed.yaml

    async function onChange(event) {
        await Excel.run(async (context) => {
            let table = context.workbook.tables.getItem(event.tableId);
            let worksheet = context.workbook.worksheets.getItem(event.worksheetId);
            worksheet.load("name");

            await context.sync();

            console.log("Handler for table collection onChanged event has been triggered. Data changed address: " + event.address);
            console.log("Table Id : " + event.tableId);
            console.log("Worksheet Id : " + worksheet.name);
        });
    }
'Excel.TableChangedEventArgs#worksheetId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-tablecollection-changed.yaml

    async function onChange(event) {
        await Excel.run(async (context) => {
            let table = context.workbook.tables.getItem(event.tableId);
            let worksheet = context.workbook.worksheets.getItem(event.worksheetId);
            worksheet.load("name");

            await context.sync();

            console.log("Handler for table collection onChanged event has been triggered. Data changed address: " + event.address);
            console.log("Table Id : " + event.tableId);
            console.log("Worksheet Id : " + worksheet.name);
        });
    }
'Excel.TableCollection#onChanged:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-tablecollection-changed.yaml

    await Excel.run(async (context) => {
        let tables = context.workbook.tables;
        tables.onChanged.add(onChange);

        await context.sync();
        console.log("A handler has been registered for the table collection onChanged event");
    });
'Excel.TableSelectionChangedEventArgs#address:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-table-changed.yaml

    async function onSelectionChange(args) {
        await Excel.run(async (context) => {
            console.log("Handler for table onSelectionChanged event has been triggered. The new selection is: " + args.address);
        });
    }
'Excel.TextConditionalFormat#format:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B16:D18");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.containsText);
        conditionalFormat.textComparison.format.font.color = "red";
        conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

        await context.sync();
    });
'Excel.TextConditionalFormat#rule:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B16:D18");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.containsText);
        conditionalFormat.textComparison.format.font.color = "red";
        conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

        await context.sync();
    });
'Excel.TextFrame#deleteText:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-textboxes.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const textbox = shapes.getItem("Textbox");
        textbox.textFrame.deleteText();
        await context.sync();
    });
'Excel.ValueFilterCondition:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotfilters.yaml

    await Excel.run(async (context) => {
      // Add a PivotFilter to filter on the values correlated with a row.

      // Get the PivotTable.
      const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");

      // Get the "Farm" field.
      const field = pivotTable.hierarchies.getItem("Farm").fields.getItem("Farm");

      // Filter to only include rows with more than 500 wholesale crates sold.
      const filter: Excel.PivotValueFilter = {
        condition: Excel.ValueFilterCondition.greaterThan,
        comparator: 500,
        value: "Sum of Crates Sold Wholesale"
      };

      // Apply the value filter to the field.
      field.applyFilter({ valueFilter: filter });

      await context.sync();
    });
'Excel.VerticalAlignment:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/style.yaml

    await Excel.run(async (context) => {
        let worksheet = context.workbook.worksheets.getItem("Sample");
        let range = worksheet.getRange("A1:E1");
        // Apply new style.
        range.style = ("Diagonal Orientation Style");
        range.format.verticalAlignment = "Justify";

        await context.sync();
    });
'Excel.WebImageCellValue#address:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/20-data-types/data-types-web-image.yaml

    // This function retrieves the image URL from the selected cell and opens
    that image in a new browser tab.

    await Excel.run(async (context) => {
      // Load the active cell information.
      const activeCell = context.workbook.getActiveCell();
      activeCell.load("valuesAsJson");
      await context.sync();

      // Get image URL from the active cell.
      const values = activeCell.valuesAsJson;
      const webImageData = values[0][0] as Excel.WebImageCellValue;
      const webImageUrl = webImageData.address;

      if (!webImageUrl) {
        console.log("The selected cell is missing an image URL. Select a cell that contains an image.");
        return;
      }

      // Open the image URL in a new browser tab.
      const tab = window.open(webImageData.address, "_blank");
    });
'Excel.WebImageCellValue#type:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/20-data-types/data-types-web-image.yaml

    // This function inserts a web image into the currently selected cell.

    await Excel.run(async (context) => {
      // Retrieve image data from the task pane and then clear the input fields.
      const imageUrl = $("#url").val() as string;
      const imageAltText = $("#alt-text").val() as string;
      clearForm();

      // Load the active cell.
      const activeCell = context.workbook.getActiveCell();
      activeCell.load();
      await context.sync();

      if (!imageUrl) {
        console.log("Please enter an image URL.");
        return;
      }

      // Create a web image object and assign the image details.
      const webImage: Excel.WebImageCellValue = {
        type: "WebImage", /* The string equivalent of `Excel.CellValueType.webImage`. */
        address: imageUrl,
        altText: imageAltText     
      };

      // Insert web image into the active cell.
      activeCell.valuesAsJson = [[webImage]];

      await context.sync();
    });
'Excel.Workbook#close:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/workbook-save-and-close.yaml

    await Excel.run(async (context) => {
        context.workbook.close(Excel.CloseBehavior.save);
    });
'Excel.Workbook#getActiveCell:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/workbook-get-active-cell.yaml

    await Excel.run(async (context) => {

        let myWorkbook = context.workbook;
        let activeCell = myWorkbook.getActiveCell();
        activeCell.load("address");

        await context.sync();
        
        console.log("The active cell is " + activeCell.address);
    });
'Excel.Workbook#getSelectedRanges:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-areas.yaml

    await Excel.run(async (context) => {

        const selectedRanges = context.workbook.getSelectedRanges();
        selectedRanges.format.fill.color = "lightblue";

        await context.sync();
    })
'Excel.Workbook#insertWorksheetsFromBase64:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/workbook-insert-external-worksheets.yaml

    // Retrieve the file and set up an HTML FileReader element. 

    const myFile = <HTMLInputElement>document.getElementById("file");

    const reader = new FileReader();


    reader.onload = (event) => {
        // Remove the metadata before the Base64-encoded string.
        const startIndex = reader.result.toString().indexOf("base64,");
        externalWorkbook = reader.result.toString().substr(startIndex + 7);
    };


    // Read the file as a data URL so that we can parse the Base64-encoded
    string.

    reader.readAsDataURL(myFile.files[0]);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/workbook-insert-external-worksheets.yaml

    await Excel.run(async (context) => {
        // Retrieve the source workbook.
        const workbook = context.workbook;
        
        // Set up the insert options.
        const options = {
            sheetNamesToInsert: [], // Insert all the worksheets from the source workbook.
            positionType: Excel.WorksheetPositionType.after, // Insert after the `relativeTo` sheet.
            relativeTo: "Sheet1" // The sheet relative to which the other worksheets will be inserted. Used with `positionType`.
        };
        
        // Insert the new worksheets.
        workbook.insertWorksheetsFromBase64(externalWorkbook, options);
        await context.sync();
    });
'Excel.Workbook#onActivated:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-workbook-activated.yaml

    async function workbookActivated(event: Excel.WorkbookActivatedEventArgs) {
      await Excel.run(async (context) => {
        // Callback function for when the workbook is activated.
        console.log("The workbook was activated.");
      });
    }
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-workbook-activated.yaml

    await Excel.run(async (context) => {
      const workbook = context.workbook;

      // Register the workbook activated event handler.
      workbook.onActivated.add(workbookActivated);

      await context.sync();
      console.log("Added event handler for workbook activated.");
    });
'Excel.Workbook#pivotTables:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-get-pivottables.yaml

    await Excel.run(async (context) => {
      // Get the names of all the PivotTables in the workbook.
      const pivotTables = context.workbook.pivotTables;
      pivotTables.load("name");
      await context.sync();

      // Display the names in the console.
      console.log("PivotTables in the workbook:")
      pivotTables.items.forEach((pivotTable) => {
        console.log(`\t${pivotTable.name}`);
      });
    });
'Excel.Workbook#properties:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/26-document/properties.yaml

    await Excel.run(async (context) => {
        let titleValue = "Excel document properties API";
        let subjectValue = "Set and get document properties";
        let keywordsValue = "Set and get operations";
        let commentsValue = "This is an Excel document properties API code sample";
        let categoryValue = "Office Add-ins";
        let managerValue = "John";
        let companyValue = "Microsoft";

        let docProperties = context.workbook.properties;

        // Set the writeable document properties.
        docProperties.title = titleValue;
        docProperties.subject = subjectValue;
        docProperties.keywords = keywordsValue;
        docProperties.comments = commentsValue;
        docProperties.category = categoryValue;
        docProperties.manager = managerValue;
        docProperties.company = companyValue;

        await context.sync();

        console.log("Set the following document properties: title, subject, keywords, comments, category, manager, company.");
    });
'Excel.Workbook#save:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/workbook-save-and-close.yaml

    await Excel.run(async (context) => {
        context.workbook.save(Excel.SaveBehavior.save);
    });
'Excel.Workbook#styles:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/style.yaml

    await Excel.run(async (context) => {
        let styles = context.workbook.styles;

        // Add a new style to the style collection.
        // Styles is in the Home tab ribbon.
        styles.add("Diagonal Orientation Style");
              
        let newStyle = styles.getItem("Diagonal Orientation Style");
        
        // The "Diagonal Orientation Style" properties.
        newStyle.textOrientation = 38;
        newStyle.autoIndent = true;
        newStyle.includeProtection = true;
        newStyle.shrinkToFit = true;
        newStyle.locked = false;
        
        await context.sync();

        console.log("Successfully added a new style with diagonal orientation to the Home tab ribbon.");
    });
'Excel.WorkbookProtection#protect:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/data-protection.yaml

    let password = await passwordHandler();

    passwordHelper(password);

    await Excel.run(async (context) => {
        let workbook = context.workbook;
        workbook.load("protection/protected");

        await context.sync();

        if (!workbook.protection.protected) {
            workbook.protection.protect(password);
        }
    });
'Excel.WorkbookProtection#unprotect:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/data-protection.yaml

    let password = await passwordHandler();

    passwordHelper(password);

    await Excel.run(async (context) => {
        let workbook = context.workbook;
        workbook.protection.unprotect(password);
    });
'Excel.WorkbookRangeAreas#areas:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/precedents.yaml

    await Excel.run(async (context) => {
      // Precedents are cells referenced by the formula in a cell.
      // A "direct precedent" is a cell directly referenced by the selected formula.
      let range = context.workbook.getActiveCell();
      let directPrecedents = range.getDirectPrecedents();
      range.load("address");
      directPrecedents.areas.load("address");
      await context.sync();

      console.log(`Direct precedent cells of ${range.address}:`);

      // Use the direct precedents API to loop through precedents of the active cell.
      for (let i = 0; i < directPrecedents.areas.items.length; i++) {
        // Highlight and console the address of each precedent cell.
        directPrecedents.areas.items[i].format.fill.color = "Yellow";
        console.log(`  ${directPrecedents.areas.items[i].address}`);
      }
      await context.sync();
    });
'Excel.Worksheet#autoFilter:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-auto-filter.yaml

    // This function adds a percentage AutoFilter to the active worksheet 

    // and applies the filter to a column of the used range.

    await Excel.run(async (context) => {
        // Retrieve the active worksheet and the used range on that worksheet.
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        const farmData = sheet.getUsedRange();

        // Add a filter that will only show the rows with the top 50% of values in column 3.
        sheet.autoFilter.apply(farmData, 3, {
            criterion1: "50",
            filterOn: Excel.FilterOn.topPercent
        });

        await context.sync();
    });
'Excel.Worksheet#copy:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-copy.yaml

    await Excel.run(async (context) => {

        let myWorkbook = context.workbook;
        let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();
        let copiedSheet = sampleSheet.copy("End")

        sampleSheet.load("name");
        copiedSheet.load("name");

        await context.sync();

        console.log("'" + sampleSheet.name + "' was copied to '" + copiedSheet.name + "'")
    });
'Excel.Worksheet#customProperties:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/26-document/custom-properties.yaml

    await Excel.run(async (context) => {
      // Load the keys and values of all custom properties in the current worksheet.
      const customWorksheetProperties = context.workbook.worksheets.getActiveWorksheet().customProperties;
      customWorksheetProperties.load(["key", "value"]);
      await context.sync();

      // Log each custom property to the console.
      // Note that your document may have more properties than those you have set using this snippet.
      customWorksheetProperties.items.forEach((property) => {
        console.log(`${property.key}:${property.value}`);
      });
    });
'Excel.Worksheet#findAllOrNullObject:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-find-all.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const foundRanges = sheet.findAllOrNullObject("Complete", {
            completeMatch: true,
            matchCase: false
        });

        await context.sync();

        if (foundRanges.isNullObject) {
            console.log("No complete projects");
        } else {
            foundRanges.format.fill.color = "green"
        }
    });
'Excel.Worksheet#getNext:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml

    await Excel.run(async (context) => {
        const sheets = context.workbook.worksheets;

        // We don't want to include the default worksheet that was created
        // when the workbook was created, so our "firstSheet" will be the one
        // after the literal first. Note chaining of navigation methods.
        const firstSheet = sheets.getFirst().getNext();
        const lastSheet = sheets.getLast();
        const firstTaxRateRange = firstSheet.getRange("B2");
        const lastTaxRateRange = lastSheet.getRange("B2");

        firstSheet.load("name");
        lastSheet.load("name");
        firstTaxRateRange.load("text");
        lastTaxRateRange.load("text");

        await context.sync();

        let firstYear = firstSheet.name.substr(5, 4);
        let lastYear = lastSheet.name.substr(5, 4);
        console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

        await context.sync();
    });
'Excel.Worksheet#getPrevious:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml

    await Excel.run(async (context) => {
        const sheets = context.workbook.worksheets;
        const currentSheet = sheets.getActiveWorksheet();
        const previousYearSheet = currentSheet.getPrevious();
        const currentTaxDueRange = currentSheet.getRange("C2");
        const previousTaxDueRange = previousYearSheet.getRange("C2");

        currentSheet.load("name");
        previousYearSheet.load("name");
        currentTaxDueRange.load("text");
        previousTaxDueRange.load("text");

        await context.sync();

        let currentYear = currentSheet.name.substr(5, 4);
        let previousYear = previousYearSheet.name.substr(5, 4);
        console.log("Two Year Tax Due Comparison", `Tax due for ${currentYear} was ${currentTaxDueRange.text[0][0]}\nTax due for ${previousYear} was ${previousTaxDueRange.text[0][0]}`)

        await context.sync();
    });
'Excel.Worksheet#getRanges:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-areas.yaml

    await Excel.run(async (context) => {

        const sheet = context.workbook.worksheets.getActiveWorksheet();
        const specifiedRanges = sheet.getRanges("D3:D5, G3:G5");
        specifiedRanges.format.fill.color = "pink";

        await context.sync();
    })
'Excel.Worksheet#onChanged:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-worksheet.yaml

    await Excel.run(async (context) => {
        let sheet = context.workbook.worksheets.getItem("Sample");
        sheet.onChanged.add(onChange);
        await context.sync();

        console.log("Added a worksheet-level data-changed event handler.");
    });
'Excel.Worksheet#onColumnSorted:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/event-column-and-row-sort.yaml

    await Excel.run(async (context) => {
        console.log("Adding column handler");
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // This will fire whenever a column has been moved as the result of a sort action.
        sheet.onColumnSorted.add((event) => {
            return Excel.run((context) => {
                console.log("Column sorted: " + event.address);
                const sheet = context.workbook.worksheets.getActiveWorksheet();

                // Clear formatting for section, then highlight the sorted area.
                sheet.getRange("A1:E5").format.fill.clear();
                if (event.address !== "") {
                    sheet.getRanges(event.address).format.fill.color = "yellow";
                }

                return context.sync();
            });
        });
    });
'Excel.Worksheet#onFormulaChanged:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-formula-changed.yaml

    await Excel.run(async (context) => {
      // Retrieve the worksheet named "Sample".
      let sheet = context.workbook.worksheets.getItem("Sample");
      
      // Register the formula changed event handler for this worksheet.
      sheet.onFormulaChanged.add(formulaChangeHandler);
      await context.sync();
      
      console.log("Registered a formula changed event handler for this worksheet.");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-formula-changed.yaml

    async function formulaChangeHandler(event:
    Excel.WorksheetFormulaChangedEventArgs) {
      await Excel.run(async (context) => {
        // Retrieve details about the formula change event.
        const cellAddress = event.formulaDetails[0].cellAddress;
        const previousFormula = event.formulaDetails[0].previousFormula;
        const source = event.source;
        
        // Print out the change event details.
        console.log(
          `The formula in cell ${cellAddress} changed. 
          The previous formula was: ${previousFormula}. 
          The source of the change was: ${source}.`
        );
      });
    }
'Excel.Worksheet#onProtectionChanged:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-worksheet-protection.yaml

    // This function registers an event handler for the onProtectionChanged
    event of a worksheet.

    await Excel.run(async (context) => {
        // Set "Sample" as the active worksheet.
        context.workbook.worksheets.getItemOrNullObject("Sample").delete();
        const sheet = context.workbook.worksheets.add("Sample");
        sheet.activate();

        // Register the onProtectionChanged event handler.
        sheet.onProtectionChanged.add(checkProtection);
        await context.sync();
        console.log("Added a worksheet protection change event handler.");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-worksheet-protection.yaml

    async function checkProtection(event:
    Excel.WorksheetProtectionChangedEventArgs) {
        // This function is an event handler that returns the protection status of a worksheet
        // and information about the changed worksheet.
        await Excel.run(async (context) => {
            const protectionStatus = event.isProtected;
            const worksheetId = event.worksheetId;
            const source = event.source;
            console.log("Protection status changed. Protection status is now: " + protectionStatus + ".");
            console.log("    ID of changed worksheet: " + worksheetId + ".");
            console.log("    Source of change event: " + source + ".");
        });
    }
'Excel.Worksheet#onRowSorted:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/event-column-and-row-sort.yaml

    await Excel.run(async (context) => {
        console.log("Adding row handler");
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // This will fire whenever a row has been moved as the result of a sort action.
        sheet.onRowSorted.add((event) => {
            return Excel.run((context) => {
                console.log("Row sorted: " + event.address);
                const sheet = context.workbook.worksheets.getActiveWorksheet();

                // Clear formatting for section, then highlight the sorted area.
                sheet.getRange("A1:E5").format.fill.clear();
                if (event.address !== "") {
                    sheet.getRanges(event.address).format.fill.color = "yellow";
                }

                return context.sync();
            });
        });
    });
'Excel.Worksheet#onSingleClicked:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/event-worksheet-single-click.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        sheet.onSingleClicked.add((event) => {
            return Excel.run((context) => {
                console.log(`Click detected at ${event.address} (pixel offset from upper-left cell corner: ${event.offsetX}, ${event.offsetY})`);
                return context.sync();
            });
        });

        console.log("The worksheet click handler is registered.");

        await context.sync();
    });
'Excel.Worksheet#pivotTables:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-get-pivottables.yaml

    await Excel.run(async (context) => {
      // Get the names of all the PivotTables in the current worksheet.
      const pivotTables = context.workbook.worksheets.getActiveWorksheet().pivotTables;
      pivotTables.load("name");
      await context.sync();

      // Display the names in the console.
      console.log("PivotTables in the current worksheet:")
      pivotTables.items.forEach((pivotTable) => {
        console.log(`\t${pivotTable.name}`);
      });
    });
'Excel.Worksheet#showGridlines:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/gridlines.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        sheet.showGridlines = true;

        await context.sync();
    });
'Excel.Worksheet#showOutlineLevels:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/outline.yaml

    Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // This shows the top 3 outline levels; collapsing any additional sublevels.
        sheet.showOutlineLevels(3, 3);
        await context.sync();
    });
'Excel.Worksheet#slicers:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-slicer.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Pivot");
        const slicer = sheet.slicers.add(
            "Farm Sales", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */
            "Type" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */
        );
        slicer.name = "Fruit Slicer";
        await context.sync();
    });
'Excel.Worksheet#tabColor:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/tab-color.yaml

    await Excel.run(async (context) => {
        const activeSheet = context.workbook.worksheets.getActiveWorksheet();
        activeSheet.tabColor = "#FF0000";

        await context.sync();
    });
'Excel.WorksheetAddedEventArgs#worksheetId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml

    async function onWorksheetAdd(event) {
        await Excel.run(async (context) => {
            console.log(
                "Handler for worksheet onAdded event has been triggered. Newly added worksheet Id : " +
                event.worksheetId
            );
        });
    }
'Excel.WorksheetChangedEventArgs#changeDirectionState:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-worksheet.yaml

    async function onChange(event: Excel.WorksheetChangedEventArgs) {
        // This function is an event handler that returns the address, trigger source, 
        // and insert or delete shift directions of the change.
        await Excel.run(async (context) => {
            // Return the address where change occurred.
            console.log(`Handler for worksheet onChanged event has been triggered.`);
            console.log(`    Data changed address: ` + event.address);

            // Return the source of the event that triggered the change.
            console.log(`    Data change trigger source: ` + event.triggerSource);

            // Note：insertShiftDirection and deleteShiftDirection are exclusive and both enums can't have a value at the same time. 
            // If one has a value, then the other will return undefined.

            // If the insert shift direction is defined, return it.
            if (event.changeDirectionState.insertShiftDirection) {
                console.log(`    Cells inserted shift direction: ` + event.changeDirectionState.insertShiftDirection);
            }

            // If the delete shift direction is defined, return it.
            if (event.changeDirectionState.deleteShiftDirection) {
                console.log(`    Cells deleted shift direction: ` + event.changeDirectionState.deleteShiftDirection);
            }
        });
    }  
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-worksheet.yaml

    // This function deletes data from a range and sets the delete shift
    direction to "up".

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("A5:F5");
        range.delete(Excel.DeleteShiftDirection.up);
    });
'Excel.WorksheetChangedEventArgs#triggerSource:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-worksheet.yaml

    async function onChange(event: Excel.WorksheetChangedEventArgs) {
        // This function is an event handler that returns the address, trigger source, 
        // and insert or delete shift directions of the change.
        await Excel.run(async (context) => {
            // Return the address where change occurred.
            console.log(`Handler for worksheet onChanged event has been triggered.`);
            console.log(`    Data changed address: ` + event.address);

            // Return the source of the event that triggered the change.
            console.log(`    Data change trigger source: ` + event.triggerSource);

            // Note：insertShiftDirection and deleteShiftDirection are exclusive and both enums can't have a value at the same time. 
            // If one has a value, then the other will return undefined.

            // If the insert shift direction is defined, return it.
            if (event.changeDirectionState.insertShiftDirection) {
                console.log(`    Cells inserted shift direction: ` + event.changeDirectionState.insertShiftDirection);
            }

            // If the delete shift direction is defined, return it.
            if (event.changeDirectionState.deleteShiftDirection) {
                console.log(`    Cells deleted shift direction: ` + event.changeDirectionState.deleteShiftDirection);
            }
        });
    }  
'Excel.WorksheetCollection#getFirst:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml

    await Excel.run(async (context) => {
        const sheets = context.workbook.worksheets;

        // We don't want to include the default worksheet that was created
        // when the workbook was created, so our "firstSheet" will be the one
        // after the literal first. Note chaining of navigation methods.
        const firstSheet = sheets.getFirst().getNext();
        const lastSheet = sheets.getLast();
        const firstTaxRateRange = firstSheet.getRange("B2");
        const lastTaxRateRange = lastSheet.getRange("B2");

        firstSheet.load("name");
        lastSheet.load("name");
        firstTaxRateRange.load("text");
        lastTaxRateRange.load("text");

        await context.sync();

        let firstYear = firstSheet.name.substr(5, 4);
        let lastYear = lastSheet.name.substr(5, 4);
        console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

        await context.sync();
    });
'Excel.WorksheetCollection#getLast:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml

    await Excel.run(async (context) => {
        const sheets = context.workbook.worksheets;

        // We don't want to include the default worksheet that was created
        // when the workbook was created, so our "firstSheet" will be the one
        // after the literal first. Note chaining of navigation methods.
        const firstSheet = sheets.getFirst().getNext();
        const lastSheet = sheets.getLast();
        const firstTaxRateRange = firstSheet.getRange("B2");
        const lastTaxRateRange = lastSheet.getRange("B2");

        firstSheet.load("name");
        lastSheet.load("name");
        firstTaxRateRange.load("text");
        lastTaxRateRange.load("text");

        await context.sync();

        let firstYear = firstSheet.name.substr(5, 4);
        let lastYear = lastSheet.name.substr(5, 4);
        console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

        await context.sync();
    });
'Excel.WorksheetCollection#onActivated:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml

    await Excel.run(async (context) => {
        let sheets = context.workbook.worksheets;
        sheets.onActivated.add(onActivate);

        await context.sync();
        console.log("A handler has been registered for the OnActivate event.");
    });
'Excel.WorksheetCollection#onAdded:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml

    await Excel.run(async (context) => {
        let sheet = context.workbook.worksheets;
        sheet.onAdded.add(onWorksheetAdd);

        await context.sync();
        console.log("A handler has been registered for the OnAdded event.");
    });
'Excel.WorksheetCollection#onDeactivated:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml

    await Excel.run(async (context) => {
        let sheets = context.workbook.worksheets;
        sheets.onDeactivated.add(onDeactivate);

        await context.sync();
        console.log("A handler has been registered for the OnDeactivate event.");
    });
'Excel.WorksheetCustomPropertyCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/26-document/custom-properties.yaml

    await Excel.run(async (context) => {
      // Get the key/value pair from the task pane.
      const userKey = $("#key").text();
      const userValue = $("#value").text();

      // Add the custom property.
      const customWorksheetProperties = context.workbook.worksheets.getActiveWorksheet().customProperties;
      customWorksheetProperties.add(userKey, userValue);

      await context.sync();

      console.log(`Successfully set custom worksheet property ${userKey}:${userValue}.`);
    });
'Excel.WorksheetFreezePanes#freezeAt:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-freeze-panes.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        // Freeze the specified range in top-and-left-most pane of the worksheet.
        sheet.freezePanes.freezeAt(sheet.getRange("H2:K5"));

        await context.sync();
    });
'Excel.WorksheetFreezePanes#freezeColumns:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-freeze-panes.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        // Freeze the first two columns in the worksheet.
        sheet.freezePanes.freezeColumns(2);

        await context.sync();
    });
'Excel.WorksheetFreezePanes#freezeRows:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-freeze-panes.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        // Freeze the top two rows in the worksheet.
        sheet.freezePanes.freezeRows(2);

        await context.sync();
    });
'Excel.WorksheetFreezePanes#getLocationOrNullObject:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-freeze-panes.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const frozenRange = sheet.freezePanes.getLocationOrNullObject();
        frozenRange.load("address");

        await context.sync();

        if (frozenRange.isNullObject) {
            console.log(`The worksheet does not contain a frozen pane.`);
        } else {
            console.log(`The address of the frozen range (cells that are frozen in the top-and-left-most pane) is "${frozenRange.address}"`);
        }
    });
'Excel.WorksheetFreezePanes#unfreeze:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-freeze-panes.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        sheet.freezePanes.unfreeze();

        await context.sync();
    });
'Excel.WorksheetPositionType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/workbook-insert-external-worksheets.yaml

    await Excel.run(async (context) => {
        // Retrieve the source workbook.
        const workbook = context.workbook;
        
        // Set up the insert options.
        const options = {
            sheetNamesToInsert: [], // Insert all the worksheets from the source workbook.
            positionType: Excel.WorksheetPositionType.after, // Insert after the `relativeTo` sheet.
            relativeTo: "Sheet1" // The sheet relative to which the other worksheets will be inserted. Used with `positionType`.
        };
        
        // Insert the new worksheets.
        workbook.insertWorksheetsFromBase64(externalWorkbook, options);
        await context.sync();
    });
'Excel.WorksheetProtection#protect:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/data-protection.yaml

    let password = await passwordHandler();

    passwordHelper(password);

    await Excel.run(async (context) => {
        let activeSheet = context.workbook.worksheets.getActiveWorksheet();
        activeSheet.load("protection/protected");

        await context.sync();

        if (!activeSheet.protection.protected) {
            activeSheet.protection.protect(null, password);
        }
    });
'Excel.WorksheetProtection#unprotect:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/data-protection.yaml

    let password = await passwordHandler();

    passwordHelper(password);

    await Excel.run(async (context) => {
        let activeSheet = context.workbook.worksheets.getActiveWorksheet();
        activeSheet.protection.unprotect(password);
    });
'Excel.WorksheetProtectionChangedEventArgs#isProtected:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-worksheet-protection.yaml

    async function checkProtection(event:
    Excel.WorksheetProtectionChangedEventArgs) {
        // This function is an event handler that returns the protection status of a worksheet
        // and information about the changed worksheet.
        await Excel.run(async (context) => {
            const protectionStatus = event.isProtected;
            const worksheetId = event.worksheetId;
            const source = event.source;
            console.log("Protection status changed. Protection status is now: " + protectionStatus + ".");
            console.log("    ID of changed worksheet: " + worksheetId + ".");
            console.log("    Source of change event: " + source + ".");
        });
    }
'Excel.WorksheetProtectionChangedEventArgs#source:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-worksheet-protection.yaml

    async function checkProtection(event:
    Excel.WorksheetProtectionChangedEventArgs) {
        // This function is an event handler that returns the protection status of a worksheet
        // and information about the changed worksheet.
        await Excel.run(async (context) => {
            const protectionStatus = event.isProtected;
            const worksheetId = event.worksheetId;
            const source = event.source;
            console.log("Protection status changed. Protection status is now: " + protectionStatus + ".");
            console.log("    ID of changed worksheet: " + worksheetId + ".");
            console.log("    Source of change event: " + source + ".");
        });
    }
'Excel.WorksheetProtectionChangedEventArgs#worksheetId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-worksheet-protection.yaml

    async function checkProtection(event:
    Excel.WorksheetProtectionChangedEventArgs) {
        // This function is an event handler that returns the protection status of a worksheet
        // and information about the changed worksheet.
        await Excel.run(async (context) => {
            const protectionStatus = event.isProtected;
            const worksheetId = event.worksheetId;
            const source = event.source;
            console.log("Protection status changed. Protection status is now: " + protectionStatus + ".");
            console.log("    ID of changed worksheet: " + worksheetId + ".");
            console.log("    Source of change event: " + source + ".");
        });
    }
'Excel.WorksheetSingleClickedEventArgs#address:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/event-worksheet-single-click.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        sheet.onSingleClicked.add((event) => {
            return Excel.run((context) => {
                console.log(`Click detected at ${event.address} (pixel offset from upper-left cell corner: ${event.offsetX}, ${event.offsetY})`);
                return context.sync();
            });
        });

        console.log("The worksheet click handler is registered.");

        await context.sync();
    });
'Office.AppointmentCompose#addFileAttachmentAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    const attachmentUrl = $("#attachmentUrl").val();

    Office.context.mailbox.item.addFileAttachmentAsync(
        attachmentUrl,
        getFileName(attachmentUrl),
        { "asyncContext" : { var1: 1, var2: true } },
        function(result) { console.log(result); });
'Office.AppointmentCompose#addFileAttachmentFromBase64Async:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    base64String =
    "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAAAsSAAALEgHS3X78AAACRUlEQVRYw82XzXHbMBCFP2F8tzsQc8Ixyh0zoiuIXIGdCsxUYKqC0B04FdiuwMoM7mGOOIXqQGoAymXhgSX+itJM9kIRFLAP+3YXD5Pdbscx5oxaAIW8Ztr6l2PWmQwF4IyaieP53qdfAqQ8CwBn1JU4vpWhrbxXQA5MZfynANmcDIAzKgcy4FKGXsVJFf3nLgKyBQptfT4KQMRz2N0fcbxqmRMDWXflx0VPnrdArq0vekQ1Dv0UeHZGNebHhwjU8AzwKM43RyZnbAf58Q6ghudeWd0Aus0+5EcMIIRi3beua0D3Nm39BEAx3i7HTK4DEBJn5YxKOnaRA5+ErpMBWMpzDvx1RuXCcxOISlufAjfC7zgAsqsvUvMAD0ApPaEtGi9AIlUzKgJo60tt/SyKRkzLrAXERluf7W1gOICWaMyB386oooOWsIHvXbSoHuUSFovtHqicUVnH3EJoeT0aQEf5/XBGlc6otIOWBXAtPeZkAIJ9Bt6cUU9tZautX2nrk3MACHYr1ZKProKRtDw4o8pzAPjWo+NtpXTTvoteDDg8noDAcwbcRedAkGdFXyk2GEDcegVAFp2gyVDHjRQ4o6q2smoqtR5Hd+qMqtoALCWUUymr1m43QMZfOaMK4C0SrMsDANJ2E5FNcbdbjHC+ENl+H0myJFbLtaq4Rt8dyPBYRQV1E40nMv9rl7xrOw3DGb+Whcqu3i/OM6CUOWvgRlufNmnLYy4m77uJI7AXtdNcTDrU71LEyv7v01/N/ovL6bmu5/8A1tNWZldH0W4AAAAASUVORK5CYII=";

    Office.context.mailbox.item.addFileAttachmentFromBase64Async(
        base64String,
        "logo.png",
        { isInline: false },
        function(result) { console.log(result); });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/work-with-client-signatures.yaml

    // Set the signature for the current item with inline image.

    const modIcon1Base64 =
    "iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA2ZpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYxIDY0LjE0MDk0OSwgMjAxMC8xMi8wNy0xMDo1NzowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpDRDMxMDg1MjBCNDZFMTExODE2MkM1RUI2M0M4MDYxRCIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpFMTUxQjgyRjQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpFMTUxQjgyRTQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M1LjEgV2luZG93cyI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkQxMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkNEMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+uC/WfAAAAehJREFUeNpilCzfwEAEkAbiECA2A2J1IOaHin8E4ptAfBaIVwLxU0IGMRKw0B6IW4DYhoE4cASIK6E0VsCEQ1wUiNcB8QESLGOAqj0MxBuhZhBloS4QnwHiQAbygR/UDF1CFupCXSjHQDmQg5qli8tCUBBsQUoQ1AD8UDNFsVk4n0o+w+bT+egWglKjNymmeGhLkqLcG2oHAwtUoIuQDj5OVgZPLUmwRe5aEmAxqYqNpFgKssOcCeplM0KqdST5GfpDDRm0JfkYrj3/SE7QguyQY4ImYYLgCtAS10kHGMw6dzNsv/qC7OwCClJXYlR++v6b4er3j5QmIFcmaNlIL6AOslCIjhYKMTHQGTBBqxh6gXcgC6/R0cKbIAv30dHCfaAKGJTxHxJSqS3Fz9DkowNmywpyMcgA8fF7b8D8VWcfM6w8+4gYC+VB+RCk8hSh0gaUD4/dewvlvUWRe/z+GzGWgex4BGtiOAHxXhoHpzMoSGHZAhSPW2lo2VZYWkHOh4nEtLrIAE+hZmNUwK+B2BOIv1PRsu9QM1/jatNcBtVZ0IREKXgENesyoVYbzNIdFFi2A5tl+NqlL6BB4QBNzsSCU1A9nlAzMAALAQMOQl0qB23qWwKxIlIrDBQ394H4OBCvISYqAAIMACVibHDqsO7zAAAAAElFTkSuQmCC";

    Office.context.mailbox.item.addFileAttachmentFromBase64Async(
      modIcon1Base64,
      "myImage.png",
      { isInline: true },
      function(result) {
        if (result.status == Office.AsyncResultStatus.Succeeded) {
          const signature = $("#signature").val() + "<img src='cid:myImage.png'>";
          console.log(`Setting signature to "${signature}".`);
          Office.context.mailbox.item.body.setSignatureAsync(
            signature,
            { coercionType: "html" },
            function(asyncResult) {
              console.log(`setSignatureAsync: ${asyncResult.status}`);
            }
          );
        } else {
          console.error(`addFileAttachmentFromBase64Async: ${result.error}`);
        }
      }
    );
'Office.AppointmentCompose#addItemAttachmentAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    const attachmentItemId = $("#attachmentItemId").val();

    Office.context.mailbox.item.addItemAttachmentAsync(
        attachmentItemId,
        "My attachment",
        { "asyncContext" : { var3: 3, var4: false } },
        function(result) { console.log(result); });
'Office.AppointmentCompose#categories:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const categories = asyncResult.value;
        if (categories && categories.length > 0) {
          console.log("Categories assigned to this item:");
          console.log(JSON.stringify(categories));
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    // Note: In order for you to successfully add a category,

    // it must be in the mailbox categories master list.


    Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const masterCategories = asyncResult.value;
        if (masterCategories && masterCategories.length > 0) {
          // Grab the first category from the master list.
          const categoryToAdd = [masterCategories[0].displayName];
          Office.context.mailbox.item.categories.addAsync(categoryToAdd, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully assigned category '${categoryToAdd}' to item.`);
            } else {
              console.log("categories.addAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories in the master list on this mailbox. You can add categories using Office.context.mailbox.masterCategories.addAsync.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const categories = asyncResult.value;
        if (categories && categories.length > 0) {
          // Grab the first category assigned to this item.
          const categoryToRemove = [categories[0].displayName];
          Office.context.mailbox.item.categories.removeAsync(categoryToRemove, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully unassigned category '${categoryToRemove}' from this item.`);
            } else {
              console.log("categories.removeAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.AppointmentCompose#close:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/25-item-save-and-close/close.yaml

    Office.context.mailbox.item.close();
'Office.AppointmentCompose#disableClientSignatureAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/work-with-client-signatures.yaml

    // Disable the client signature.

    Office.context.mailbox.item.disableClientSignatureAsync(function(asyncResult)
    {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("disableClientSignatureAsync succeeded");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.AppointmentCompose#end:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-end-appointment-organizer.yaml

    Office.context.mailbox.item.end.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Appointment ends: ${result.value}`);
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-end-appointment-organizer.yaml

    Office.context.mailbox.item.start.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Get start date failed with message ${result.error.message}`);
        return;
      }

      const end = result.value; // Set end to current start date and time.
      end.setDate(end.getDate() + 1); // Set end as 1 day later than start date.
      Office.context.mailbox.item.end.setAsync(end, (result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Set end date failed with message ${result.error.message}`);
          return;
        }
        console.log(`Successfully set end date and time to ${end}`);
      });
    });
'Office.AppointmentCompose#enhancedLocation:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml

    Office.context.mailbox.item.enhancedLocation.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to get locations. Error message: ${result.error.message}`);
        return;
      }
      const places = result.value;
      if (places && places.length > 0) {
        result.value.forEach(function(place) {
          console.log(`Location: ${place.displayName} (type: ${place.locationIdentifier.type})`);
          if (place.locationIdentifier.type === Office.MailboxEnums.LocationType.Room) {
            console.log("Email address: " + place.emailAddress);
          }
        });
      } else {
        console.log("There are no locations.");
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml

    const locations = [
      {
        id: "Contoso",
        type: Office.MailboxEnums.LocationType.Custom
      },
      {
        id: "room500@test.com",
        type: Office.MailboxEnums.LocationType.Room
      }
    ];

    Office.context.mailbox.item.enhancedLocation.addAsync(locations, (result) =>
    {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log(`Successfully added locations ${JSON.stringify(locations)}`);
      } else {
        console.error(`Failed to add locations. Error message: ${result.error.message}`);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml

    const locations = [
      {
        id: "Contoso",
        type: Office.MailboxEnums.LocationType.Custom
      },
      {
        id: "room500@test.com",
        type: Office.MailboxEnums.LocationType.Room
      }
    ];

    Office.context.mailbox.item.enhancedLocation.removeAsync(locations, (result)
    => {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log(`Successfully removed locations ${JSON.stringify(locations)}`);
      } else {
        console.error(`Failed to remove locations. Error message: ${result.error.message}`);
      }
    });
'Office.AppointmentCompose#getAttachmentContentAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/get-attachment-content.yaml

    // Gets the attachments of the current message or appointment in compose
    mode.

    const options = { asyncContext: { currentItem: item } };

    // The getAttachmentsAsync call can only be used in compose mode.

    item.getAttachmentsAsync(options, callback);


    function callback(result) {
      if (result.status === Office.AsyncResultStatus.Failed) {
        console.log(result.error.message);
        return;
      }

      if (result.value.length <= 0) {
        console.log("Mail item has no attachments.");
        return;
      }

      for (let i = 0; i < result.value.length; i++) {
        // Log the attachment type and its contents to the console.
        result.asyncContext.currentItem.getAttachmentContentAsync(result.value[i].id, handleAttachmentsCallback);
      }
    }
'Office.AppointmentCompose#getAttachmentsAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    Office.context.mailbox.item.getAttachmentsAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(result.error.message);
        } else {
            if (result.value.length > 0) {
                for (let i = 0; i < result.value.length; i++) {
                    const attachment = result.value[i];
                    console.log("ID: " + attachment.id + "\n" +
                        "Name: " + attachment.name + "\n" +
                        "Size: " + attachment.size + "\n" +
                        "isInline: " + attachment.isInline);
                    switch (attachment.attachmentType) {
                        case Office.MailboxEnums.AttachmentType.Cloud:
                            console.log("Attachment type: Attachment is stored in a cloud location.");
                            break;
                        case Office.MailboxEnums.AttachmentType.File:
                            console.log("Attachment type: Attachment is a file.");
                            break;
                        case Office.MailboxEnums.AttachmentType.Item:
                            console.log("Attachment type: Attachment is an Exchange item.");
                            break;
                    }
                }
            }
            else {
                console.log("No attachments on this message.");
            }
        }
    });
'Office.AppointmentCompose#getItemIdAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/item-id-compose.yaml

    Office.context.mailbox.item.getItemIdAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(`getItemIdAsync failed with message: ${result.error.message}`);
        } else {
            console.log(result.value);
        }
    });
'Office.AppointmentCompose#getSelectedDataAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/20-item-body/get-selected-data.yaml

    Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const text = asyncResult.value.data;
        const prop = asyncResult.value.sourceProperty;
        console.log("Selected text in " + prop + ": " + text);
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.AppointmentCompose#getSharedPropertiesAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on an item from a shared folder.");
      return;
    }


    Office.context.mailbox.item.getSharedPropertiesAsync(function(result) {
      console.log(result.value);
    });
'Office.AppointmentCompose#getSharedPropertiesAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on an appointment from a shared folder.");
      return;
    }


    Office.context.mailbox.getCallbackTokenAsync({ isRest: true },
    function(result) {
      if (result.status === Office.AsyncResultStatus.Succeeded && result.value !== "") {
        Office.context.mailbox.item.getSharedPropertiesAsync(
          {
            // Pass auth token along.
            asyncContext: result.value
          },
          function(result2) {
            let sharedProperties = result2.value;
            let delegatePermissions = sharedProperties.delegatePermissions;

            // Determine if user has the appropriate permission to do the operation.
            if ((delegatePermissions & Office.MailboxEnums.DelegatePermissions.Read) != 0) {
              const ewsId = Office.context.mailbox.item.itemId;
              const restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
              let rest_url =
                sharedProperties.targetRestUrl + "/v2.0/users/" + sharedProperties.targetMailbox + "/events/" + restId;

              $.ajax({
                url: rest_url,
                dataType: "json",
                headers: { Authorization: "Bearer " + result2.asyncContext }
              })
                .done(function(response) {
                  console.log(response);
                })
                .fail(function(error) {
                  console.error(error);
                });
            }
          }
        );
      }
    });
'Office.AppointmentCompose#isAllDayEvent:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/calendar-properties-apis.yaml

    Office.context.mailbox.item.isAllDayEvent.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Is this an all-day event? " + asyncResult.value);
      } else {
        console.log("Failed to get if this is an all-day event. Error: " + JSON.stringify(asyncResult.error));
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/calendar-properties-apis.yaml

    Office.context.mailbox.item.isAllDayEvent.setAsync(true,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log("Failed to set all-day event: " + JSON.stringify(asyncResult.error));
      } else {
        console.log("Appointment set to all-day event.");
      }
    });
'Office.AppointmentCompose#isClientSignatureEnabledAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/work-with-client-signatures.yaml

    // Check if the client signature is currently enabled.

    Office.context.mailbox.item.isClientSignatureEnabledAsync(function(asyncResult)
    {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("isClientSignatureEnabledAsync succeeded with result: " + asyncResult.value);
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.AppointmentCompose#itemType:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-item-type.yaml

    const itemType = Office.context.mailbox.item.itemType;

    switch (itemType) {
        case Office.MailboxEnums.ItemType.Appointment:
            console.log(`Current item is an ${itemType}.`);
            break;
        case Office.MailboxEnums.ItemType.Message:
            console.log(`Current item is a ${itemType}. A message could be an email, meeting request, meeting response, or meeting cancellation.`);
            break;
    }
'Office.AppointmentCompose#loadCustomPropertiesAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/15-item-custom-properties/load-set-get-save.yaml

    Office.context.mailbox.item.loadCustomPropertiesAsync(function (result) {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Loaded following custom properties:");
        customProps = result.value;
        const dataKey = Object.keys(customProps)[0];
        const data = customProps[dataKey];
        for (let propertyName in data)
        {
          let propertyValue = data[propertyName];
          console.log(`${propertyName}: ${propertyValue}`);
        }              
      }
      else {
        console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);
      }
    });
'Office.AppointmentCompose#location:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-location-appointment-organizer.yaml

    Office.context.mailbox.item.location.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Appointment location: ${result.value}`);
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-location-appointment-organizer.yaml

    const location = "my office";

    Office.context.mailbox.item.location.setAsync(location, (result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Successfully set location to ${location}`);
    });
'Office.AppointmentCompose#notificationMessages:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Adds a progress indicator to the mail item.

    const id = $("#notificationId").val().toString();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.ProgressIndicator,
        message: "Progress indicator with id = " + id
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Adds an informational notification to the mail item.

    const id = $("#notificationId").val().toString();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Non-persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: false
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Adds a persistent information notification to the mail item.

    const id = $("#notificationId").val().toString();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: true
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Gets all the notification messages and their keys for the current mail
    item.

    Office.context.mailbox.item.notificationMessages.getAllAsync((asyncResult)
    => {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log(asyncResult.error.message);
        return;
      }

      console.log(asyncResult.value);
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Replaces a notification message of a given key with another message.

    const id = $("#notificationId").val().toString();

    Office.context.mailbox.item.notificationMessages.replaceAsync(
      id,
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Notification message with id = " + id + " has been replaced with an informational message.",
        icon: "icon2",
        persistent: false
      },
      handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Removes a notification message from the current mail item.

    const id = $("#notificationId").val().toString();

    Office.context.mailbox.item.notificationMessages.removeAsync(id,
    handleResult);
'Office.AppointmentCompose#optionalAttendees:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-optional-attendees-appointment-organizer.yaml

    Office.context.mailbox.item.optionalAttendees.getAsync(function(asyncResult)
    {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const apptOptionalAttendees = asyncResult.value;
        for (let i = 0; i < apptOptionalAttendees.length; i++) {
          console.log(
            "Optional attendees: " +
              apptOptionalAttendees[i].displayName +
              " (" +
              apptOptionalAttendees[i].emailAddress +
              ") - response: " +
              apptOptionalAttendees[i].appointmentResponse
          );
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-optional-attendees-appointment-organizer.yaml

    const email = $("#emailOptional")
      .val()
      .toString();
    const emailArray = [email];

    Office.context.mailbox.item.optionalAttendees.setAsync(emailArray,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting optional attendees field.");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.AppointmentCompose#organizer:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-organizer-appointment-organizer.yaml

    Office.context.mailbox.item.organizer.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const apptOrganizer = asyncResult.value;
        console.log("Organizer: " + apptOrganizer.displayName + " (" + apptOrganizer.emailAddress + ")");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.AppointmentCompose#recurrence:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-set-recurrence-appointment-organizer.yaml

    Office.context.mailbox.item.recurrence.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const recurrence = asyncResult.value;
        if (recurrence === null) {
          console.log("This is a single appointment.");
        } else {
          console.log(`Recurrence pattern: ${JSON.stringify(recurrence)}`);
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-set-recurrence-appointment-organizer.yaml

    // Important: Can only set the recurrence pattern of an appointment series.


    const currentDate = new Date();

    let seriesTimeObject: Office.SeriesTime;

    // Set series start date to tomorrow.

    seriesTimeObject.setStartDate(currentDate.getFullYear(),
    currentDate.getMonth(), currentDate.getDay() + 1);

    // Set series end date to one year from now.

    seriesTimeObject.setEndDate(currentDate.getFullYear() + 1,
    currentDate.getMonth() + 1, currentDate.getDay());

    // Set start time to 1:30 PM.

    seriesTimeObject.setStartTime(13, 30);

    // Set duration to 30 minutes.

    seriesTimeObject.setDuration(30);


    const pattern: Office.Recurrence = {
      seriesTime: seriesTimeObject,
      recurrenceType: Office.MailboxEnums.RecurrenceType.Yearly,
      recurrenceProperties: {
        interval: 1,
        dayOfWeek: Office.MailboxEnums.Days.Tue,
        weekNumber: Office.MailboxEnums.WeekNumber.Second,
        month: Office.MailboxEnums.Month.Sep
      },
      recurrenceTimeZone: { name: Office.MailboxEnums.RecurrenceTimeZone.PacificStandardTime }
    };


    Office.context.mailbox.item.recurrence.setAsync(pattern, (asyncResult) => {
      if (asyncResult.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to set recurrence. Error: ${asyncResult.error.message}`);
        return;
      }
      console.log(`Succeeded in setting recurrence pattern ${JSON.stringify(pattern)}`);
    });
'Office.AppointmentCompose#removeAttachmentAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    Office.context.mailbox.item.removeAttachmentAsync(
        $("#attachmentId").val(),
        { asyncContext : null },
        function(result)
        {
            if (result.status !== Office.AsyncResultStatus.Succeeded) {
                console.error(`${result.error.message}`);
            } else {
                console.log(`Attachment removed successfully.`);
            }
        }
    );
'Office.AppointmentCompose#requiredAttendees:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-required-attendees-appointment-organizer.yaml

    Office.context.mailbox.item.requiredAttendees.getAsync(function(asyncResult)
    {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const apptRequiredAttendees = asyncResult.value;
        for (let i = 0; i < apptRequiredAttendees.length; i++) {
          console.log(
            "Required attendees: " +
              apptRequiredAttendees[i].displayName +
              " (" +
              apptRequiredAttendees[i].emailAddress +
              ") - response: " +
              apptRequiredAttendees[i].appointmentResponse
          );
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-required-attendees-appointment-organizer.yaml

    const email = $("#emailRequired")
      .val()
      .toString();
    const emailArray = [email];

    Office.context.mailbox.item.requiredAttendees.setAsync(emailArray,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting required attendees field.");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.AppointmentCompose#saveAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/25-item-save-and-close/save.yaml

    Office.context.mailbox.item.saveAsync(function (result) {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log(`saveAsync succeeded, itemId is ${result.value}`);
      }
      else {
        console.error(`saveAsync failed with message ${result.error.message}`);
      }
    });
'Office.AppointmentCompose#sensitivity:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/calendar-properties-apis.yaml

    Office.context.mailbox.item.sensitivity.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Sensitivity: " + asyncResult.value);
      } else {
        console.log("Failed to get sensitivity: " + JSON.stringify(asyncResult.error));
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/calendar-properties-apis.yaml

    Office.context.mailbox.item.sensitivity.setAsync(
      Office.MailboxEnums.AppointmentSensitivityType.Confidential,
      function callback(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Failed) {
          console.log("Failed to set appointment sensitivity: " + JSON.stringify(asyncResult.error));
        } else {
          console.log("Successfully set appointment sensitivity.");
        }
      }
    );
'Office.AppointmentCompose#sensitivityLabel:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/60-sensitivity-label/sensitivity-label.yaml

    // This snippet gets the current mail item's sensitivity label.

    Office.context.sensitivityLabelsCatalog.getIsEnabledAsync((asyncResult) => {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded && asyncResult.value == true) {
        Office.context.mailbox.item.sensitivityLabel.getAsync((asyncResult) => {
          if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
            console.log(asyncResult.value);
          } else {
            console.log("Action failed with error: " + asyncResult.error.message);
          }
        });
      } else {
        console.log("Action failed with error: " + asyncResult.error.message);
      }
    });
'Office.AppointmentCompose#seriesId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-series-id.yaml

    const seriesId = Office.context.mailbox.item.seriesId;


    if (seriesId === undefined) {
      console.log("This is a message that's not a meeting request.");
    } else if (seriesId === null) {
      console.log("This is a single appointment, a parent series, or a meeting request for a series or single meeting.");
    } else {
      console.log("This is an instance belonging to series with ID " + seriesId);
    }
'Office.AppointmentCompose#sessionData:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/session-data-apis.yaml

    Office.context.mailbox.item.sessionData.getAllAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("The sessionData is " + JSON.stringify(asyncResult.value));
      } else {
        console.log("Failed to get all sessionData. Error: " + JSON.stringify(asyncResult.error));
      }
    });
'Office.AppointmentCompose#setSelectedDataAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/set-selected-data.yaml

    Office.context.mailbox.item.setSelectedDataAsync("Replaced",
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Selected text has been updated successfully.");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.AppointmentCompose#start:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-start-appointment-organizer.yaml

    Office.context.mailbox.item.start.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Appointment starts: ${result.value}`);
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-start-appointment-organizer.yaml

    const start = new Date(); // Represents current date and time.

    start.setDate(start.getDate() + 2); // Add 2 days to current date.

    Office.context.mailbox.item.start.setAsync(start, (result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Successfully set start date and time to ${start}`);
    });
'Office.AppointmentCompose#subject:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-subject-compose.yaml

    Office.context.mailbox.item.subject.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Subject: ${result.value}`);
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-subject-compose.yaml

    let subject = "Hello World!";

    Office.context.mailbox.item.subject.setAsync(subject, (result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Successfully set subject to ${subject}`);
    });
'Office.AppointmentRead#attachments:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/get-attachments-read.yaml

    const attachments = Office.context.mailbox.item.attachments;

    console.log(attachments);
'Office.AppointmentRead#categories:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const categories = asyncResult.value;
        if (categories && categories.length > 0) {
          console.log("Categories assigned to this item:");
          console.log(JSON.stringify(categories));
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    // Note: In order for you to successfully add a category,

    // it must be in the mailbox categories master list.


    Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const masterCategories = asyncResult.value;
        if (masterCategories && masterCategories.length > 0) {
          // Grab the first category from the master list.
          const categoryToAdd = [masterCategories[0].displayName];
          Office.context.mailbox.item.categories.addAsync(categoryToAdd, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully assigned category '${categoryToAdd}' to item.`);
            } else {
              console.log("categories.addAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories in the master list on this mailbox. You can add categories using Office.context.mailbox.masterCategories.addAsync.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const categories = asyncResult.value;
        if (categories && categories.length > 0) {
          // Grab the first category assigned to this item.
          const categoryToRemove = [categories[0].displayName];
          Office.context.mailbox.item.categories.removeAsync(categoryToRemove, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully unassigned category '${categoryToRemove}' from this item.`);
            } else {
              console.log("categories.removeAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.AppointmentRead#dateTimeCreated:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-date-time-created-read.yaml

    console.log(`Creation date and time:
    ${Office.context.mailbox.item.dateTimeCreated}`);
'Office.AppointmentRead#dateTimeModified:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-date-time-modified-read.yaml

    console.log(`Date and time item last modified:
    ${Office.context.mailbox.item.dateTimeModified}`);
'Office.AppointmentRead#displayReplyAllForm:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyAllForm("This is a reply ALL with
    <b>some bold text</b>.");
'Office.AppointmentRead#displayReplyAllFormAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyAllFormAsync("This is a reply ALL
    with <b>some bold text</b>.", function(
      asyncResult
    ) {
      console.log(JSON.stringify(asyncResult));
    });
'Office.AppointmentRead#displayReplyForm:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyForm("This is a reply with <i>some
    text in italics</i>.");
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-reply-with-attachments.yaml

    Office.context.mailbox.item.displayReplyForm({
      htmlBody: "This is a reply with a couple of attachments - an inline image and an item<br><img src='cid:dog.jpg'>",
      attachments: [
        { type: "file", url: "http://i.imgur.com/9S36xvA.jpg", name: "dog.jpg", isInline: true },
        { type: "item", itemId: Office.context.mailbox.item.itemId, name: "test_email.msg" }
      ],
      options: { asyncContext: null },
      callback: function(result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
        }
      }
    });
'Office.AppointmentRead#displayReplyFormAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyFormAsync("This is a reply with
    <i>some text in italics</i>.", function(
      asyncResult
    ) {
      console.log(JSON.stringify(asyncResult));
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-reply-with-attachments.yaml

    // The async version is only available starting with requirement set 1.9,

    // and provides a callback when the new appointment form has been created.

    Office.context.mailbox.item.displayReplyFormAsync(
      {
        htmlBody: "This is a reply with a couple of attachments - an inline image and an item<br><img src='cid:dog.jpg'>",
        attachments: [
          { type: "file", url: "http://i.imgur.com/9S36xvA.jpg", name: "dog.jpg", isInline: true },
          { type: "item", itemId: Office.context.mailbox.item.itemId, name: "test_email.msg" }
        ]
      },
      function(asyncResult) {
        console.log(JSON.stringify(asyncResult));
      }
    );
'Office.AppointmentRead#end:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-end-read.yaml

    console.log(`Appointment ends: ${Office.context.mailbox.item.end}`);
'Office.AppointmentRead#enhancedLocation:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml

    Office.context.mailbox.item.enhancedLocation.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to get locations. Error message: ${result.error.message}`);
        return;
      }
      const places = result.value;
      if (places && places.length > 0) {
        result.value.forEach(function(place) {
          console.log(`Location: ${place.displayName} (type: ${place.locationIdentifier.type})`);
          if (place.locationIdentifier.type === Office.MailboxEnums.LocationType.Room) {
            console.log("Email address: " + place.emailAddress);
          }
        });
      } else {
        console.log("There are no locations.");
      }
    });
'Office.AppointmentRead#getAttachmentContentAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/get-attachment-content.yaml

    // Gets the attachments of the current message or appointment in read mode.

    // The item.attachments call can only be used in read mode.

    const attachments = item.attachments;

    if (attachments.length <= 0) {
      console.log("Mail item has no attachments.");
      return;
    }


    for (let i = 0; i < attachments.length; i++) {
      // Log the attachment type and its contents to the console.
      item.getAttachmentContentAsync(attachments[i].id, handleAttachmentsCallback);
    }
'Office.AppointmentRead#getEntities:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/basic-entities.yaml

    const entities = Office.context.mailbox.item.getEntities();

    let entityTypesFound = 0;

    if (entities.addresses.length > 0) {
        console.warn("physical addresses: ");
        console.log(entities.addresses);
        entityTypesFound++;
    }

    if (entities.contacts.length > 0) {
        console.warn("contacts: ");
        entities.contacts.forEach(function (contact) { console.log(contact.personName); })
        entityTypesFound++;
    }

    if (entities.emailAddresses.length > 0) {
        console.warn("email addresses: ");
        console.log(entities.emailAddresses);
        entityTypesFound++;
    }

    if (entities.meetingSuggestions.length > 0) {
        console.warn("meetings suggestions: ");
        entities.meetingSuggestions.forEach(function (meetingSuggestion) { console.log(meetingSuggestion.meetingString); })
        entityTypesFound++;
    }

    if (entities.phoneNumbers.length > 0) {
        console.warn("phone numbers: ");
        entities.phoneNumbers.forEach(function (phoneNumber) { console.log(phoneNumber.originalPhoneString); })
        entityTypesFound++;
    }

    if (entities.taskSuggestions.length > 0) {
        console.warn("task suggestions: ");
        entities.taskSuggestions.forEach(function (taskSuggestion) { console.log(taskSuggestion.taskString); })
        entityTypesFound++;
    }

    if (entities.urls.length > 0) {
        console.warn("URLs: ");
        console.log(entities.urls);
        entityTypesFound++;
    }

    if (entityTypesFound == 0)

    {
        console.log("No entities found on this item.");
    }
'Office.AppointmentRead#getEntitiesByType:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/basic-entities.yaml

    console.log(Office.context.mailbox.item.getEntitiesByType(Office.MailboxEnums.EntityType.Address));
'Office.AppointmentRead#getFilteredEntitiesByName:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted physical address
    that has the word "Way" in it.

    console.log(Office.context.mailbox.item.getFilteredEntitiesByName("sampleFilterName"));
'Office.AppointmentRead#getRegExMatches:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted word "ScriptLab".

    console.log(Office.context.mailbox.item.getRegExMatches());
'Office.AppointmentRead#getRegExMatchesByName:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted word "ScriptLab".

    console.log(Office.context.mailbox.item.getRegExMatchesByName("sampleRegexName"));
'Office.AppointmentRead#getSelectedEntities:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/selected.yaml

    const entities = Office.context.mailbox.item.getSelectedEntities();

    let entityTypesFound = 0;

    if (entities.addresses.length > 0) {
        console.warn("physical addresses: ");
        console.log(entities.addresses);
        entityTypesFound++;
    }

    if (entities.contacts.length > 0) {
        console.warn("contacts: ");
        entities.contacts.forEach(function (contact) { console.log(contact.personName); })
        entityTypesFound++;
    }

    if (entities.emailAddresses.length > 0) {
        console.warn("email addresses: ");
        console.log(entities.emailAddresses);
        entityTypesFound++;
    }

    if (entities.meetingSuggestions.length > 0) {
        console.warn("meetings suggestions: ");
        entities.meetingSuggestions.forEach(function (meetingSuggestion) { console.log(meetingSuggestion.meetingString); })
        entityTypesFound++;
    }

    if (entities.phoneNumbers.length > 0) {
        console.warn("phone numbers: ");
        entities.phoneNumbers.forEach(function (phoneNumber) { console.log(phoneNumber.originalPhoneString); })
        entityTypesFound++;
    }

    if (entities.taskSuggestions.length > 0) {
        console.warn("task suggestions: ");
        entities.taskSuggestions.forEach(function (taskSuggestion) { console.log(taskSuggestion.taskString); })
        entityTypesFound++;
    }

    if (entities.urls.length > 0) {
        console.warn("URLs: ");
        console.log(entities.urls);
        entityTypesFound++;
    }

    if (entityTypesFound == 0)

    {
        console.error("Open add-in by clicking on a highlighted entity, for this API to return something useful.");
    }
'Office.AppointmentRead#getSelectedRegExMatches:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/selected.yaml

    const matches = Office.context.mailbox.item.getSelectedRegExMatches();

    if (matches) {
        console.log(matches);
    }

    else {
        console.error("Open add-in by clicking on a highlighted regex match, for this API to return something useful.");
    }
'Office.AppointmentRead#getSharedPropertiesAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on an item from a shared folder.");
      return;
    }


    Office.context.mailbox.item.getSharedPropertiesAsync(function(result) {
      console.log(result.value);
    });
'Office.AppointmentRead#getSharedPropertiesAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on an appointment from a shared folder.");
      return;
    }


    Office.context.mailbox.getCallbackTokenAsync({ isRest: true },
    function(result) {
      if (result.status === Office.AsyncResultStatus.Succeeded && result.value !== "") {
        Office.context.mailbox.item.getSharedPropertiesAsync(
          {
            // Pass auth token along.
            asyncContext: result.value
          },
          function(result2) {
            let sharedProperties = result2.value;
            let delegatePermissions = sharedProperties.delegatePermissions;

            // Determine if user has the appropriate permission to do the operation.
            if ((delegatePermissions & Office.MailboxEnums.DelegatePermissions.Read) != 0) {
              const ewsId = Office.context.mailbox.item.itemId;
              const restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
              let rest_url =
                sharedProperties.targetRestUrl + "/v2.0/users/" + sharedProperties.targetMailbox + "/events/" + restId;

              $.ajax({
                url: rest_url,
                dataType: "json",
                headers: { Authorization: "Bearer " + result2.asyncContext }
              })
                .done(function(response) {
                  console.log(response);
                })
                .fail(function(error) {
                  console.error(error);
                });
            }
          }
        );
      }
    });
'Office.AppointmentRead#itemClass:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-item-class-read.yaml

    console.log(`Item class: ${Office.context.mailbox.item.itemClass}`);
'Office.AppointmentRead#itemType:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-item-type.yaml

    const itemType = Office.context.mailbox.item.itemType;

    switch (itemType) {
        case Office.MailboxEnums.ItemType.Appointment:
            console.log(`Current item is an ${itemType}.`);
            break;
        case Office.MailboxEnums.ItemType.Message:
            console.log(`Current item is a ${itemType}. A message could be an email, meeting request, meeting response, or meeting cancellation.`);
            break;
    }
'Office.AppointmentRead#loadCustomPropertiesAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/15-item-custom-properties/load-set-get-save.yaml

    Office.context.mailbox.item.loadCustomPropertiesAsync(function (result) {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Loaded following custom properties:");
        customProps = result.value;
        const dataKey = Object.keys(customProps)[0];
        const data = customProps[dataKey];
        for (let propertyName in data)
        {
          let propertyValue = data[propertyName];
          console.log(`${propertyName}: ${propertyValue}`);
        }              
      }
      else {
        console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);
      }
    });
'Office.AppointmentRead#location:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-location-read.yaml

    console.log(`Appointment location:
    ${Office.context.mailbox.item.location}`);
'Office.AppointmentRead#normalizedSubject:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-normalized-subject-read.yaml

    console.log(`Normalized subject:
    ${Office.context.mailbox.item.normalizedSubject}`);
'Office.AppointmentRead#notificationMessages:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Adds a progress indicator to the mail item.

    const id = $("#notificationId").val().toString();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.ProgressIndicator,
        message: "Progress indicator with id = " + id
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Adds an informational notification to the mail item.

    const id = $("#notificationId").val().toString();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Non-persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: false
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Adds a persistent information notification to the mail item.

    const id = $("#notificationId").val().toString();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: true
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Gets all the notification messages and their keys for the current mail
    item.

    Office.context.mailbox.item.notificationMessages.getAllAsync((asyncResult)
    => {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log(asyncResult.error.message);
        return;
      }

      console.log(asyncResult.value);
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Replaces a notification message of a given key with another message.

    const id = $("#notificationId").val().toString();

    Office.context.mailbox.item.notificationMessages.replaceAsync(
      id,
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Notification message with id = " + id + " has been replaced with an informational message.",
        icon: "icon2",
        persistent: false
      },
      handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Removes a notification message from the current mail item.

    const id = $("#notificationId").val().toString();

    Office.context.mailbox.item.notificationMessages.removeAsync(id,
    handleResult);
'Office.AppointmentRead#optionalAttendees:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-optional-attendees-appointment-attendee.yaml

    const apptOptionalAttendees = Office.context.mailbox.item.optionalAttendees;

    console.log("Optional attendees:");

    for (let i = 0; i < apptOptionalAttendees.length; i++) {
      console.log(
        apptOptionalAttendees[i].displayName +
          " (" +
          apptOptionalAttendees[i].emailAddress +
          ") - response: " +
          apptOptionalAttendees[i].appointmentResponse
      );
    }
'Office.AppointmentRead#organizer:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-organizer-appointment-attendee.yaml

    const apptOrganizer = Office.context.mailbox.item.organizer;

    console.log("Organizer: " + apptOrganizer.displayName + " (" +
    apptOrganizer.emailAddress + ")");
'Office.AppointmentRead#recurrence:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-recurrence-read.yaml

    const recurrence = Office.context.mailbox.item.recurrence;


    if (recurrence === undefined) {
      console.log("This item is a message but not a meeting request.");
    } else if (recurrence === null) {
      console.log("This is a single appointment.");
    } else {
      console.log(JSON.stringify(recurrence));
    }
'Office.AppointmentRead#requiredAttendees:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-required-attendees-appointment-attendee.yaml

    const apptRequiredAttendees = Office.context.mailbox.item.requiredAttendees;

    console.log("Required attendees:");

    for (let i = 0; i < apptRequiredAttendees.length; i++) {
      console.log(
        apptRequiredAttendees[i].displayName +
          " (" +
          apptRequiredAttendees[i].emailAddress +
          ") - response: " +
          apptRequiredAttendees[i].appointmentResponse
      );
    }
'Office.AppointmentRead#seriesId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-series-id.yaml

    const seriesId = Office.context.mailbox.item.seriesId;


    if (seriesId === undefined) {
      console.log("This is a message that's not a meeting request.");
    } else if (seriesId === null) {
      console.log("This is a single appointment, a parent series, or a meeting request for a series or single meeting.");
    } else {
      console.log("This is an instance belonging to series with ID " + seriesId);
    }
'Office.AppointmentRead#start:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-start-read.yaml

    console.log(`Appointment starts: ${Office.context.mailbox.item.start}`);
'Office.AppointmentRead#subject:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-subject-read.yaml

    console.log(`Subject: ${Office.context.mailbox.item.subject}`);
'Office.Body#appendOnSendAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/20-item-body/append-text-on-send.yaml

    // This snippet appends text to the end of the message or appointment's body
    once it's sent.

    const text = $("#text-field").val();


    // It's recommended to call getTypeAsync and pass its returned value to the
    options.coercionType parameter of the appendOnSendAsync call.

    Office.context.mailbox.item.body.getTypeAsync((asyncResult) => {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log("Action failed with error: " + asyncResult.error.message);
        return;
      }

      const bodyFormat = asyncResult.value;
      Office.context.mailbox.item.body.appendOnSendAsync(text, { coercionType: bodyFormat }, (asyncResult) => {
        if (asyncResult.status === Office.AsyncResultStatus.Failed) {
          console.log("Action failed with error: " + asyncResult.error.message);
          return;
        }

        console.log(`"${text}" will be appended to the body once the message or appointment is sent. Send the mail item to test this feature.`);
      });
    });
'Office.Body#getAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/20-item-body/add-inline-base64-image.yaml

    const mailItem = Office.context.mailbox.item;

    const base64String =
      "iVBORw0KGgoAAAANSUhEUgAAAGAAAABgCAMAAADVRocKAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAnUExURQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN0S+bUAAAAMdFJOUwAQIDBAUI+fr7/P7yEupu8AAAAJcEhZcwAADsMAAA7DAcdvqGQAAAF8SURBVGhD7dfLdoMwDEVR6Cspzf9/b20QYOthS5Zn0Z2kVdY6O2WULrFYLBaLxd5ur4mDZD14b8ogWS/dtxV+dmx9ysA2QUj9TQRWv5D7HyKwuIW9n0vc8tkpHP0W4BOg3wQ8wtlvA+PC1e8Ao8Ld7wFjQtHvAiNC2e8DdqHqKwCrUPc1gE1AfRVgEXBfB+gF0lcCWoH2tYBOYPpqQCNwfT3QF9i+AegJfN8CtAWhbwJagtS3AbIg9o2AJMh9M5C+SVGBvx6zAfmT0r+Bv8JMwP4kyFPir+cswF5KL3WLv14zAFBCLf56Tw9cparFX4upgaJUtPhrOS1QlY5W+vWTXrGgBFB/b72ev3/0igUdQPppP/nfowfKUUEFcP207y/yxKmgAYQ+PywoAFOfCH3A2MdCFzD3kdADBvq10AGG+pXQBgb7pdAEhvuF0AIc/VtoAK7+JciAs38KIuDugyAC/v4hiMCE/i7IwLRBsh68N2WQjMVisVgs9i5bln8LGScNcCrONQAAAABJRU5ErkJggg==";

    // Get the current body of the message or appointment.

    mailItem.body.getAsync(Office.CoercionType.Html, (bodyResult) => {
      if (bodyResult.status === Office.AsyncResultStatus.Succeeded) {
        // Insert the Base64 image to the beginning of the body.
        const options = { isInline: true, asyncContext: bodyResult.value };
        mailItem.addFileAttachmentFromBase64Async(base64String, "sample.png", options, (attachResult) => {
          if (attachResult.status === Office.AsyncResultStatus.Succeeded) {
            let body = attachResult.asyncContext;
            body = body.replace("<p class=MsoNormal>", `<p class=MsoNormal><img src="cid:sample.png">`);

            mailItem.body.setAsync(body, { coercionType: Office.CoercionType.Html }, (setResult) => {
              if (setResult.status === Office.AsyncResultStatus.Succeeded) {
                console.log("Inline Base64 image added to the body.");
              } else {
                console.log(setResult.error.message);
              }
            });
          } else {
            console.log(attachResult.error.message);
          }
        });
      } else {
        console.log(bodyResult.error.message);
      }
    });
'Office.Body#getTypeAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/20-item-body/get-body-format.yaml

    // Get the mail item's body format (plain text or HTML) and log it to the
    console.

    Office.context.mailbox.item.body.getTypeAsync((asyncResult) => {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log("Action failed with error: " + asyncResult.error.message);
        return;
      }

      console.log("Body format: " + asyncResult.value);
    });
'Office.Body#prependAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/20-item-body/prepend-text-to-item-body.yaml

    /* This snippet adds text to the beginning of the message or appointment's
    body. 
      
      When prepending a link in HTML markup to the body, you can disable the online link preview by setting the anchor tag's id attribute to "LPNoLP". For example, '<a id="LPNoLP" href="http://www.contoso.com">Click here!</a>'.
    */

    const text = $("#text-field").val();


    // It's recommended to call getTypeAsync and pass its returned value to the
    options.coercionType parameter of the prependAsync call.

    Office.context.mailbox.item.body.getTypeAsync((asyncResult) => {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log("Action failed with error: " + asyncResult.error.message);
        return;
      }

      const bodyFormat = asyncResult.value;
      Office.context.mailbox.item.body.prependAsync(text, { coercionType: bodyFormat }, (asyncResult) => {
        if (asyncResult.status === Office.AsyncResultStatus.Failed) {
          console.log("Action failed with error: " + asyncResult.error.message);
          return;
        }

        console.log(`"${text}" prepended to the body.`);
      });
    });
'Office.Body#prependOnSendAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/20-item-body/prepend-text-on-send.yaml

    // This snippet prepends text to the beginning of the message or
    appointment's body once it's sent.

    const text = $("#text-field").val();


    // It's recommended to call getTypeAsync and pass its returned value to the
    options.coercionType parameter of the prependOnSendAsync call.

    Office.context.mailbox.item.body.getTypeAsync((asyncResult) => {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log("Action failed with error: " + asyncResult.error.message);
        return;
      }

      const bodyFormat = asyncResult.value;
      Office.context.mailbox.item.body.prependOnSendAsync(text, { coercionType: bodyFormat }, (asyncResult) => {
        if (asyncResult.status === Office.AsyncResultStatus.Failed) {
          console.log("Action failed with error: " + asyncResult.error.message);
          return;
        }

        console.log(`"${text}" will be prepended to the body once the message or appointment is sent. Send the mail item to test this feature.`);
      });
    });
'Office.Body#setAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/20-item-body/add-inline-base64-image.yaml

    const mailItem = Office.context.mailbox.item;

    const base64String =
      "iVBORw0KGgoAAAANSUhEUgAAAGAAAABgCAMAAADVRocKAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAnUExURQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN0S+bUAAAAMdFJOUwAQIDBAUI+fr7/P7yEupu8AAAAJcEhZcwAADsMAAA7DAcdvqGQAAAF8SURBVGhD7dfLdoMwDEVR6Cspzf9/b20QYOthS5Zn0Z2kVdY6O2WULrFYLBaLxd5ur4mDZD14b8ogWS/dtxV+dmx9ysA2QUj9TQRWv5D7HyKwuIW9n0vc8tkpHP0W4BOg3wQ8wtlvA+PC1e8Ao8Ld7wFjQtHvAiNC2e8DdqHqKwCrUPc1gE1AfRVgEXBfB+gF0lcCWoH2tYBOYPpqQCNwfT3QF9i+AegJfN8CtAWhbwJagtS3AbIg9o2AJMh9M5C+SVGBvx6zAfmT0r+Bv8JMwP4kyFPir+cswF5KL3WLv14zAFBCLf56Tw9cparFX4upgaJUtPhrOS1QlY5W+vWTXrGgBFB/b72ev3/0igUdQPppP/nfowfKUUEFcP207y/yxKmgAYQ+PywoAFOfCH3A2MdCFzD3kdADBvq10AGG+pXQBgb7pdAEhvuF0AIc/VtoAK7+JciAs38KIuDugyAC/v4hiMCE/i7IwLRBsh68N2WQjMVisVgs9i5bln8LGScNcCrONQAAAABJRU5ErkJggg==";

    // Get the current body of the message or appointment.

    mailItem.body.getAsync(Office.CoercionType.Html, (bodyResult) => {
      if (bodyResult.status === Office.AsyncResultStatus.Succeeded) {
        // Insert the Base64 image to the beginning of the body.
        const options = { isInline: true, asyncContext: bodyResult.value };
        mailItem.addFileAttachmentFromBase64Async(base64String, "sample.png", options, (attachResult) => {
          if (attachResult.status === Office.AsyncResultStatus.Succeeded) {
            let body = attachResult.asyncContext;
            body = body.replace("<p class=MsoNormal>", `<p class=MsoNormal><img src="cid:sample.png">`);

            mailItem.body.setAsync(body, { coercionType: Office.CoercionType.Html }, (setResult) => {
              if (setResult.status === Office.AsyncResultStatus.Succeeded) {
                console.log("Inline Base64 image added to the body.");
              } else {
                console.log(setResult.error.message);
              }
            });
          } else {
            console.log(attachResult.error.message);
          }
        });
      } else {
        console.log(bodyResult.error.message);
      }
    });
'Office.Body#setSelectedDataAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/20-item-body/replace-selected-text.yaml

    /* This snippet replaces selected text in a message or appointment's body
    with specified text.
      
      If you want to use a link in HTML markup as a value of the setSelectedDataAsync call's data parameter, you can disable online link preview by setting the anchor tag's id attribute to "LPNoLP". For example, '<a id="LPNoLP" href="http://www.contoso.com">Click here!</a>'.
    */

    const text = $("#text-field").val();


    // It's recommended to call getTypeAsync and pass its returned value to the
    options.coercionType parameter of the prependAsync call.

    Office.context.mailbox.item.body.getTypeAsync((asyncResult) => {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log("Action failed with error: " + asyncResult.error.message);
        return;
      }

      const bodyFormat = asyncResult.value;
      Office.context.mailbox.item.body.setSelectedDataAsync(text, { coercionType: bodyFormat }, (asyncResult) => {
        if (asyncResult.status === Office.AsyncResultStatus.Failed) {
          console.log("Action failed with error: " + asyncResult.error.message);
          return;
        }

        console.log(`Replaced selected text with "${text}".`);
      });
    });
'Office.Body#setSignatureAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/work-with-client-signatures.yaml

    // Set the signature for the current item with inline image.

    const modIcon1Base64 =
    "iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA2ZpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYxIDY0LjE0MDk0OSwgMjAxMC8xMi8wNy0xMDo1NzowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpDRDMxMDg1MjBCNDZFMTExODE2MkM1RUI2M0M4MDYxRCIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpFMTUxQjgyRjQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpFMTUxQjgyRTQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M1LjEgV2luZG93cyI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkQxMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkNEMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+uC/WfAAAAehJREFUeNpilCzfwEAEkAbiECA2A2J1IOaHin8E4ptAfBaIVwLxU0IGMRKw0B6IW4DYhoE4cASIK6E0VsCEQ1wUiNcB8QESLGOAqj0MxBuhZhBloS4QnwHiQAbygR/UDF1CFupCXSjHQDmQg5qli8tCUBBsQUoQ1AD8UDNFsVk4n0o+w+bT+egWglKjNymmeGhLkqLcG2oHAwtUoIuQDj5OVgZPLUmwRe5aEmAxqYqNpFgKssOcCeplM0KqdST5GfpDDRm0JfkYrj3/SE7QguyQY4ImYYLgCtAS10kHGMw6dzNsv/qC7OwCClJXYlR++v6b4er3j5QmIFcmaNlIL6AOslCIjhYKMTHQGTBBqxh6gXcgC6/R0cKbIAv30dHCfaAKGJTxHxJSqS3Fz9DkowNmywpyMcgA8fF7b8D8VWcfM6w8+4gYC+VB+RCk8hSh0gaUD4/dewvlvUWRe/z+GzGWgex4BGtiOAHxXhoHpzMoSGHZAhSPW2lo2VZYWkHOh4nEtLrIAE+hZmNUwK+B2BOIv1PRsu9QM1/jatNcBtVZ0IREKXgENesyoVYbzNIdFFi2A5tl+NqlL6BB4QBNzsSCU1A9nlAzMAALAQMOQl0qB23qWwKxIlIrDBQ394H4OBCvISYqAAIMACVibHDqsO7zAAAAAElFTkSuQmCC";

    Office.context.mailbox.item.addFileAttachmentFromBase64Async(
      modIcon1Base64,
      "myImage.png",
      { isInline: true },
      function(result) {
        if (result.status == Office.AsyncResultStatus.Succeeded) {
          const signature = $("#signature").val() + "<img src='cid:myImage.png'>";
          console.log(`Setting signature to "${signature}".`);
          Office.context.mailbox.item.body.setSignatureAsync(
            signature,
            { coercionType: "html" },
            function(asyncResult) {
              console.log(`setSignatureAsync: ${asyncResult.status}`);
            }
          );
        } else {
          console.error(`addFileAttachmentFromBase64Async: ${result.error}`);
        }
      }
    );
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/work-with-client-signatures.yaml

    // Set the signature for the current item.

    const signature = $("#signature").val();

    console.log(`Setting signature to "${signature}".`);

    Office.context.mailbox.item.body.setSignatureAsync(signature,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("setSignatureAsync succeeded");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.Categories#addAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    // Note: In order for you to successfully add a category,

    // it must be in the mailbox categories master list.


    Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const masterCategories = asyncResult.value;
        if (masterCategories && masterCategories.length > 0) {
          // Grab the first category from the master list.
          const categoryToAdd = [masterCategories[0].displayName];
          Office.context.mailbox.item.categories.addAsync(categoryToAdd, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully assigned category '${categoryToAdd}' to item.`);
            } else {
              console.log("categories.addAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories in the master list on this mailbox. You can add categories using Office.context.mailbox.masterCategories.addAsync.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.Categories#getAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const categories = asyncResult.value;
        if (categories && categories.length > 0) {
          console.log("Categories assigned to this item:");
          console.log(JSON.stringify(categories));
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.Categories#removeAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const categories = asyncResult.value;
        if (categories && categories.length > 0) {
          // Grab the first category assigned to this item.
          const categoryToRemove = [categories[0].displayName];
          Office.context.mailbox.item.categories.removeAsync(categoryToRemove, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully unassigned category '${categoryToRemove}' from this item.`);
            } else {
              console.log("categories.removeAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.CustomProperties#get:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/15-item-custom-properties/load-set-get-save.yaml

    const propertyName = $("#propertyName").val();

    const propertyValue = customProps.get(propertyName);

    $("#propertyValue").val(propertyValue);

    console.log(`The value of custom property "${propertyName}" is
    "${propertyValue}".`);
'Office.CustomProperties#remove:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/15-item-custom-properties/load-set-get-save.yaml

    const propertyName = $("#propertyName").val();

    customProps.remove(propertyName);

    console.log(`Custom property "${propertyName}" removed.`);
'Office.CustomProperties#set:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/15-item-custom-properties/load-set-get-save.yaml

    const propertyName = $("#propertyName").val();

    const propertyValue = $("#propertyValue").val();

    customProps.set(propertyName, propertyValue);

    console.log(`Custom property "${propertyName}" set to value
    "${propertyValue}".`);
'Office.DelayDeliveryTime#getAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/delay-message-delivery.yaml

    // This snippet gets the delivery date and time of a message.

    Office.context.mailbox.item.delayDeliveryTime.getAsync((asyncResult) => {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log(asyncResult.error.message);
        return;
      }

      const deliveryDate = asyncResult.value;
      if (deliveryDate === 0) {
        console.log("Your message will be delivered immediately when you select Send.");
      } else {
        const date = new Date(deliveryDate);
        console.log(`Message delivery date and time: ${date.toString()}`);
      }
    });
'Office.DelayDeliveryTime#setAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/delay-message-delivery.yaml

    function setDeliveryDate(minutes) {
      // This snippet sets the delivery date and time of a message.
      const currentTime = new Date().getTime();
      const milliseconds = totalDelay * 60000;
      const timeDelay = new Date(currentTime + milliseconds);
      Office.context.mailbox.item.delayDeliveryTime.setAsync(timeDelay, (asyncResult) => {
        if (asyncResult.status === Office.AsyncResultStatus.Failed) {
          console.log(asyncResult.error.message);
          return;
        }

        if (minutes === 1440) {
          console.log(`Delayed delivery by an additional one day.`);
        } else {
          console.log(`Delayed delivery by an additional ${minutes} minutes.`);
        }
      });
    }
'Office.Display#body:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/set-displayed-body-subject.yaml

    // This snippet temporarily sets the content displayed in the body of a
    message in read mode.

    // The set content will remain visible until the user switches to a
    different message in the Reading Pane or closes the window of the current
    message.

    const bodyText = $("#body-text-field")
      .val()
      .toString();
    Office.context.mailbox.item.display.body.setAsync(bodyText, (asyncResult) =>
    {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log(`Action failed with error: ${asyncResult.error.message}`);
        return;
      }

      console.log("Temporarily set the content displayed in the body.");
    });
'Office.Display#subject:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/set-displayed-body-subject.yaml

    // This snippet temporarily sets the content displayed in the subject field
    of a message in read mode.

    // The set content will remain visible until the user switches to a
    different message in the Reading Pane or closes the window of the current
    message.

    const subjectText = $("#subject-text-field")
      .val()
      .toString();
    Office.context.mailbox.item.display.subject.setAsync(subjectText,
    (asyncResult) => {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log(`Action failed with error: ${asyncResult.error.message}`);
        return;
      }

      console.log("Temporarily set the content displayed in the subject field.");
    });
'Office.DisplayedBody#setAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/set-displayed-body-subject.yaml

    // This snippet temporarily sets the content displayed in the body of a
    message in read mode.

    // The set content will remain visible until the user switches to a
    different message in the Reading Pane or closes the window of the current
    message.

    const bodyText = $("#body-text-field")
      .val()
      .toString();
    Office.context.mailbox.item.display.body.setAsync(bodyText, (asyncResult) =>
    {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log(`Action failed with error: ${asyncResult.error.message}`);
        return;
      }

      console.log("Temporarily set the content displayed in the body.");
    });
'Office.DisplayedSubject#setAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/set-displayed-body-subject.yaml

    // This snippet temporarily sets the content displayed in the subject field
    of a message in read mode.

    // The set content will remain visible until the user switches to a
    different message in the Reading Pane or closes the window of the current
    message.

    const subjectText = $("#subject-text-field")
      .val()
      .toString();
    Office.context.mailbox.item.display.subject.setAsync(subjectText,
    (asyncResult) => {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log(`Action failed with error: ${asyncResult.error.message}`);
        return;
      }

      console.log("Temporarily set the content displayed in the subject field.");
    });
'Office.EnhancedLocation#addAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml

    const locations = [
      {
        id: "Contoso",
        type: Office.MailboxEnums.LocationType.Custom
      },
      {
        id: "room500@test.com",
        type: Office.MailboxEnums.LocationType.Room
      }
    ];

    Office.context.mailbox.item.enhancedLocation.addAsync(locations, (result) =>
    {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log(`Successfully added locations ${JSON.stringify(locations)}`);
      } else {
        console.error(`Failed to add locations. Error message: ${result.error.message}`);
      }
    });
'Office.EnhancedLocation#getAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml

    Office.context.mailbox.item.enhancedLocation.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to get locations. Error message: ${result.error.message}`);
        return;
      }
      const places = result.value;
      if (places && places.length > 0) {
        result.value.forEach(function(place) {
          console.log(`Location: ${place.displayName} (type: ${place.locationIdentifier.type})`);
          if (place.locationIdentifier.type === Office.MailboxEnums.LocationType.Room) {
            console.log("Email address: " + place.emailAddress);
          }
        });
      } else {
        console.log("There are no locations.");
      }
    });
'Office.EnhancedLocation#removeAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml

    const locations = [
      {
        id: "Contoso",
        type: Office.MailboxEnums.LocationType.Custom
      },
      {
        id: "room500@test.com",
        type: Office.MailboxEnums.LocationType.Room
      }
    ];

    Office.context.mailbox.item.enhancedLocation.removeAsync(locations, (result)
    => {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log(`Successfully removed locations ${JSON.stringify(locations)}`);
      } else {
        console.error(`Failed to remove locations. Error message: ${result.error.message}`);
      }
    });
'Office.From#getAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-from-message-compose.yaml

    Office.context.mailbox.item.from.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const msgFrom = asyncResult.value;
        console.log("Message from: " + msgFrom.displayName + " (" + msgFrom.emailAddress + ")");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.InternetHeaders#getAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/70-mime-headers/manage-custom-internet-headers-message-compose.yaml

    Office.context.mailbox.item.internetHeaders.getAsync(
      ["preferred-fruit", "preferred-vegetable", "best-vegetable", "nonexistent-header"],
      function (asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Selected headers: " + JSON.stringify(asyncResult.value));
        } else {
          console.log("Error getting selected headers: " + JSON.stringify(asyncResult.error));
        }
      }
    );
'Office.InternetHeaders#removeAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/70-mime-headers/manage-custom-internet-headers-message-compose.yaml

    Office.context.mailbox.item.internetHeaders.removeAsync(
      ["best-vegetable", "nonexistent-header"],
      function (asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Successfully removed selected headers");
        } else {
          console.log("Error removing selected headers: " + JSON.stringify(asyncResult.error));
        }
      }
    );
'Office.InternetHeaders#setAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/70-mime-headers/manage-custom-internet-headers-message-compose.yaml

    Office.context.mailbox.item.internetHeaders.setAsync(
      { "preferred-fruit": "orange", "preferred-vegetable": "broccoli", "best-vegetable": "spinach" },
      function (asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Successfully set headers");
        } else {
          console.log("Error setting headers: " + JSON.stringify(asyncResult.error));
        }
      }

    );
'Office.IsAllDayEvent#getAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/calendar-properties-apis.yaml

    Office.context.mailbox.item.isAllDayEvent.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Is this an all-day event? " + asyncResult.value);
      } else {
        console.log("Failed to get if this is an all-day event. Error: " + JSON.stringify(asyncResult.error));
      }
    });
'Office.IsAllDayEvent#setAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/calendar-properties-apis.yaml

    Office.context.mailbox.item.isAllDayEvent.setAsync(true,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log("Failed to set all-day event: " + JSON.stringify(asyncResult.error));
      } else {
        console.log("Appointment set to all-day event.");
      }
    });
'Office.Item:interface':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-item-type.yaml

    const itemType = Office.context.mailbox.item.itemType;

    switch (itemType) {
        case Office.MailboxEnums.ItemType.Appointment:
            console.log(`Current item is an ${itemType}.`);
            break;
        case Office.MailboxEnums.ItemType.Message:
            console.log(`Current item is a ${itemType}. A message could be an email, meeting request, meeting response, or meeting cancellation.`);
            break;
    }
'Office.Location#getAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-location-appointment-organizer.yaml

    Office.context.mailbox.item.location.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Appointment location: ${result.value}`);
    });
'Office.Location#setAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-location-appointment-organizer.yaml

    const location = "my office";

    Office.context.mailbox.item.location.setAsync(location, (result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Successfully set location to ${location}`);
    });
'Office.Mailbox#convertToEwsId:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml

    console.log("EWS URL: " + Office.context.mailbox.ewsUrl);

    const ewsId = Office.context.mailbox.item.itemId;

    console.log("EWS item ID: " + Office.context.mailbox.item.itemId);


    console.log("REST URL: " + Office.context.mailbox.restUrl);

    const restId = Office.context.mailbox.convertToRestId(ewsId,
    Office.MailboxEnums.RestVersion.v2_0);

    console.log("REST item ID: " + restId);


    const ewsId2 = Office.context.mailbox.convertToEwsId(restId,
    Office.MailboxEnums.RestVersion.v2_0);

    console.log("EWS ID (from REST ID): " + ewsId2);
'Office.Mailbox#convertToRestId:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/basic-rest-cors.yaml

    Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function
    (result) {
        const ewsId = Office.context.mailbox.item.itemId;
        const token = result.value;
        const restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
        const getMessageUrl = Office.context.mailbox.restUrl + '/v2.0/me/messages/' + restId;
                
        const xhr = new XMLHttpRequest();
        xhr.open('GET', getMessageUrl);
        xhr.setRequestHeader("Authorization", "Bearer " + token);
        xhr.onload = function (e) {
            console.log(this.response);
        }
        xhr.send();
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml

    console.log("EWS URL: " + Office.context.mailbox.ewsUrl);

    const ewsId = Office.context.mailbox.item.itemId;

    console.log("EWS item ID: " + Office.context.mailbox.item.itemId);


    console.log("REST URL: " + Office.context.mailbox.restUrl);

    const restId = Office.context.mailbox.convertToRestId(ewsId,
    Office.MailboxEnums.RestVersion.v2_0);

    console.log("REST item ID: " + restId);


    const ewsId2 = Office.context.mailbox.convertToEwsId(restId,
    Office.MailboxEnums.RestVersion.v2_0);

    console.log("EWS ID (from REST ID): " + ewsId2);
'Office.Mailbox#displayAppointmentForm:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-existing-appointment.yaml

    const itemId = $("#itemId").val();

    Office.context.mailbox.displayAppointmentForm(itemId);
'Office.Mailbox#displayAppointmentFormAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-existing-appointment.yaml

    const itemId = $("#itemId").val();


    // The async version will return error 9049 if the item is not found.

    // The async version is only available starting with requirement set 1.9.

    Office.context.mailbox.displayAppointmentFormAsync(itemId,
    function(asyncResult) {
      console.log("Result: " + JSON.stringify(asyncResult));
    });
'Office.Mailbox#displayMessageForm:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-existing-message.yaml

    const itemId = $("#itemId").val();

    Office.context.mailbox.displayMessageForm(itemId);
'Office.Mailbox#displayMessageFormAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-existing-message.yaml

    const itemId = $("#itemId").val();


    // The async version will return error 9049 if the item is not found.

    // The async version is only available starting with requirement set 1.9.

    Office.context.mailbox.displayMessageFormAsync(itemId, function
    (asyncResult) {
     console.log("Result: " + JSON.stringify(asyncResult));
    });
'Office.Mailbox#displayNewAppointmentForm:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-new-appointment.yaml

    const start = new Date();

    const end = new Date();

    end.setHours(start.getHours() + 1);


    Office.context.mailbox.displayNewAppointmentForm({
      requiredAttendees: ["bob@contoso.com"],
      optionalAttendees: ["sam@contoso.com"],
      start: start,
      end: end,
      location: "Home",
      subject: "meeting",
      resources: ["projector@contoso.com"],
      body: "Hello World!"
    });
'Office.Mailbox#displayNewAppointmentFormAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-new-appointment.yaml

    const start = new Date();

    const end = new Date();

    end.setHours(start.getHours() + 1);


    // The async version is only available starting with requirement set 1.9,

    // and provides a callback when the new appointment form has been created.

    Office.context.mailbox.displayNewAppointmentFormAsync(
      {
        requiredAttendees: ["bob@contoso.com"],
        optionalAttendees: ["sam@contoso.com"],
        start: start,
        end: end,
        location: "Home",
        subject: "meeting",
        resources: ["projector@contoso.com"],
        body: "Hello World!"
      },
      function(asyncResult) {
        console.log(JSON.stringify(asyncResult));
      }
    );
'Office.Mailbox#displayNewMessageForm:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-new-message.yaml

    Office.context.mailbox.displayNewMessageForm({
      toRecipients: Office.context.mailbox.item.to, // Copies the To line from current item
      ccRecipients: ["sam@contoso.com"],
      subject: "Outlook add-ins are cool!",
      htmlBody: 'Hello <b>World</b>!<br/><img src="cid:image.png"></i>',
      attachments: [
        {
          type: "file",
          name: "image.png",
          url: "http://www.cutestpaw.com/wp-content/uploads/2011/11/Cute-Black-Dogs-s.jpg",
          isInline: true
        }
      ]
    });
'Office.Mailbox#displayNewMessageFormAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-new-message.yaml

    // The async version is only available starting with requirement set 1.9,

    // and provides a callback when the new message form has been created.

    Office.context.mailbox.displayNewMessageFormAsync(
      {
        toRecipients: Office.context.mailbox.item.to, // Copies the To line from current item
        ccRecipients: ["sam@contoso.com"],
        subject: "Outlook add-ins are cool!",
        htmlBody: 'Hello <b>World</b>!<br/><img src="cid:image.png"></i>',
        attachments: [
          {
            type: "file",
            name: "image.png",
            url: "http://www.cutestpaw.com/wp-content/uploads/2011/11/Cute-Black-Dogs-s.jpg",
            isInline: true
          }
        ]
      },
      function(asyncResult) {
        console.log(JSON.stringify(asyncResult));
      }
    );
'Office.Mailbox#ewsUrl:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml

    console.log("EWS URL: " + Office.context.mailbox.ewsUrl);

    const ewsId = Office.context.mailbox.item.itemId;

    console.log("EWS item ID: " + Office.context.mailbox.item.itemId);


    console.log("REST URL: " + Office.context.mailbox.restUrl);

    const restId = Office.context.mailbox.convertToRestId(ewsId,
    Office.MailboxEnums.RestVersion.v2_0);

    console.log("REST item ID: " + restId);


    const ewsId2 = Office.context.mailbox.convertToEwsId(restId,
    Office.MailboxEnums.RestVersion.v2_0);

    console.log("EWS ID (from REST ID): " + ewsId2);
'Office.Mailbox#getCallbackTokenAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/basic-rest-cors.yaml

    Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function
    (result) {
        const ewsId = Office.context.mailbox.item.itemId;
        const token = result.value;
        const restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
        const getMessageUrl = Office.context.mailbox.restUrl + '/v2.0/me/messages/' + restId;
                
        const xhr = new XMLHttpRequest();
        xhr.open('GET', getMessageUrl);
        xhr.setRequestHeader("Authorization", "Bearer " + token);
        xhr.onload = function (e) {
            console.log(this.response);
        }
        xhr.send();
    });
'Office.Mailbox#getCallbackTokenAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/user-callback-token.yaml

    Office.context.mailbox.getCallbackTokenAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(`Token retrieval failed with message: ${result.error.message}`);
        } else {
            console.log(result.value);
        }
    });
'Office.Mailbox#getSelectedItemsAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-message-properties.yaml

    // Retrieves the selected messages' properties and logs them to the console.

    Office.context.mailbox.getSelectedItemsAsync((asyncResult) => {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log(asyncResult.error.message);
        return;
      }

      asyncResult.value.forEach((message) => {
        console.log(`Item ID: ${message.itemId}`);
        console.log(`Subject: ${message.subject}`);
        console.log(`Item type: ${message.itemType}`);
        console.log(`Item mode: ${message.itemMode}`);
      });
    });
'Office.Mailbox#getUserIdentityTokenAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/user-identity-token.yaml

    Office.context.mailbox.getUserIdentityTokenAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(`Token retrieval failed with message: ${result.error.message}`);
        } else {
            console.log(result.value);
        }
    });
'Office.Mailbox#makeEwsRequestAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/get-icaluid-as-attendee.yaml

    const ewsId = Office.context.mailbox.item.itemId;

    const request = `<soap:Envelope
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages"
    xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types"
    xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
          <soap:Header><t:RequestServerVersion Version="Exchange2013" /></soap:Header>
          <soap:Body>
            <m:GetItem>
              <m:ItemShape>
                <t:BaseShape>AllProperties</t:BaseShape>
              </m:ItemShape >
              <m:ItemIds>
                <t:ItemId Id="${ewsId}" />
              </m:ItemIds>
            </m:GetItem>
          </soap:Body>
        </soap:Envelope>`;

    Office.context.mailbox.makeEwsRequestAsync(request, (result) => {
      if (result.status === Office.AsyncResultStatus.Failed) {
        console.error(result.error.message);
        return;
      }

      console.log(getUID(result.value));
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/send-message-using-make-ews-request-async.yaml

    const request = '<soap:Envelope
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages"
    xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types"
    xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">'+
        '  <soap:Header><t:RequestServerVersion Version="Exchange2010" /></soap:Header>'+
        '  <soap:Body>'+
        '    <m:CreateItem MessageDisposition="SendAndSaveCopy">'+
        '      <m:SavedItemFolderId><t:DistinguishedFolderId Id="sentitems" /></m:SavedItemFolderId>'+
        '      <m:Items>'+
        '        <t:Message>'+
        '          <t:Subject>Hello, Outlook!</t:Subject>'+
        '          <t:Body BodyType="HTML">This message was sent from a ScriptLab code sample, used from ' + Office.context.mailbox.diagnostics.hostName + ', version ' + Office.context.mailbox.diagnostics.hostVersion + '!</t:Body>'+
        '          <t:ToRecipients>'+
        '            <t:Mailbox><t:EmailAddress>' + Office.context.mailbox.userProfile.emailAddress + '</t:EmailAddress></t:Mailbox>'+
        '          </t:ToRecipients>'+
        '        </t:Message>'+
        '      </m:Items>'+
        '    </m:CreateItem>'+
        '  </soap:Body>'+
        '</soap:Envelope>';

    Office.context.mailbox.makeEwsRequestAsync(request, function (result) {
        console.log(result);
    });
'Office.Mailbox#masterCategories:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-master-categories.yaml

    Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const categories = asyncResult.value;
        if (categories && categories.length > 0) {
          console.log("Master categories:");
          console.log(JSON.stringify(categories));
        } else {
          console.log("There are no categories in the master list.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-master-categories.yaml

    const masterCategoriesToAdd = [
      {
        displayName: "TestCategory",
        color: Office.MailboxEnums.CategoryColor.Preset0
      }
    ];


    Office.context.mailbox.masterCategories.addAsync(masterCategoriesToAdd,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Successfully added categories to master list");
      } else {
        console.log("masterCategories.addAsync call failed with error: " + asyncResult.error.message);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-master-categories.yaml

    const masterCategoriesToRemove = ["TestCategory"];


    Office.context.mailbox.masterCategories.removeAsync(masterCategoriesToRemove,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Successfully removed categories from master list");
      } else {
        console.log("masterCategories.removeAsync call failed with error: " + asyncResult.error.message);
      }
    });
'Office.Mailbox#restUrl:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/basic-rest-cors.yaml

    Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function
    (result) {
        const ewsId = Office.context.mailbox.item.itemId;
        const token = result.value;
        const restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
        const getMessageUrl = Office.context.mailbox.restUrl + '/v2.0/me/messages/' + restId;
                
        const xhr = new XMLHttpRequest();
        xhr.open('GET', getMessageUrl);
        xhr.setRequestHeader("Authorization", "Bearer " + token);
        xhr.onload = function (e) {
            console.log(this.response);
        }
        xhr.send();
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml

    console.log("EWS URL: " + Office.context.mailbox.ewsUrl);

    const ewsId = Office.context.mailbox.item.itemId;

    console.log("EWS item ID: " + Office.context.mailbox.item.itemId);


    console.log("REST URL: " + Office.context.mailbox.restUrl);

    const restId = Office.context.mailbox.convertToRestId(ewsId,
    Office.MailboxEnums.RestVersion.v2_0);

    console.log("REST item ID: " + restId);


    const ewsId2 = Office.context.mailbox.convertToEwsId(restId,
    Office.MailboxEnums.RestVersion.v2_0);

    console.log("EWS ID (from REST ID): " + ewsId2);
'Office.MailboxEnums.ActionType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Adds an informational message with actions to the mail item.

    const id = $("#notificationId").val().toString();


    const itemId = Office.context.mailbox.item.itemId;

    const details = {
      type: Office.MailboxEnums.ItemNotificationMessageType.InsightMessage,
      message: "This is an insight notification with id = " + id,
      icon: "icon1",
      actions: [
        {
          actionText: "Open insight",
          actionType: Office.MailboxEnums.ActionType.ShowTaskPane,
          // Identify whether the current mail item is in read or compose mode to set the appropriate commandId value.
          commandId: (itemId == undefined ? "PG.HelpCommand.Compose" : "PG.HelpCommand.Read"),
          contextData: { a: "aValue", b: "bValue" }
        }
      ]
    };


    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
'Office.MailboxEnums.AppointmentSensitivityType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/calendar-properties-apis.yaml

    Office.context.mailbox.item.sensitivity.setAsync(
      Office.MailboxEnums.AppointmentSensitivityType.Confidential,
      function callback(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Failed) {
          console.log("Failed to set appointment sensitivity: " + JSON.stringify(asyncResult.error));
        } else {
          console.log("Successfully set appointment sensitivity.");
        }
      }
    );
'Office.MailboxEnums.AttachmentContentFormat:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/get-attachment-content.yaml

    function handleAttachmentsCallback(result) {
      // Identifies whether the attachment is a Base64-encoded string, .eml file, .icalendar file, or a URL.
      switch (result.value.format) {
        case Office.MailboxEnums.AttachmentContentFormat.Base64:
          // Handle file attachment.
          console.log("Attachment is a Base64-encoded string.");
          break;
        case Office.MailboxEnums.AttachmentContentFormat.Eml:
          // Handle email item attachment.
          console.log("Attachment is a message.");
          break;
        case Office.MailboxEnums.AttachmentContentFormat.ICalendar:
          // Handle .icalender attachment.
          console.log("Attachment is a calendar item.");
          break;
        case Office.MailboxEnums.AttachmentContentFormat.Url:
          // Handle cloud attachment.
          console.log("Attachment is a cloud attachment.");
          break;
        default:
        // Handle attachment formats that aren't supported.
      }

      console.log(result.value.content);
    }
'Office.MailboxEnums.AttachmentType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    Office.context.mailbox.item.getAttachmentsAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(result.error.message);
        } else {
            if (result.value.length > 0) {
                for (let i = 0; i < result.value.length; i++) {
                    const attachment = result.value[i];
                    console.log("ID: " + attachment.id + "\n" +
                        "Name: " + attachment.name + "\n" +
                        "Size: " + attachment.size + "\n" +
                        "isInline: " + attachment.isInline);
                    switch (attachment.attachmentType) {
                        case Office.MailboxEnums.AttachmentType.Cloud:
                            console.log("Attachment type: Attachment is stored in a cloud location.");
                            break;
                        case Office.MailboxEnums.AttachmentType.File:
                            console.log("Attachment type: Attachment is a file.");
                            break;
                        case Office.MailboxEnums.AttachmentType.Item:
                            console.log("Attachment type: Attachment is an Exchange item.");
                            break;
                    }
                }
            }
            else {
                console.log("No attachments on this message.");
            }
        }
    });
'Office.MailboxEnums.CategoryColor:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-master-categories.yaml

    const masterCategoriesToAdd = [
      {
        displayName: "TestCategory",
        color: Office.MailboxEnums.CategoryColor.Preset0
      }
    ];


    Office.context.mailbox.masterCategories.addAsync(masterCategoriesToAdd,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Successfully added categories to master list");
      } else {
        console.log("masterCategories.addAsync call failed with error: " + asyncResult.error.message);
      }
    });
'Office.MailboxEnums.ComposeType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/work-with-client-signatures.yaml

    // Get the compose type of the current message.

    Office.context.mailbox.item.getComposeTypeAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log(
          "getComposeTypeAsync succeeded with composeType: " +
            asyncResult.value.composeType +
            " and coercionType: " +
            asyncResult.value.coercionType
        );
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MailboxEnums.Days:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-set-recurrence-appointment-organizer.yaml

    // Important: Can only set the recurrence pattern of an appointment series.


    const currentDate = new Date();

    let seriesTimeObject: Office.SeriesTime;

    // Set series start date to tomorrow.

    seriesTimeObject.setStartDate(currentDate.getFullYear(),
    currentDate.getMonth(), currentDate.getDay() + 1);

    // Set series end date to one year from now.

    seriesTimeObject.setEndDate(currentDate.getFullYear() + 1,
    currentDate.getMonth() + 1, currentDate.getDay());

    // Set start time to 1:30 PM.

    seriesTimeObject.setStartTime(13, 30);

    // Set duration to 30 minutes.

    seriesTimeObject.setDuration(30);


    const pattern: Office.Recurrence = {
      seriesTime: seriesTimeObject,
      recurrenceType: Office.MailboxEnums.RecurrenceType.Yearly,
      recurrenceProperties: {
        interval: 1,
        dayOfWeek: Office.MailboxEnums.Days.Tue,
        weekNumber: Office.MailboxEnums.WeekNumber.Second,
        month: Office.MailboxEnums.Month.Sep
      },
      recurrenceTimeZone: { name: Office.MailboxEnums.RecurrenceTimeZone.PacificStandardTime }
    };


    Office.context.mailbox.item.recurrence.setAsync(pattern, (asyncResult) => {
      if (asyncResult.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to set recurrence. Error: ${asyncResult.error.message}`);
        return;
      }
      console.log(`Succeeded in setting recurrence pattern ${JSON.stringify(pattern)}`);
    });
'Office.MailboxEnums.DelegatePermissions:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on an appointment from a shared folder.");
      return;
    }


    Office.context.mailbox.getCallbackTokenAsync({ isRest: true },
    function(result) {
      if (result.status === Office.AsyncResultStatus.Succeeded && result.value !== "") {
        Office.context.mailbox.item.getSharedPropertiesAsync(
          {
            // Pass auth token along.
            asyncContext: result.value
          },
          function(result2) {
            let sharedProperties = result2.value;
            let delegatePermissions = sharedProperties.delegatePermissions;

            // Determine if user has the appropriate permission to do the operation.
            if ((delegatePermissions & Office.MailboxEnums.DelegatePermissions.Read) != 0) {
              const ewsId = Office.context.mailbox.item.itemId;
              const restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
              let rest_url =
                sharedProperties.targetRestUrl + "/v2.0/users/" + sharedProperties.targetMailbox + "/events/" + restId;

              $.ajax({
                url: rest_url,
                dataType: "json",
                headers: { Authorization: "Bearer " + result2.asyncContext }
              })
                .done(function(response) {
                  console.log(response);
                })
                .fail(function(error) {
                  console.error(error);
                });
            }
          }
        );
      }
    });
'Office.MailboxEnums.EntityType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/basic-entities.yaml

    console.log(Office.context.mailbox.item.getEntitiesByType(Office.MailboxEnums.EntityType.Address));
'Office.MailboxEnums.ItemNotificationMessageType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Adds an error notification to the mail item.

    const id = $("#notificationId").val().toString();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.ErrorMessage,
        message: "Error notification message with id = " + id
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
'Office.MailboxEnums.ItemType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-item-type.yaml

    const itemType = Office.context.mailbox.item.itemType;

    switch (itemType) {
        case Office.MailboxEnums.ItemType.Appointment:
            console.log(`Current item is an ${itemType}.`);
            break;
        case Office.MailboxEnums.ItemType.Message:
            console.log(`Current item is a ${itemType}. A message could be an email, meeting request, meeting response, or meeting cancellation.`);
            break;
    }
'Office.MailboxEnums.LocationType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml

    const locations = [
      {
        id: "Contoso",
        type: Office.MailboxEnums.LocationType.Custom
      },
      {
        id: "room500@test.com",
        type: Office.MailboxEnums.LocationType.Room
      }
    ];

    Office.context.mailbox.item.enhancedLocation.addAsync(locations, (result) =>
    {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log(`Successfully added locations ${JSON.stringify(locations)}`);
      } else {
        console.error(`Failed to add locations. Error message: ${result.error.message}`);
      }
    });
'Office.MailboxEnums.Month:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-set-recurrence-appointment-organizer.yaml

    // Important: Can only set the recurrence pattern of an appointment series.


    const currentDate = new Date();

    let seriesTimeObject: Office.SeriesTime;

    // Set series start date to tomorrow.

    seriesTimeObject.setStartDate(currentDate.getFullYear(),
    currentDate.getMonth(), currentDate.getDay() + 1);

    // Set series end date to one year from now.

    seriesTimeObject.setEndDate(currentDate.getFullYear() + 1,
    currentDate.getMonth() + 1, currentDate.getDay());

    // Set start time to 1:30 PM.

    seriesTimeObject.setStartTime(13, 30);

    // Set duration to 30 minutes.

    seriesTimeObject.setDuration(30);


    const pattern: Office.Recurrence = {
      seriesTime: seriesTimeObject,
      recurrenceType: Office.MailboxEnums.RecurrenceType.Yearly,
      recurrenceProperties: {
        interval: 1,
        dayOfWeek: Office.MailboxEnums.Days.Tue,
        weekNumber: Office.MailboxEnums.WeekNumber.Second,
        month: Office.MailboxEnums.Month.Sep
      },
      recurrenceTimeZone: { name: Office.MailboxEnums.RecurrenceTimeZone.PacificStandardTime }
    };


    Office.context.mailbox.item.recurrence.setAsync(pattern, (asyncResult) => {
      if (asyncResult.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to set recurrence. Error: ${asyncResult.error.message}`);
        return;
      }
      console.log(`Succeeded in setting recurrence pattern ${JSON.stringify(pattern)}`);
    });
'Office.MailboxEnums.OWAView:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-diagnostic-information.yaml

    // This function gets a mailbox's diagnostic information, such as Outlook
    client and version, and logs it to the console.

    const diagnostics = Office.context.mailbox.diagnostics;

    console.log(`Client application: ${diagnostics.hostName}`);

    console.log(`Client version: ${diagnostics.hostVersion}`);


    switch (diagnostics.OWAView) {
      case undefined:
        console.log("Current view (Outlook on the web only): Not applicable. An Outlook desktop client is in use.");
        break;
      case Office.MailboxEnums.OWAView.OneColumnNarrow:
        console.log("Current view (Outlook on the web only): Viewed from an older generation mobile phone");
        break;
      case Office.MailboxEnums.OWAView.OneColumn:
        console.log("Current view (Outlook on the web only): Viewed from a newer generation mobile phone");
        break;
      case Office.MailboxEnums.OWAView.TwoColumns:
        console.log("Current view (Outlook on the web only): Viewed from a tablet");
        break;
      case Office.MailboxEnums.OWAView.ThreeColumns:
        console.log("Current view (Outlook on the web only): Viewed from a desktop computer");
        break;
    }
'Office.MailboxEnums.RecipientType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-to-message-read.yaml

    const msgTo = Office.context.mailbox.item.to;

    const distributionLists = [];

    const externalRecipients = [];

    const internalRecipients = [];

    const otherRecipients = [];

    for (let i = 0; i < msgTo.length; i++) {
        switch (msgTo[i].recipientType) {
        case Office.MailboxEnums.RecipientType.DistributionList:
            distributionLists.push(msgTo[i]);
            break;
        case Office.MailboxEnums.RecipientType.ExternalUser:
            externalRecipients.push(msgTo[i]);
            break;
        case Office.MailboxEnums.RecipientType.User:
            internalRecipients.push(msgTo[i]);
            break;
        case Office.MailboxEnums.RecipientType.Other:
            otherRecipients.push(msgTo[i]);
        }
    }


    if (distributionLists.length > 0) {
        console.log("Distribution Lists:");
        distributionLists.forEach((recipient) => console.log(`${recipient.displayName}, ${recipient.emailAddress}`));
    }


    if (externalRecipients.length > 0) {
        console.log("External Recipients:");
        externalRecipients.forEach((recipient) => console.log(`${recipient.displayName}, ${recipient.emailAddress}`));
    }


    if (internalRecipients.length > 0) {
        console.log("Internal Recipients:");
        internalRecipients.forEach((recipient) => console.log(`${recipient.displayName}, ${recipient.emailAddress}`));
    }


    if (otherRecipients.length > 0) {
        console.log("Other Recipients:");
        otherRecipients.forEach((recipient) => console.log(`${recipient.displayName}, ${recipient.emailAddress}`));
    }
'Office.MailboxEnums.RecurrenceTimeZone:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-set-recurrence-appointment-organizer.yaml

    // Important: Can only set the recurrence pattern of an appointment series.


    const currentDate = new Date();

    let seriesTimeObject: Office.SeriesTime;

    // Set series start date to tomorrow.

    seriesTimeObject.setStartDate(currentDate.getFullYear(),
    currentDate.getMonth(), currentDate.getDay() + 1);

    // Set series end date to one year from now.

    seriesTimeObject.setEndDate(currentDate.getFullYear() + 1,
    currentDate.getMonth() + 1, currentDate.getDay());

    // Set start time to 1:30 PM.

    seriesTimeObject.setStartTime(13, 30);

    // Set duration to 30 minutes.

    seriesTimeObject.setDuration(30);


    const pattern: Office.Recurrence = {
      seriesTime: seriesTimeObject,
      recurrenceType: Office.MailboxEnums.RecurrenceType.Yearly,
      recurrenceProperties: {
        interval: 1,
        dayOfWeek: Office.MailboxEnums.Days.Tue,
        weekNumber: Office.MailboxEnums.WeekNumber.Second,
        month: Office.MailboxEnums.Month.Sep
      },
      recurrenceTimeZone: { name: Office.MailboxEnums.RecurrenceTimeZone.PacificStandardTime }
    };


    Office.context.mailbox.item.recurrence.setAsync(pattern, (asyncResult) => {
      if (asyncResult.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to set recurrence. Error: ${asyncResult.error.message}`);
        return;
      }
      console.log(`Succeeded in setting recurrence pattern ${JSON.stringify(pattern)}`);
    });
'Office.MailboxEnums.RecurrenceType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-set-recurrence-appointment-organizer.yaml

    // Important: Can only set the recurrence pattern of an appointment series.


    const currentDate = new Date();

    let seriesTimeObject: Office.SeriesTime;

    // Set series start date to tomorrow.

    seriesTimeObject.setStartDate(currentDate.getFullYear(),
    currentDate.getMonth(), currentDate.getDay() + 1);

    // Set series end date to one year from now.

    seriesTimeObject.setEndDate(currentDate.getFullYear() + 1,
    currentDate.getMonth() + 1, currentDate.getDay());

    // Set start time to 1:30 PM.

    seriesTimeObject.setStartTime(13, 30);

    // Set duration to 30 minutes.

    seriesTimeObject.setDuration(30);


    const pattern: Office.Recurrence = {
      seriesTime: seriesTimeObject,
      recurrenceType: Office.MailboxEnums.RecurrenceType.Yearly,
      recurrenceProperties: {
        interval: 1,
        dayOfWeek: Office.MailboxEnums.Days.Tue,
        weekNumber: Office.MailboxEnums.WeekNumber.Second,
        month: Office.MailboxEnums.Month.Sep
      },
      recurrenceTimeZone: { name: Office.MailboxEnums.RecurrenceTimeZone.PacificStandardTime }
    };


    Office.context.mailbox.item.recurrence.setAsync(pattern, (asyncResult) => {
      if (asyncResult.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to set recurrence. Error: ${asyncResult.error.message}`);
        return;
      }
      console.log(`Succeeded in setting recurrence pattern ${JSON.stringify(pattern)}`);
    });
'Office.MailboxEnums.ResponseType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-all-attendees.yaml

    function organizeByResponse(attendees) {
      const accepted = [];
      const declined = [];
      const noResponse = [];
      const tentative = [];
      attendees.forEach(attendee => {
        switch (attendee.appointmentResponse) {
          case Office.MailboxEnums.ResponseType.Accepted:
            accepted.push(attendee);
            break;
          case Office.MailboxEnums.ResponseType.Declined:
            declined.push(attendee);
            break;
          case Office.MailboxEnums.ResponseType.None:
            noResponse.push(attendee);
            break;
          case Office.MailboxEnums.ResponseType.Tentative:
            tentative.push(attendee);
            break;
          case Office.MailboxEnums.ResponseType.Organizer:
            console.log(`Organizer: ${attendee.displayName}, ${attendee.emailAddress}`);
            break;
        } 
      });

      // List attendees by their response.
      console.log("Accepted: ");
      printAttendees(accepted);
      console.log("Declined: ");
      printAttendees(declined);
      console.log("Tentative: ");
      printAttendees(tentative);
      console.log("No response: ");
      printAttendees(noResponse);
    }
'Office.MailboxEnums.RestVersion:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/basic-rest-cors.yaml

    Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function
    (result) {
        const ewsId = Office.context.mailbox.item.itemId;
        const token = result.value;
        const restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
        const getMessageUrl = Office.context.mailbox.restUrl + '/v2.0/me/messages/' + restId;
                
        const xhr = new XMLHttpRequest();
        xhr.open('GET', getMessageUrl);
        xhr.setRequestHeader("Authorization", "Bearer " + token);
        xhr.onload = function (e) {
            console.log(this.response);
        }
        xhr.send();
    });
'Office.MailboxEnums.SourceProperty:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/20-item-body/get-selected-data.yaml

    Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const text = asyncResult.value.data;
        const prop = asyncResult.value.sourceProperty;
        console.log("Selected text in " + prop + ": " + text);
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MailboxEnums.WeekNumber:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-set-recurrence-appointment-organizer.yaml

    // Important: Can only set the recurrence pattern of an appointment series.


    const currentDate = new Date();

    let seriesTimeObject: Office.SeriesTime;

    // Set series start date to tomorrow.

    seriesTimeObject.setStartDate(currentDate.getFullYear(),
    currentDate.getMonth(), currentDate.getDay() + 1);

    // Set series end date to one year from now.

    seriesTimeObject.setEndDate(currentDate.getFullYear() + 1,
    currentDate.getMonth() + 1, currentDate.getDay());

    // Set start time to 1:30 PM.

    seriesTimeObject.setStartTime(13, 30);

    // Set duration to 30 minutes.

    seriesTimeObject.setDuration(30);


    const pattern: Office.Recurrence = {
      seriesTime: seriesTimeObject,
      recurrenceType: Office.MailboxEnums.RecurrenceType.Yearly,
      recurrenceProperties: {
        interval: 1,
        dayOfWeek: Office.MailboxEnums.Days.Tue,
        weekNumber: Office.MailboxEnums.WeekNumber.Second,
        month: Office.MailboxEnums.Month.Sep
      },
      recurrenceTimeZone: { name: Office.MailboxEnums.RecurrenceTimeZone.PacificStandardTime }
    };


    Office.context.mailbox.item.recurrence.setAsync(pattern, (asyncResult) => {
      if (asyncResult.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to set recurrence. Error: ${asyncResult.error.message}`);
        return;
      }
      console.log(`Succeeded in setting recurrence pattern ${JSON.stringify(pattern)}`);
    });
'Office.MasterCategories#addAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-master-categories.yaml

    const masterCategoriesToAdd = [
      {
        displayName: "TestCategory",
        color: Office.MailboxEnums.CategoryColor.Preset0
      }
    ];


    Office.context.mailbox.masterCategories.addAsync(masterCategoriesToAdd,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Successfully added categories to master list");
      } else {
        console.log("masterCategories.addAsync call failed with error: " + asyncResult.error.message);
      }
    });
'Office.MasterCategories#getAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-master-categories.yaml

    Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const categories = asyncResult.value;
        if (categories && categories.length > 0) {
          console.log("Master categories:");
          console.log(JSON.stringify(categories));
        } else {
          console.log("There are no categories in the master list.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MasterCategories#removeAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-master-categories.yaml

    const masterCategoriesToRemove = ["TestCategory"];


    Office.context.mailbox.masterCategories.removeAsync(masterCategoriesToRemove,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Successfully removed categories from master list");
      } else {
        console.log("masterCategories.removeAsync call failed with error: " + asyncResult.error.message);
      }
    });
'Office.MessageCompose#addFileAttachmentAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    const attachmentUrl = $("#attachmentUrl").val();

    Office.context.mailbox.item.addFileAttachmentAsync(
        attachmentUrl,
        getFileName(attachmentUrl),
        { "asyncContext" : { var1: 1, var2: true } },
        function(result) { console.log(result); });
'Office.MessageCompose#addFileAttachmentFromBase64Async:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    base64String =
    "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAAAsSAAALEgHS3X78AAACRUlEQVRYw82XzXHbMBCFP2F8tzsQc8Ixyh0zoiuIXIGdCsxUYKqC0B04FdiuwMoM7mGOOIXqQGoAymXhgSX+itJM9kIRFLAP+3YXD5Pdbscx5oxaAIW8Ztr6l2PWmQwF4IyaieP53qdfAqQ8CwBn1JU4vpWhrbxXQA5MZfynANmcDIAzKgcy4FKGXsVJFf3nLgKyBQptfT4KQMRz2N0fcbxqmRMDWXflx0VPnrdArq0vekQ1Dv0UeHZGNebHhwjU8AzwKM43RyZnbAf58Q6ghudeWd0Aus0+5EcMIIRi3beua0D3Nm39BEAx3i7HTK4DEBJn5YxKOnaRA5+ErpMBWMpzDvx1RuXCcxOISlufAjfC7zgAsqsvUvMAD0ApPaEtGi9AIlUzKgJo60tt/SyKRkzLrAXERluf7W1gOICWaMyB386oooOWsIHvXbSoHuUSFovtHqicUVnH3EJoeT0aQEf5/XBGlc6otIOWBXAtPeZkAIJ9Bt6cUU9tZautX2nrk3MACHYr1ZKProKRtDw4o8pzAPjWo+NtpXTTvoteDDg8noDAcwbcRedAkGdFXyk2GEDcegVAFp2gyVDHjRQ4o6q2smoqtR5Hd+qMqtoALCWUUymr1m43QMZfOaMK4C0SrMsDANJ2E5FNcbdbjHC+ENl+H0myJFbLtaq4Rt8dyPBYRQV1E40nMv9rl7xrOw3DGb+Whcqu3i/OM6CUOWvgRlufNmnLYy4m77uJI7AXtdNcTDrU71LEyv7v01/N/ovL6bmu5/8A1tNWZldH0W4AAAAASUVORK5CYII=";

    Office.context.mailbox.item.addFileAttachmentFromBase64Async(
        base64String,
        "logo.png",
        { isInline: false },
        function(result) { console.log(result); });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/work-with-client-signatures.yaml

    // Set the signature for the current item with inline image.

    const modIcon1Base64 =
    "iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA2ZpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYxIDY0LjE0MDk0OSwgMjAxMC8xMi8wNy0xMDo1NzowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpDRDMxMDg1MjBCNDZFMTExODE2MkM1RUI2M0M4MDYxRCIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpFMTUxQjgyRjQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpFMTUxQjgyRTQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M1LjEgV2luZG93cyI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkQxMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkNEMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+uC/WfAAAAehJREFUeNpilCzfwEAEkAbiECA2A2J1IOaHin8E4ptAfBaIVwLxU0IGMRKw0B6IW4DYhoE4cASIK6E0VsCEQ1wUiNcB8QESLGOAqj0MxBuhZhBloS4QnwHiQAbygR/UDF1CFupCXSjHQDmQg5qli8tCUBBsQUoQ1AD8UDNFsVk4n0o+w+bT+egWglKjNymmeGhLkqLcG2oHAwtUoIuQDj5OVgZPLUmwRe5aEmAxqYqNpFgKssOcCeplM0KqdST5GfpDDRm0JfkYrj3/SE7QguyQY4ImYYLgCtAS10kHGMw6dzNsv/qC7OwCClJXYlR++v6b4er3j5QmIFcmaNlIL6AOslCIjhYKMTHQGTBBqxh6gXcgC6/R0cKbIAv30dHCfaAKGJTxHxJSqS3Fz9DkowNmywpyMcgA8fF7b8D8VWcfM6w8+4gYC+VB+RCk8hSh0gaUD4/dewvlvUWRe/z+GzGWgex4BGtiOAHxXhoHpzMoSGHZAhSPW2lo2VZYWkHOh4nEtLrIAE+hZmNUwK+B2BOIv1PRsu9QM1/jatNcBtVZ0IREKXgENesyoVYbzNIdFFi2A5tl+NqlL6BB4QBNzsSCU1A9nlAzMAALAQMOQl0qB23qWwKxIlIrDBQ394H4OBCvISYqAAIMACVibHDqsO7zAAAAAElFTkSuQmCC";

    Office.context.mailbox.item.addFileAttachmentFromBase64Async(
      modIcon1Base64,
      "myImage.png",
      { isInline: true },
      function(result) {
        if (result.status == Office.AsyncResultStatus.Succeeded) {
          const signature = $("#signature").val() + "<img src='cid:myImage.png'>";
          console.log(`Setting signature to "${signature}".`);
          Office.context.mailbox.item.body.setSignatureAsync(
            signature,
            { coercionType: "html" },
            function(asyncResult) {
              console.log(`setSignatureAsync: ${asyncResult.status}`);
            }
          );
        } else {
          console.error(`addFileAttachmentFromBase64Async: ${result.error}`);
        }
      }
    );
'Office.MessageCompose#addItemAttachmentAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    const attachmentItemId = $("#attachmentItemId").val();

    Office.context.mailbox.item.addItemAttachmentAsync(
        attachmentItemId,
        "My attachment",
        { "asyncContext" : { var3: 3, var4: false } },
        function(result) { console.log(result); });
'Office.MessageCompose#bcc:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-bcc-message-compose.yaml

    Office.context.mailbox.item.bcc.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const msgBcc = asyncResult.value;
        console.log("Message being blind-copied to:");
        for (let i = 0; i < msgBcc.length; i++) {
          console.log(msgBcc[i].displayName + " (" + msgBcc[i].emailAddress + ")");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-bcc-message-compose.yaml

    const email = $("#emailBcc")
      .val()
      .toString();
    const emailArray = [email];

    Office.context.mailbox.item.bcc.setAsync(emailArray, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting Bcc field.");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageCompose#categories:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const categories = asyncResult.value;
        if (categories && categories.length > 0) {
          console.log("Categories assigned to this item:");
          console.log(JSON.stringify(categories));
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    // Note: In order for you to successfully add a category,

    // it must be in the mailbox categories master list.


    Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const masterCategories = asyncResult.value;
        if (masterCategories && masterCategories.length > 0) {
          // Grab the first category from the master list.
          const categoryToAdd = [masterCategories[0].displayName];
          Office.context.mailbox.item.categories.addAsync(categoryToAdd, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully assigned category '${categoryToAdd}' to item.`);
            } else {
              console.log("categories.addAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories in the master list on this mailbox. You can add categories using Office.context.mailbox.masterCategories.addAsync.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const categories = asyncResult.value;
        if (categories && categories.length > 0) {
          // Grab the first category assigned to this item.
          const categoryToRemove = [categories[0].displayName];
          Office.context.mailbox.item.categories.removeAsync(categoryToRemove, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully unassigned category '${categoryToRemove}' from this item.`);
            } else {
              console.log("categories.removeAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageCompose#cc:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-cc-message-compose.yaml

    Office.context.mailbox.item.cc.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const msgCc = asyncResult.value;
        console.log("Message being copied to:");
        for (let i = 0; i < msgCc.length; i++) {
          console.log(msgCc[i].displayName + " (" + msgCc[i].emailAddress + ")");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-cc-message-compose.yaml

    const email = $("#emailCc")
      .val()
      .toString();
    const emailArray = [email];

    Office.context.mailbox.item.cc.setAsync(emailArray, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting Cc field.");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageCompose#close:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/25-item-save-and-close/close.yaml

    Office.context.mailbox.item.close();
'Office.MessageCompose#closeAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/close-async.yaml

    // This snippet closes the current message being composed and discards any
    unsaved changes when the optional property, discardItem, is set to true.

    // The API call works on a new message being composed, a reply, or an
    existing draft.

    // When discardItem is set to false or isn't defined on a new message with
    unsaved changes, the user is prompted to save a draft, discard the changes,
    or cancel the close operation.

    Office.context.mailbox.item.closeAsync(
      { discardItem: true },
      (asyncResult) => {
        if (asyncResult.status === Office.AsyncResultStatus.Failed) {
          console.log("Action failed with error: " + asyncResult.error.message);
          return;
        }
      });
'Office.MessageCompose#conversationId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-conversation-id-message.yaml

    console.log(`Conversation ID:
    ${Office.context.mailbox.item.conversationId}`);
'Office.MessageCompose#delayDeliveryTime:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/delay-message-delivery.yaml

    function setDeliveryDate(minutes) {
      // This snippet sets the delivery date and time of a message.
      const currentTime = new Date().getTime();
      const milliseconds = totalDelay * 60000;
      const timeDelay = new Date(currentTime + milliseconds);
      Office.context.mailbox.item.delayDeliveryTime.setAsync(timeDelay, (asyncResult) => {
        if (asyncResult.status === Office.AsyncResultStatus.Failed) {
          console.log(asyncResult.error.message);
          return;
        }

        if (minutes === 1440) {
          console.log(`Delayed delivery by an additional one day.`);
        } else {
          console.log(`Delayed delivery by an additional ${minutes} minutes.`);
        }
      });
    }
'Office.MessageCompose#disableClientSignatureAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/work-with-client-signatures.yaml

    // Disable the client signature.

    Office.context.mailbox.item.disableClientSignatureAsync(function(asyncResult)
    {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("disableClientSignatureAsync succeeded");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageCompose#from:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-from-message-compose.yaml

    Office.context.mailbox.item.from.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const msgFrom = asyncResult.value;
        console.log("Message from: " + msgFrom.displayName + " (" + msgFrom.emailAddress + ")");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageCompose#getAttachmentContentAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/get-attachment-content.yaml

    // Gets the attachments of the current message or appointment in compose
    mode.

    const options = { asyncContext: { currentItem: item } };

    // The getAttachmentsAsync call can only be used in compose mode.

    item.getAttachmentsAsync(options, callback);


    function callback(result) {
      if (result.status === Office.AsyncResultStatus.Failed) {
        console.log(result.error.message);
        return;
      }

      if (result.value.length <= 0) {
        console.log("Mail item has no attachments.");
        return;
      }

      for (let i = 0; i < result.value.length; i++) {
        // Log the attachment type and its contents to the console.
        result.asyncContext.currentItem.getAttachmentContentAsync(result.value[i].id, handleAttachmentsCallback);
      }
    }
'Office.MessageCompose#getAttachmentsAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    Office.context.mailbox.item.getAttachmentsAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(result.error.message);
        } else {
            if (result.value.length > 0) {
                for (let i = 0; i < result.value.length; i++) {
                    const attachment = result.value[i];
                    console.log("ID: " + attachment.id + "\n" +
                        "Name: " + attachment.name + "\n" +
                        "Size: " + attachment.size + "\n" +
                        "isInline: " + attachment.isInline);
                    switch (attachment.attachmentType) {
                        case Office.MailboxEnums.AttachmentType.Cloud:
                            console.log("Attachment type: Attachment is stored in a cloud location.");
                            break;
                        case Office.MailboxEnums.AttachmentType.File:
                            console.log("Attachment type: Attachment is a file.");
                            break;
                        case Office.MailboxEnums.AttachmentType.Item:
                            console.log("Attachment type: Attachment is an Exchange item.");
                            break;
                    }
                }
            }
            else {
                console.log("No attachments on this message.");
            }
        }
    });
'Office.MessageCompose#getComposeTypeAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/work-with-client-signatures.yaml

    // Get the compose type of the current message.

    Office.context.mailbox.item.getComposeTypeAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log(
          "getComposeTypeAsync succeeded with composeType: " +
            asyncResult.value.composeType +
            " and coercionType: " +
            asyncResult.value.coercionType
        );
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageCompose#getItemIdAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/item-id-compose.yaml

    Office.context.mailbox.item.getItemIdAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(`getItemIdAsync failed with message: ${result.error.message}`);
        } else {
            console.log(result.value);
        }
    });
'Office.MessageCompose#getSelectedDataAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/20-item-body/get-selected-data.yaml

    Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const text = asyncResult.value.data;
        const prop = asyncResult.value.sourceProperty;
        console.log("Selected text in " + prop + ": " + text);
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageCompose#getSharedPropertiesAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on an item from a shared folder.");
      return;
    }


    Office.context.mailbox.item.getSharedPropertiesAsync(function(result) {
      console.log(result.value);
    });
'Office.MessageCompose#getSharedPropertiesAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on a message from a shared folder.");
      return;
    }


    Office.context.mailbox.getCallbackTokenAsync({ isRest: true },
    function(result) {
      if (result.status === Office.AsyncResultStatus.Succeeded && result.value !== "") {
        Office.context.mailbox.item.getSharedPropertiesAsync(
          {
            // Pass auth token along.
            asyncContext: result.value
          },
          function(result2) {
            let sharedProperties = result2.value;
            let delegatePermissions = sharedProperties.delegatePermissions;

            // Determine if user has the appropriate permission to do the operation.
            if ((delegatePermissions & Office.MailboxEnums.DelegatePermissions.Read) != 0) {
              const ewsId = Office.context.mailbox.item.itemId;
              const restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
              let rest_url =
                sharedProperties.targetRestUrl + "/v2.0/users/" + sharedProperties.targetMailbox + "/messages/" + restId;

              $.ajax({
                url: rest_url,
                dataType: "json",
                headers: { Authorization: "Bearer " + result2.asyncContext }
              })
                .done(function(response) {
                  console.log(response);
                })
                .fail(function(error) {
                  console.error(error);
                });
            }
          }
        );
      }
    });
'Office.MessageCompose#internetHeaders:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/70-mime-headers/manage-custom-internet-headers-message-compose.yaml

    Office.context.mailbox.item.internetHeaders.getAsync(
      ["preferred-fruit", "preferred-vegetable", "best-vegetable", "nonexistent-header"],
      function (asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Selected headers: " + JSON.stringify(asyncResult.value));
        } else {
          console.log("Error getting selected headers: " + JSON.stringify(asyncResult.error));
        }
      }
    );
'Office.MessageCompose#isClientSignatureEnabledAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/work-with-client-signatures.yaml

    // Check if the client signature is currently enabled.

    Office.context.mailbox.item.isClientSignatureEnabledAsync(function(asyncResult)
    {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("isClientSignatureEnabledAsync succeeded with result: " + asyncResult.value);
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageCompose#itemType:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-item-type.yaml

    const itemType = Office.context.mailbox.item.itemType;

    switch (itemType) {
        case Office.MailboxEnums.ItemType.Appointment:
            console.log(`Current item is an ${itemType}.`);
            break;
        case Office.MailboxEnums.ItemType.Message:
            console.log(`Current item is a ${itemType}. A message could be an email, meeting request, meeting response, or meeting cancellation.`);
            break;
    }
'Office.MessageCompose#loadCustomPropertiesAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/15-item-custom-properties/load-set-get-save.yaml

    Office.context.mailbox.item.loadCustomPropertiesAsync(function (result) {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Loaded following custom properties:");
        customProps = result.value;
        const dataKey = Object.keys(customProps)[0];
        const data = customProps[dataKey];
        for (let propertyName in data)
        {
          let propertyValue = data[propertyName];
          console.log(`${propertyName}: ${propertyValue}`);
        }              
      }
      else {
        console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);
      }
    });
'Office.MessageCompose#notificationMessages:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Adds a progress indicator to the mail item.

    const id = $("#notificationId").val().toString();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.ProgressIndicator,
        message: "Progress indicator with id = " + id
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Adds an informational notification to the mail item.

    const id = $("#notificationId").val().toString();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Non-persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: false
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Adds a persistent information notification to the mail item.

    const id = $("#notificationId").val().toString();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: true
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Gets all the notification messages and their keys for the current mail
    item.

    Office.context.mailbox.item.notificationMessages.getAllAsync((asyncResult)
    => {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log(asyncResult.error.message);
        return;
      }

      console.log(asyncResult.value);
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Replaces a notification message of a given key with another message.

    const id = $("#notificationId").val().toString();

    Office.context.mailbox.item.notificationMessages.replaceAsync(
      id,
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Notification message with id = " + id + " has been replaced with an informational message.",
        icon: "icon2",
        persistent: false
      },
      handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Removes a notification message from the current mail item.

    const id = $("#notificationId").val().toString();

    Office.context.mailbox.item.notificationMessages.removeAsync(id,
    handleResult);
'Office.MessageCompose#removeAttachmentAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    Office.context.mailbox.item.removeAttachmentAsync(
        $("#attachmentId").val(),
        { asyncContext : null },
        function(result)
        {
            if (result.status !== Office.AsyncResultStatus.Succeeded) {
                console.error(`${result.error.message}`);
            } else {
                console.log(`Attachment removed successfully.`);
            }
        }
    );
'Office.MessageCompose#sensitivityLabel:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/60-sensitivity-label/sensitivity-label.yaml

    // This snippet gets the current mail item's sensitivity label.

    Office.context.sensitivityLabelsCatalog.getIsEnabledAsync((asyncResult) => {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded && asyncResult.value == true) {
        Office.context.mailbox.item.sensitivityLabel.getAsync((asyncResult) => {
          if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
            console.log(asyncResult.value);
          } else {
            console.log("Action failed with error: " + asyncResult.error.message);
          }
        });
      } else {
        console.log("Action failed with error: " + asyncResult.error.message);
      }
    });
'Office.MessageCompose#seriesId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-series-id.yaml

    const seriesId = Office.context.mailbox.item.seriesId;


    if (seriesId === undefined) {
      console.log("This is a message that's not a meeting request.");
    } else if (seriesId === null) {
      console.log("This is a single appointment, a parent series, or a meeting request for a series or single meeting.");
    } else {
      console.log("This is an instance belonging to series with ID " + seriesId);
    }
'Office.MessageCompose#sessionData:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/session-data-apis.yaml

    Office.context.mailbox.item.sessionData.getAllAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("The sessionData is " + JSON.stringify(asyncResult.value));
      } else {
        console.log("Failed to get all sessionData. Error: " + JSON.stringify(asyncResult.error));
      }
    });
'Office.MessageCompose#setSelectedDataAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/set-selected-data.yaml

    Office.context.mailbox.item.setSelectedDataAsync("Replaced",
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Selected text has been updated successfully.");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageCompose#subject:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-subject-compose.yaml

    Office.context.mailbox.item.subject.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Subject: ${result.value}`);
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-subject-compose.yaml

    let subject = "Hello World!";

    Office.context.mailbox.item.subject.setAsync(subject, (result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Successfully set subject to ${subject}`);
    });
'Office.MessageCompose#to:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-to-message-compose.yaml

    Office.context.mailbox.item.to.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const msgTo = asyncResult.value;
        console.log("Message being sent to:");
        for (let i = 0; i < msgTo.length; i++) {
          console.log(msgTo[i].displayName + " (" + msgTo[i].emailAddress + ")");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-to-message-compose.yaml

    const email = $("#emailTo")
      .val()
      .toString();
    const emailArray = [email];

    Office.context.mailbox.item.to.setAsync(emailArray, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting To field.");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageRead#attachments:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/get-attachments-read.yaml

    const attachments = Office.context.mailbox.item.attachments;

    console.log(attachments);
'Office.MessageRead#categories:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const categories = asyncResult.value;
        if (categories && categories.length > 0) {
          console.log("Categories assigned to this item:");
          console.log(JSON.stringify(categories));
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    // Note: In order for you to successfully add a category,

    // it must be in the mailbox categories master list.


    Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const masterCategories = asyncResult.value;
        if (masterCategories && masterCategories.length > 0) {
          // Grab the first category from the master list.
          const categoryToAdd = [masterCategories[0].displayName];
          Office.context.mailbox.item.categories.addAsync(categoryToAdd, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully assigned category '${categoryToAdd}' to item.`);
            } else {
              console.log("categories.addAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories in the master list on this mailbox. You can add categories using Office.context.mailbox.masterCategories.addAsync.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const categories = asyncResult.value;
        if (categories && categories.length > 0) {
          // Grab the first category assigned to this item.
          const categoryToRemove = [categories[0].displayName];
          Office.context.mailbox.item.categories.removeAsync(categoryToRemove, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully unassigned category '${categoryToRemove}' from this item.`);
            } else {
              console.log("categories.removeAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageRead#cc:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-cc-message-read.yaml

    const msgCc = Office.context.mailbox.item.cc;

    console.log("Message copied to:");

    for (let i = 0; i < msgCc.length; i++) {
      console.log(msgCc[i].displayName + " (" + msgCc[i].emailAddress + ")");
    }
'Office.MessageRead#conversationId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-conversation-id-message.yaml

    console.log(`Conversation ID:
    ${Office.context.mailbox.item.conversationId}`);
'Office.MessageRead#dateTimeCreated:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-date-time-created-read.yaml

    console.log(`Creation date and time:
    ${Office.context.mailbox.item.dateTimeCreated}`);
'Office.MessageRead#dateTimeModified:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-date-time-modified-read.yaml

    console.log(`Date and time item last modified:
    ${Office.context.mailbox.item.dateTimeModified}`);
'Office.MessageRead#display:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/set-displayed-body-subject.yaml

    // This snippet temporarily sets the content displayed in the body of a
    message in read mode.

    // The set content will remain visible until the user switches to a
    different message in the Reading Pane or closes the window of the current
    message.

    const bodyText = $("#body-text-field")
      .val()
      .toString();
    Office.context.mailbox.item.display.body.setAsync(bodyText, (asyncResult) =>
    {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log(`Action failed with error: ${asyncResult.error.message}`);
        return;
      }

      console.log("Temporarily set the content displayed in the body.");
    });
'Office.MessageRead#displayReplyAllForm:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyAllForm("This is a reply ALL with
    <b>some bold text</b>.");
'Office.MessageRead#displayReplyAllFormAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyAllFormAsync("This is a reply ALL
    with <b>some bold text</b>.", function(
      asyncResult
    ) {
      console.log(JSON.stringify(asyncResult));
    });
'Office.MessageRead#displayReplyForm:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyForm("This is a reply with <i>some
    text in italics</i>.");
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-reply-with-attachments.yaml

    Office.context.mailbox.item.displayReplyForm({
      htmlBody: "This is a reply with a couple of attachments - an inline image and an item<br><img src='cid:dog.jpg'>",
      attachments: [
        { type: "file", url: "http://i.imgur.com/9S36xvA.jpg", name: "dog.jpg", isInline: true },
        { type: "item", itemId: Office.context.mailbox.item.itemId, name: "test_email.msg" }
      ],
      options: { asyncContext: null },
      callback: function(result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
        }
      }
    });
'Office.MessageRead#displayReplyFormAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyFormAsync("This is a reply with
    <i>some text in italics</i>.", function(
      asyncResult
    ) {
      console.log(JSON.stringify(asyncResult));
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-reply-with-attachments.yaml

    // The async version is only available starting with requirement set 1.9,

    // and provides a callback when the new appointment form has been created.

    Office.context.mailbox.item.displayReplyFormAsync(
      {
        htmlBody: "This is a reply with a couple of attachments - an inline image and an item<br><img src='cid:dog.jpg'>",
        attachments: [
          { type: "file", url: "http://i.imgur.com/9S36xvA.jpg", name: "dog.jpg", isInline: true },
          { type: "item", itemId: Office.context.mailbox.item.itemId, name: "test_email.msg" }
        ]
      },
      function(asyncResult) {
        console.log(JSON.stringify(asyncResult));
      }
    );
'Office.MessageRead#end:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-end-read.yaml

    console.log(`Appointment ends: ${Office.context.mailbox.item.end}`);
'Office.MessageRead#from:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-from-message-read.yaml

    const msgFrom = Office.context.mailbox.item.from;

    console.log("Message received from: " + msgFrom.displayName + " (" +
    msgFrom.emailAddress + ")");
'Office.MessageRead#getAllInternetHeadersAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/70-mime-headers/get-internet-headers-message-read.yaml

    Office.context.mailbox.item.getAllInternetHeadersAsync(function
    (asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Internet headers received successfully");
        if (asyncResult.value.match(/preferred-fruit:.*/gim)) {
          console.log("Sender's preferred fruit: " + asyncResult.value.match(/preferred-fruit:.*/gim)[0].slice(17));
        } else {
          console.log("Didn't receive header with sender's preferred fruit");
        }
        if (asyncResult.value.match(/preferred-vegetable:.*/gim)) {
          console.log(
            "Sender's preferred vegetable: " + asyncResult.value.match(/preferred-vegetable:.*/gim)[0].slice(21)
          );
        } else {
          console.log("Didn't receive header with sender's preferred vegetable");
        }
      } else {
        console.log("Error getting internet headers: " + JSON.stringify(asyncResult.error));
      }
    });
'Office.MessageRead#getAsFileAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/get-eml-format.yaml

    Office.context.mailbox.item.getAsFileAsync((asyncResult) => {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log(`Error encountered during processing: ${asyncResult.error.message}`);
        return;
      }

      console.log(asyncResult.value);
    });
'Office.MessageRead#getAttachmentContentAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/get-attachment-content.yaml

    // Gets the attachments of the current message or appointment in read mode.

    // The item.attachments call can only be used in read mode.

    const attachments = item.attachments;

    if (attachments.length <= 0) {
      console.log("Mail item has no attachments.");
      return;
    }


    for (let i = 0; i < attachments.length; i++) {
      // Log the attachment type and its contents to the console.
      item.getAttachmentContentAsync(attachments[i].id, handleAttachmentsCallback);
    }
'Office.MessageRead#getEntities:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/basic-entities.yaml

    const entities = Office.context.mailbox.item.getEntities();

    let entityTypesFound = 0;

    if (entities.addresses.length > 0) {
        console.warn("physical addresses: ");
        console.log(entities.addresses);
        entityTypesFound++;
    }

    if (entities.contacts.length > 0) {
        console.warn("contacts: ");
        entities.contacts.forEach(function (contact) { console.log(contact.personName); })
        entityTypesFound++;
    }

    if (entities.emailAddresses.length > 0) {
        console.warn("email addresses: ");
        console.log(entities.emailAddresses);
        entityTypesFound++;
    }

    if (entities.meetingSuggestions.length > 0) {
        console.warn("meetings suggestions: ");
        entities.meetingSuggestions.forEach(function (meetingSuggestion) { console.log(meetingSuggestion.meetingString); })
        entityTypesFound++;
    }

    if (entities.phoneNumbers.length > 0) {
        console.warn("phone numbers: ");
        entities.phoneNumbers.forEach(function (phoneNumber) { console.log(phoneNumber.originalPhoneString); })
        entityTypesFound++;
    }

    if (entities.taskSuggestions.length > 0) {
        console.warn("task suggestions: ");
        entities.taskSuggestions.forEach(function (taskSuggestion) { console.log(taskSuggestion.taskString); })
        entityTypesFound++;
    }

    if (entities.urls.length > 0) {
        console.warn("URLs: ");
        console.log(entities.urls);
        entityTypesFound++;
    }

    if (entityTypesFound == 0)

    {
        console.log("No entities found on this item.");
    }
'Office.MessageRead#getEntitiesByType:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/basic-entities.yaml

    console.log(Office.context.mailbox.item.getEntitiesByType(Office.MailboxEnums.EntityType.Address));
'Office.MessageRead#getFilteredEntitiesByName:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted physical address
    that has the word "Way" in it.

    console.log(Office.context.mailbox.item.getFilteredEntitiesByName("sampleFilterName"));
'Office.MessageRead#getRegExMatches:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted word "ScriptLab".

    console.log(Office.context.mailbox.item.getRegExMatches());
'Office.MessageRead#getRegExMatchesByName:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted word "ScriptLab".

    console.log(Office.context.mailbox.item.getRegExMatchesByName("sampleRegexName"));
'Office.MessageRead#getSelectedEntities:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/selected.yaml

    const entities = Office.context.mailbox.item.getSelectedEntities();

    let entityTypesFound = 0;

    if (entities.addresses.length > 0) {
        console.warn("physical addresses: ");
        console.log(entities.addresses);
        entityTypesFound++;
    }

    if (entities.contacts.length > 0) {
        console.warn("contacts: ");
        entities.contacts.forEach(function (contact) { console.log(contact.personName); })
        entityTypesFound++;
    }

    if (entities.emailAddresses.length > 0) {
        console.warn("email addresses: ");
        console.log(entities.emailAddresses);
        entityTypesFound++;
    }

    if (entities.meetingSuggestions.length > 0) {
        console.warn("meetings suggestions: ");
        entities.meetingSuggestions.forEach(function (meetingSuggestion) { console.log(meetingSuggestion.meetingString); })
        entityTypesFound++;
    }

    if (entities.phoneNumbers.length > 0) {
        console.warn("phone numbers: ");
        entities.phoneNumbers.forEach(function (phoneNumber) { console.log(phoneNumber.originalPhoneString); })
        entityTypesFound++;
    }

    if (entities.taskSuggestions.length > 0) {
        console.warn("task suggestions: ");
        entities.taskSuggestions.forEach(function (taskSuggestion) { console.log(taskSuggestion.taskString); })
        entityTypesFound++;
    }

    if (entities.urls.length > 0) {
        console.warn("URLs: ");
        console.log(entities.urls);
        entityTypesFound++;
    }

    if (entityTypesFound == 0)

    {
        console.error("Open add-in by clicking on a highlighted entity, for this API to return something useful.");
    }
'Office.MessageRead#getSelectedRegExMatches:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/selected.yaml

    const matches = Office.context.mailbox.item.getSelectedRegExMatches();

    if (matches) {
        console.log(matches);
    }

    else {
        console.error("Open add-in by clicking on a highlighted regex match, for this API to return something useful.");
    }
'Office.MessageRead#getSharedPropertiesAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on an item from a shared folder.");
      return;
    }


    Office.context.mailbox.item.getSharedPropertiesAsync(function(result) {
      console.log(result.value);
    });
'Office.MessageRead#getSharedPropertiesAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on a message from a shared folder.");
      return;
    }


    Office.context.mailbox.getCallbackTokenAsync({ isRest: true },
    function(result) {
      if (result.status === Office.AsyncResultStatus.Succeeded && result.value !== "") {
        Office.context.mailbox.item.getSharedPropertiesAsync(
          {
            // Pass auth token along.
            asyncContext: result.value
          },
          function(result2) {
            let sharedProperties = result2.value;
            let delegatePermissions = sharedProperties.delegatePermissions;

            // Determine if user has the appropriate permission to do the operation.
            if ((delegatePermissions & Office.MailboxEnums.DelegatePermissions.Read) != 0) {
              const ewsId = Office.context.mailbox.item.itemId;
              const restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
              let rest_url =
                sharedProperties.targetRestUrl + "/v2.0/users/" + sharedProperties.targetMailbox + "/messages/" + restId;

              $.ajax({
                url: rest_url,
                dataType: "json",
                headers: { Authorization: "Bearer " + result2.asyncContext }
              })
                .done(function(response) {
                  console.log(response);
                })
                .fail(function(error) {
                  console.error(error);
                });
            }
          }
        );
      }
    });
'Office.MessageRead#internetMessageId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-internet-message-id-read.yaml

    console.log(`Internet message ID:
    ${Office.context.mailbox.item.internetMessageId}`);
'Office.MessageRead#itemClass:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-item-class-read.yaml

    console.log(`Item class: ${Office.context.mailbox.item.itemClass}`);
'Office.MessageRead#itemType:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-item-type.yaml

    const itemType = Office.context.mailbox.item.itemType;

    switch (itemType) {
        case Office.MailboxEnums.ItemType.Appointment:
            console.log(`Current item is an ${itemType}.`);
            break;
        case Office.MailboxEnums.ItemType.Message:
            console.log(`Current item is a ${itemType}. A message could be an email, meeting request, meeting response, or meeting cancellation.`);
            break;
    }
'Office.MessageRead#loadCustomPropertiesAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/15-item-custom-properties/load-set-get-save.yaml

    Office.context.mailbox.item.loadCustomPropertiesAsync(function (result) {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Loaded following custom properties:");
        customProps = result.value;
        const dataKey = Object.keys(customProps)[0];
        const data = customProps[dataKey];
        for (let propertyName in data)
        {
          let propertyValue = data[propertyName];
          console.log(`${propertyName}: ${propertyValue}`);
        }              
      }
      else {
        console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);
      }
    });
'Office.MessageRead#location:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-location-read.yaml

    console.log(`Appointment location:
    ${Office.context.mailbox.item.location}`);
'Office.MessageRead#normalizedSubject:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-normalized-subject-read.yaml

    console.log(`Normalized subject:
    ${Office.context.mailbox.item.normalizedSubject}`);
'Office.MessageRead#notificationMessages:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Adds a progress indicator to the mail item.

    const id = $("#notificationId").val().toString();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.ProgressIndicator,
        message: "Progress indicator with id = " + id
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Adds an informational notification to the mail item.

    const id = $("#notificationId").val().toString();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Non-persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: false
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Adds a persistent information notification to the mail item.

    const id = $("#notificationId").val().toString();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: true
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Gets all the notification messages and their keys for the current mail
    item.

    Office.context.mailbox.item.notificationMessages.getAllAsync((asyncResult)
    => {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log(asyncResult.error.message);
        return;
      }

      console.log(asyncResult.value);
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Replaces a notification message of a given key with another message.

    const id = $("#notificationId").val().toString();

    Office.context.mailbox.item.notificationMessages.replaceAsync(
      id,
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Notification message with id = " + id + " has been replaced with an informational message.",
        icon: "icon2",
        persistent: false
      },
      handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Removes a notification message from the current mail item.

    const id = $("#notificationId").val().toString();

    Office.context.mailbox.item.notificationMessages.removeAsync(id,
    handleResult);
'Office.MessageRead#recurrence:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-recurrence-read.yaml

    const recurrence = Office.context.mailbox.item.recurrence;


    if (recurrence === undefined) {
      console.log("This item is a message but not a meeting request.");
    } else if (recurrence === null) {
      console.log("This is a single appointment.");
    } else {
      console.log(JSON.stringify(recurrence));
    }
'Office.MessageRead#sender:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-sender-message-read.yaml

    const msgSender = Office.context.mailbox.item.sender;

    console.log("Sender: " + msgSender.displayName + " (" +
    msgSender.emailAddress + ")");
'Office.MessageRead#seriesId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-series-id.yaml

    const seriesId = Office.context.mailbox.item.seriesId;


    if (seriesId === undefined) {
      console.log("This is a message that's not a meeting request.");
    } else if (seriesId === null) {
      console.log("This is a single appointment, a parent series, or a meeting request for a series or single meeting.");
    } else {
      console.log("This is an instance belonging to series with ID " + seriesId);
    }
'Office.MessageRead#start:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-start-read.yaml

    console.log(`Appointment starts: ${Office.context.mailbox.item.start}`);
'Office.MessageRead#subject:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-subject-read.yaml

    console.log(`Subject: ${Office.context.mailbox.item.subject}`);
'Office.MessageRead#to:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-to-message-read.yaml

    const msgTo = Office.context.mailbox.item.to;

    const distributionLists = [];

    const externalRecipients = [];

    const internalRecipients = [];

    const otherRecipients = [];

    for (let i = 0; i < msgTo.length; i++) {
        switch (msgTo[i].recipientType) {
        case Office.MailboxEnums.RecipientType.DistributionList:
            distributionLists.push(msgTo[i]);
            break;
        case Office.MailboxEnums.RecipientType.ExternalUser:
            externalRecipients.push(msgTo[i]);
            break;
        case Office.MailboxEnums.RecipientType.User:
            internalRecipients.push(msgTo[i]);
            break;
        case Office.MailboxEnums.RecipientType.Other:
            otherRecipients.push(msgTo[i]);
        }
    }


    if (distributionLists.length > 0) {
        console.log("Distribution Lists:");
        distributionLists.forEach((recipient) => console.log(`${recipient.displayName}, ${recipient.emailAddress}`));
    }


    if (externalRecipients.length > 0) {
        console.log("External Recipients:");
        externalRecipients.forEach((recipient) => console.log(`${recipient.displayName}, ${recipient.emailAddress}`));
    }


    if (internalRecipients.length > 0) {
        console.log("Internal Recipients:");
        internalRecipients.forEach((recipient) => console.log(`${recipient.displayName}, ${recipient.emailAddress}`));
    }


    if (otherRecipients.length > 0) {
        console.log("Other Recipients:");
        otherRecipients.forEach((recipient) => console.log(`${recipient.displayName}, ${recipient.emailAddress}`));
    }
'Office.NotificationMessageAction:interface':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Adds an informational message with actions to the mail item.

    const id = $("#notificationId").val().toString();


    const itemId = Office.context.mailbox.item.itemId;

    const details = {
      type: Office.MailboxEnums.ItemNotificationMessageType.InsightMessage,
      message: "This is an insight notification with id = " + id,
      icon: "icon1",
      actions: [
        {
          actionText: "Open insight",
          actionType: Office.MailboxEnums.ActionType.ShowTaskPane,
          // Identify whether the current mail item is in read or compose mode to set the appropriate commandId value.
          commandId: (itemId == undefined ? "PG.HelpCommand.Compose" : "PG.HelpCommand.Read"),
          contextData: { a: "aValue", b: "bValue" }
        }
      ]
    };


    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
'Office.NotificationMessageDetails:interface':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Gets all the notification messages and their keys for the current mail
    item.

    Office.context.mailbox.item.notificationMessages.getAllAsync((asyncResult)
    => {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log(asyncResult.error.message);
        return;
      }

      console.log(asyncResult.value);
    });
'Office.NotificationMessages#addAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Adds a progress indicator to the mail item.

    const id = $("#notificationId").val().toString();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.ProgressIndicator,
        message: "Progress indicator with id = " + id
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Adds an informational notification to the mail item.

    const id = $("#notificationId").val().toString();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Non-persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: false
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Adds a persistent information notification to the mail item.

    const id = $("#notificationId").val().toString();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: true
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Adds an error notification to the mail item.

    const id = $("#notificationId").val().toString();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.ErrorMessage,
        message: "Error notification message with id = " + id
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
'Office.NotificationMessages#getAllAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Gets all the notification messages and their keys for the current mail
    item.

    Office.context.mailbox.item.notificationMessages.getAllAsync((asyncResult)
    => {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log(asyncResult.error.message);
        return;
      }

      console.log(asyncResult.value);
    });
'Office.NotificationMessages#removeAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Removes a notification message from the current mail item.

    const id = $("#notificationId").val().toString();

    Office.context.mailbox.item.notificationMessages.removeAsync(id,
    handleResult);
'Office.NotificationMessages#replaceAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    // Replaces a notification message of a given key with another message.

    const id = $("#notificationId").val().toString();

    Office.context.mailbox.item.notificationMessages.replaceAsync(
      id,
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Notification message with id = " + id + " has been replaced with an informational message.",
        icon: "icon2",
        persistent: false
      },
      handleResult);
'Office.Organizer#getAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-organizer-appointment-organizer.yaml

    Office.context.mailbox.item.organizer.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const apptOrganizer = asyncResult.value;
        console.log("Organizer: " + apptOrganizer.displayName + " (" + apptOrganizer.emailAddress + ")");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.Recipients#getAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-bcc-message-compose.yaml

    Office.context.mailbox.item.bcc.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const msgBcc = asyncResult.value;
        console.log("Message being blind-copied to:");
        for (let i = 0; i < msgBcc.length; i++) {
          console.log(msgBcc[i].displayName + " (" + msgBcc[i].emailAddress + ")");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-cc-message-compose.yaml

    Office.context.mailbox.item.cc.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const msgCc = asyncResult.value;
        console.log("Message being copied to:");
        for (let i = 0; i < msgCc.length; i++) {
          console.log(msgCc[i].displayName + " (" + msgCc[i].emailAddress + ")");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-optional-attendees-appointment-organizer.yaml

    Office.context.mailbox.item.optionalAttendees.getAsync(function(asyncResult)
    {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const apptOptionalAttendees = asyncResult.value;
        for (let i = 0; i < apptOptionalAttendees.length; i++) {
          console.log(
            "Optional attendees: " +
              apptOptionalAttendees[i].displayName +
              " (" +
              apptOptionalAttendees[i].emailAddress +
              ") - response: " +
              apptOptionalAttendees[i].appointmentResponse
          );
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-required-attendees-appointment-organizer.yaml

    Office.context.mailbox.item.requiredAttendees.getAsync(function(asyncResult)
    {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const apptRequiredAttendees = asyncResult.value;
        for (let i = 0; i < apptRequiredAttendees.length; i++) {
          console.log(
            "Required attendees: " +
              apptRequiredAttendees[i].displayName +
              " (" +
              apptRequiredAttendees[i].emailAddress +
              ") - response: " +
              apptRequiredAttendees[i].appointmentResponse
          );
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-to-message-compose.yaml

    Office.context.mailbox.item.to.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const msgTo = asyncResult.value;
        console.log("Message being sent to:");
        for (let i = 0; i < msgTo.length; i++) {
          console.log(msgTo[i].displayName + " (" + msgTo[i].emailAddress + ")");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.Recipients#setAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-bcc-message-compose.yaml

    const email = $("#emailBcc")
      .val()
      .toString();
    const emailArray = [email];

    Office.context.mailbox.item.bcc.setAsync(emailArray, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting Bcc field.");
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-cc-message-compose.yaml

    const email = $("#emailCc")
      .val()
      .toString();
    const emailArray = [email];

    Office.context.mailbox.item.cc.setAsync(emailArray, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting Cc field.");
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-optional-attendees-appointment-organizer.yaml

    const email = $("#emailOptional")
      .val()
      .toString();
    const emailArray = [email];

    Office.context.mailbox.item.optionalAttendees.setAsync(emailArray,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting optional attendees field.");
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-required-attendees-appointment-organizer.yaml

    const email = $("#emailRequired")
      .val()
      .toString();
    const emailArray = [email];

    Office.context.mailbox.item.requiredAttendees.setAsync(emailArray,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting required attendees field.");
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-to-message-compose.yaml

    const email = $("#emailTo")
      .val()
      .toString();
    const emailArray = [email];

    Office.context.mailbox.item.to.setAsync(emailArray, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting To field.");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.Recurrence#getAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-set-recurrence-appointment-organizer.yaml

    Office.context.mailbox.item.recurrence.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const recurrence = asyncResult.value;
        if (recurrence === null) {
          console.log("This is a single appointment.");
        } else {
          console.log(`Recurrence pattern: ${JSON.stringify(recurrence)}`);
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.Recurrence#setAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-set-recurrence-appointment-organizer.yaml

    // Important: Can only set the recurrence pattern of an appointment series.


    const currentDate = new Date();

    let seriesTimeObject: Office.SeriesTime;

    // Set series start date to tomorrow.

    seriesTimeObject.setStartDate(currentDate.getFullYear(),
    currentDate.getMonth(), currentDate.getDay() + 1);

    // Set series end date to one year from now.

    seriesTimeObject.setEndDate(currentDate.getFullYear() + 1,
    currentDate.getMonth() + 1, currentDate.getDay());

    // Set start time to 1:30 PM.

    seriesTimeObject.setStartTime(13, 30);

    // Set duration to 30 minutes.

    seriesTimeObject.setDuration(30);


    const pattern: Office.Recurrence = {
      seriesTime: seriesTimeObject,
      recurrenceType: Office.MailboxEnums.RecurrenceType.Yearly,
      recurrenceProperties: {
        interval: 1,
        dayOfWeek: Office.MailboxEnums.Days.Tue,
        weekNumber: Office.MailboxEnums.WeekNumber.Second,
        month: Office.MailboxEnums.Month.Sep
      },
      recurrenceTimeZone: { name: Office.MailboxEnums.RecurrenceTimeZone.PacificStandardTime }
    };


    Office.context.mailbox.item.recurrence.setAsync(pattern, (asyncResult) => {
      if (asyncResult.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to set recurrence. Error: ${asyncResult.error.message}`);
        return;
      }
      console.log(`Succeeded in setting recurrence pattern ${JSON.stringify(pattern)}`);
    });
'Office.RoamingSettings#get:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/10-roaming-settings/roaming-settings.yaml

    const settingName = $("#settingName").val();

    const settingValue = Office.context.roamingSettings.get(settingName);

    $("#settingValue").val(settingValue);

    console.log(`The value of setting "${settingName}" is "${settingValue}".`);
'Office.RoamingSettings#saveAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/10-roaming-settings/roaming-settings.yaml

    // Save settings in the mailbox to make it available in future sessions.

    Office.context.roamingSettings.saveAsync(function(result) {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
      } else {
        console.log(`Settings saved with status: ${result.status}`);
      }
    });
'Office.RoamingSettings#set:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/10-roaming-settings/roaming-settings.yaml

    const settingName = $("#settingName").val();

    const settingValue = $("#settingValue").val();

    Office.context.roamingSettings.set(settingName, settingValue);

    console.log(`Setting "${settingName}" set to value "${settingValue}".`);
'Office.SelectedItemDetails:interface':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-message-properties.yaml

    // Retrieves the selected messages' properties and logs them to the console.

    Office.context.mailbox.getSelectedItemsAsync((asyncResult) => {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log(asyncResult.error.message);
        return;
      }

      asyncResult.value.forEach((message) => {
        console.log(`Item ID: ${message.itemId}`);
        console.log(`Subject: ${message.subject}`);
        console.log(`Item type: ${message.itemType}`);
        console.log(`Item mode: ${message.itemMode}`);
      });
    });
'Office.Sensitivity#getAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/calendar-properties-apis.yaml

    Office.context.mailbox.item.sensitivity.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Sensitivity: " + asyncResult.value);
      } else {
        console.log("Failed to get sensitivity: " + JSON.stringify(asyncResult.error));
      }
    });
'Office.Sensitivity#setAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/calendar-properties-apis.yaml

    Office.context.mailbox.item.sensitivity.setAsync(
      Office.MailboxEnums.AppointmentSensitivityType.Confidential,
      function callback(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Failed) {
          console.log("Failed to set appointment sensitivity: " + JSON.stringify(asyncResult.error));
        } else {
          console.log("Successfully set appointment sensitivity.");
        }
      }
    );
'Office.SensitivityLabel#getAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/60-sensitivity-label/sensitivity-label.yaml

    // This snippet gets the current mail item's sensitivity label.

    Office.context.sensitivityLabelsCatalog.getIsEnabledAsync((asyncResult) => {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded && asyncResult.value == true) {
        Office.context.mailbox.item.sensitivityLabel.getAsync((asyncResult) => {
          if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
            console.log(asyncResult.value);
          } else {
            console.log("Action failed with error: " + asyncResult.error.message);
          }
        });
      } else {
        console.log("Action failed with error: " + asyncResult.error.message);
      }
    });
'Office.SensitivityLabel#setAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/60-sensitivity-label/sensitivity-label.yaml

    // This snippet sets the sensitivity label on the current mail item.

    Office.context.sensitivityLabelsCatalog.getIsEnabledAsync((asyncResult) => {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded && asyncResult.value == true) {
        Office.context.sensitivityLabelsCatalog.getAsync((asyncResult) => {
          if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
            const catalog = asyncResult.value;
            if (catalog.length > 0) {
              var id = catalog[0].id;
              Office.context.mailbox.item.sensitivityLabel.setAsync(id, (asyncResult) => {
                if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
                  console.log(asyncResult.status);
                } else {
                  console.log("Action failed with error: " + asyncResult.error.message);
                }
              });
            }
            else {
              console.log("Catalog list is empty");
            }
          } else {
            console.log("Action failed with error: " + asyncResult.error.message);
          }
        });
      } else {
        console.log("Action failed with error: " + asyncResult.error.message);
      }
    });
'Office.SensitivityLabelsCatalog#getAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/60-sensitivity-label/sensitivity-labels-catalog.yaml

    // This snippet gets all available sensitivity labels from the catalog.

    Office.context.sensitivityLabelsCatalog.getIsEnabledAsync((asyncResult) => {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded && asyncResult.value == true) {
        Office.context.sensitivityLabelsCatalog.getAsync((asyncResult) => {
          if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
            const catalog = asyncResult.value;
            console.log("Sensitivity Labels Catalog:");
            console.log(JSON.stringify(catalog));
          } else {
            console.log("Action failed with error: " + asyncResult.error.message);
          }
        });
      } else {
        console.log("Action failed with error: " + asyncResult.error.message);
      }
    });
'Office.SensitivityLabelsCatalog#getIsEnabledAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/60-sensitivity-label/sensitivity-labels-catalog.yaml

    // This snippet determines if the sensitivity labels catalog is enabled on
    the current mailbox.

    Office.context.sensitivityLabelsCatalog.getIsEnabledAsync((asyncResult) => {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log(asyncResult.value);
      } else {
        console.log("Action failed with error: " + asyncResult.error.message);
      }
    });
'Office.SessionData#clearAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/session-data-apis.yaml

    Office.context.mailbox.item.sessionData.clearAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("sessionData.clearAsync succeeded");
      } else {
        console.log("Failed to clear sessionData. Error: " + JSON.stringify(asyncResult.error));
      }
    });
'Office.SessionData#getAllAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/session-data-apis.yaml

    Office.context.mailbox.item.sessionData.getAllAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("The sessionData is " + JSON.stringify(asyncResult.value));
      } else {
        console.log("Failed to get all sessionData. Error: " + JSON.stringify(asyncResult.error));
      }
    });
'Office.SessionData#getAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/session-data-apis.yaml

    Office.context.mailbox.item.sessionData.getAsync(
      "Date",
      function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("The sessionData value is " + JSON.stringify(asyncResult.value));
      } else {
        console.log("Failed to get sessionData. Error: " + JSON.stringify(asyncResult.error));
      }
    });
'Office.SessionData#removeAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/session-data-apis.yaml

    Office.context.mailbox.item.sessionData.removeAsync(
      "Date",
      function callback(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("sessionData.removeAsync succeeded");
        } else {
          console.log("Failed to remove sessionData. Error: " + JSON.stringify(asyncResult.error));
        }
      }
    );
'Office.SessionData#setAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/session-data-apis.yaml

    Office.context.mailbox.item.sessionData.setAsync(
      "Date",
      "7/24/2020",
      function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("sessionData.setAsync succeeded");
      } else {
        console.log("Failed to set sessionData. Error: " + JSON.stringify(asyncResult.error));
      }
    });
'Office.Time#getAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-start-appointment-organizer.yaml

    Office.context.mailbox.item.start.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Appointment starts: ${result.value}`);
    });
'Office.Time#setAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-start-appointment-organizer.yaml

    const start = new Date(); // Represents current date and time.

    start.setDate(start.getDate() + 2); // Add 2 days to current date.

    Office.context.mailbox.item.start.setAsync(start, (result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Successfully set start date and time to ${start}`);
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-end-appointment-organizer.yaml

    Office.context.mailbox.item.start.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Get start date failed with message ${result.error.message}`);
        return;
      }

      const end = result.value; // Set end to current start date and time.
      end.setDate(end.getDate() + 1); // Set end as 1 day later than start date.
      Office.context.mailbox.item.end.setAsync(end, (result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Set end date failed with message ${result.error.message}`);
          return;
        }
        console.log(`Successfully set end date and time to ${end}`);
      });
    });
'PowerPoint.ConnectorType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/shapes.yaml

    // This function gets the collection of shapes on the first slide,

    // and adds a line to the collection, while specifying its

    // start and end points. Then it names the shape.

    await PowerPoint.run(async (context) => {
      const shapes = context.presentation.slides.getItemAt(0).shapes;

      // For a line, left and top are the coordinates of the start point,
      // while height and width are the coordinates of the end point.
      const line = shapes.addLine(PowerPoint.ConnectorType.straight, 
          { 
            left: 400, 
            top: 200, 
            height: 20, 
            width: 150 
          });
      line.name = "StraightLine";

      await context.sync();
    });
'PowerPoint.GeometricShapeType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/shapes.yaml

    // This function gets the collection of shapes on the first slide,

    // and adds a hexagon shape to the collection, while specifying its

    // location and size. Then it names the shape.

    await PowerPoint.run(async (context) => {
      const shapes = context.presentation.slides.getItemAt(0).shapes;
      const hexagon = shapes.addGeometricShape(PowerPoint.GeometricShapeType.hexagon, 
          {
            left: 100,
            top: 100,
            height: 150,
            width: 150
          });
      hexagon.name = "Hexagon";

      await context.sync();
    });
'PowerPoint.Presentation#getSelectedShapes:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-set-shapes.yaml

    // Arranges the selected shapes in a line from left to right.

    await PowerPoint.run(async (context) => {
      const shapes = context.presentation.getSelectedShapes();
      const shapeCount = shapes.getCount();
      shapes.load("items");
      await context.sync();
      let maxHeight = 0;
      shapes.items.map((shape) => {
        shape.load("width,height");
      });
      await context.sync();
      shapes.items.map((shape) => {
        shape.left = currentLeft;
        shape.top = currentTop;
        currentLeft += shape.width;
        if (shape.height > maxHeight) maxHeight = shape.height;
      });
      await context.sync();
      currentLeft = 0;
      if (currentTop > slideHeight - 200) currentTop = 0;
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-set-shapes.yaml

    // Gets the shapes you selected on the slide and displays their IDs on the
    task pane.

    await PowerPoint.run(async (context) => {
      let finalTable = "";
      const shapes = context.presentation.getSelectedShapes();
      const shapeCount = shapes.getCount();
      await context.sync();
      finalTable += "<br>getSelectedShapes.getCount returned:<b>" + shapeCount.value + "</b><br>";
      finalTable +=
        "<br><table border=1 cellpadding=3 cellspacing=0><tr><td bgcolor=#3333EE><font color=white>Index</font></td><td bgcolor=#3333EE><font color=white>Id</font></td></tr>";
      shapes.load("items");
      await context.sync();
      shapes.items.map((shape, index) => {
        finalTable += "<tr><td>" + index + "</td><td>" + shape.id + "</td></tr>";
      });
      finalTable += "</table>";
      $("#outputSpan").empty();
      $("#outputSpan").append(finalTable);
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-set-shapes.yaml

    // Saves which shapes are selected so that they can be reselected later.

    await PowerPoint.run(async (context) => {
      context.presentation.load("slides");
      await context.sync();
      const slides = context.presentation.getSelectedSlides();
      const slideCount = slides.getCount();
      slides.load("items");
      await context.sync();
      savedSlideSelection = [];
      slides.items.map((slide) => {
        savedSlideSelection.push(slide.id);
      });
      const shapes = context.presentation.getSelectedShapes();
      const shapeCount = shapes.getCount();
      shapes.load("items");
      await context.sync();
      shapes.items.map((shape) => {
        savedShapeSelection.push(shape.id);
      });
    });
'PowerPoint.Presentation#getSelectedSlides:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/slide-management/get-set-slides.yaml

    // Gets the selected slides and displays their IDs on the task pane.

    await PowerPoint.run(async (context) => {
      let finalTable = "";
      context.presentation.load("slides");
      await context.sync();
      const allSlidesList = {};
      const allSlidesCount = context.presentation.slides.getCount();
      context.presentation.slides.load("items");
      await context.sync();
      let allSlideItems = context.presentation.slides.items;
      allSlideItems.map((slide, index) => {
        allSlidesList[slide.id] = `Slide ${index + 1}`;
      });

      if ($("#id-check-usenative").is(":checked")) {
        context.presentation.load("tags");
      }
      const slides = context.presentation.getSelectedSlides();
      const slideCount = slides.getCount();
      slides.load("items");
      await context.sync();
      finalTable += "<br>getSelectedSlides.getCount returned:<b>" + slideCount.value + "</b><br>";
      finalTable +=
        "<br><table border=1 cellpadding=3 cellspacing=0><tr><td bgcolor=#3333EE><font color=white>Index</font></td><td bgcolor=#3333EE><font color=white>Id</font></td></tr>";
      slides.items.map((slide, index) => {
        finalTable += "<tr><td>" + index + " - " + allSlidesList[slide.id] + "</td><td>" + slide.id + "</td></tr>";
      });
      finalTable += "</table>";
      $("#outputSpan").empty();
      $("#outputSpan").append(finalTable);
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/slide-management/get-set-slides.yaml

    // Saves which slides are currently selected so they can be reselected
    later.

    await PowerPoint.run(async (context) => {
      let finalTable = "";
      context.presentation.load("slides");
      await context.sync();
      const slides = context.presentation.getSelectedSlides();
      const slideCount = slides.getCount();
      await context.sync();
      finalTable += "<br>getSelectedSlides.getCount returned:<b>" + slideCount.value + "</b><br>";
      finalTable +=
        "<br><table border=1 cellpadding=3 cellspacing=0><tr><td bgcolor=#3333EE><font color=white>Index</font></td><td bgcolor=#3333EE><font color=white>Id</font></td></tr>";
      savedSlideSelection = [];
      slides.load("items");
      await context.sync();
      slides.items.map((slide, index) => {
        finalTable += "<tr><td>" + index + "</td><td>" + slide.id + "</td></tr>";
        savedSlideSelection.push(slide.id);
      });
      finalTable += "</table>";
      $("#outputSpan").empty();
      $("#outputSpan").append(finalTable);
    });
'PowerPoint.Presentation#getSelectedTextRange:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/text/get-set-textrange.yaml

    // Gets the selected text range and prints data about the range on the task
    pane.

    await PowerPoint.run(async (context) => {
      const textRange = context.presentation.getSelectedTextRange();
      try {
        await context.sync();
      } catch (error) {
        console.warn("You must select only one range of text for this action to work.");
        return;
      }
      textRange.load("text");
      textRange.load("start");
      textRange.load("length");
      await context.sync();
      let txtHtml = textRange.text;
      txtHtml = txtHtml.replace(/\n/g, "<br>");
      txtHtml = txtHtml.replace(/\r/g, "<br>");
      txtHtml = txtHtml.replace(/\v/g, "<br>");
      let txtExplained = textRange.text;
      txtExplained = txtExplained.replace(/\n/g, "<font color=red>NL</font>");
      txtExplained = txtExplained.replace(/\r/g, "<font color=red>CR</font>");
      txtExplained = txtExplained.replace(/\v/g, "<font color=red>VV</font>");
      let finalTable = "";
      finalTable +=
        "<br><table border=1 cellpadding=3 cellspacing=0><tr><td bgcolor=#3333EE><font color=white>Index</font></td><td bgcolor=#3333EE><font color=white>Id</font></td></tr>";
      finalTable += "<tr><td>Raw</td><td>" + textRange.text + "</td></tr>";
      finalTable += "<tr><td>Html</td><td>" + txtHtml + "</td></tr>";
      finalTable += "<tr><td>Exp</td><td>" + txtExplained + "</td></tr>";
      finalTable += "<tr><td>Start</td><td>" + textRange.start + "</td></tr>";
      finalTable += "<tr><td>Length</td><td>" + textRange.length + "</td></tr>";
      finalTable += "</table>";
      $("#outputSpan").empty();
      $("#outputSpan").append(finalTable);
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/text/get-set-textrange.yaml

    // Sets the range selection to the range that was saved previously.

    await PowerPoint.run(async (context) => {
      const slide1 = context.presentation.slides.getItem(savedTextSlideSelection[0]);
      const shape1 = slide1.shapes.getItem(savedTextShapeSelection[0]);
      const textRange = shape1.textFrame.textRange.getSubstring(savedTextTextRangeStart, savedTextTextRangeLength);
      textRange.setSelected();
      await context.sync();
    });
'PowerPoint.Presentation#insertSlidesFromBase64:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/slide-management/insert-slides.yaml

    await PowerPoint.run(async function(context) {
        const selectedSlideID = await getSelectedSlideID();

        context.presentation.insertSlidesFromBase64(chosenFileBase64, {
            formatting: PowerPoint.InsertSlideFormatting.useDestinationTheme,
            targetSlideId: selectedSlideID + "#"
        });
        await context.sync();
    });
'PowerPoint.Presentation#setSelectedSlides:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/slide-management/get-set-slides.yaml

    // Sets selection to the slides that were saved.

    await PowerPoint.run(async (context) => {
      context.presentation.setSelectedSlides(savedSlideSelection);
      await context.sync();
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/slide-management/get-set-slides.yaml

    // Selects slides 2, 4, and 5.

    await PowerPoint.run(async (context) => {
      context.presentation.load("slides");
      await context.sync();
      const slide2 = context.presentation.slides.getItemAt(1);
      const slide4 = context.presentation.slides.getItemAt(3);
      const slide5 = context.presentation.slides.getItemAt(4);
      slide2.load("id");
      slide4.load("id");
      slide5.load("id");
      try {
        await context.sync();
      } catch (error) {
        console.warn("This action requires at least 5 slides in the presentation.");
        return;
      }
      await context.sync();
      context.presentation.setSelectedSlides([slide2.id, slide4.id, slide5.id]);
      await context.sync();
    });
'PowerPoint.Shape#fill:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-set-shapes.yaml

    // Changes the selected shapes fill color to red.

    await PowerPoint.run(async (context) => {
      const shapes = context.presentation.getSelectedShapes();
      const shapeCount = shapes.getCount();
      shapes.load("items");
      await context.sync();
      shapes.items.map((shape) => {
        shape.fill.setSolidColor("red");
      });
      await context.sync();
    });
'PowerPoint.Shape#height:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-set-shapes.yaml

    // Arranges the selected shapes in a line from left to right.

    await PowerPoint.run(async (context) => {
      const shapes = context.presentation.getSelectedShapes();
      const shapeCount = shapes.getCount();
      shapes.load("items");
      await context.sync();
      let maxHeight = 0;
      shapes.items.map((shape) => {
        shape.load("width,height");
      });
      await context.sync();
      shapes.items.map((shape) => {
        shape.left = currentLeft;
        shape.top = currentTop;
        currentLeft += shape.width;
        if (shape.height > maxHeight) maxHeight = shape.height;
      });
      await context.sync();
      currentLeft = 0;
      if (currentTop > slideHeight - 200) currentTop = 0;
    });
'PowerPoint.Shape#left:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-set-shapes.yaml

    // Arranges the selected shapes in a line from left to right.

    await PowerPoint.run(async (context) => {
      const shapes = context.presentation.getSelectedShapes();
      const shapeCount = shapes.getCount();
      shapes.load("items");
      await context.sync();
      let maxHeight = 0;
      shapes.items.map((shape) => {
        shape.load("width,height");
      });
      await context.sync();
      shapes.items.map((shape) => {
        shape.left = currentLeft;
        shape.top = currentTop;
        currentLeft += shape.width;
        if (shape.height > maxHeight) maxHeight = shape.height;
      });
      await context.sync();
      currentLeft = 0;
      if (currentTop > slideHeight - 200) currentTop = 0;
    });
'PowerPoint.Shape#top:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-set-shapes.yaml

    // Arranges the selected shapes in a line from left to right.

    await PowerPoint.run(async (context) => {
      const shapes = context.presentation.getSelectedShapes();
      const shapeCount = shapes.getCount();
      shapes.load("items");
      await context.sync();
      let maxHeight = 0;
      shapes.items.map((shape) => {
        shape.load("width,height");
      });
      await context.sync();
      shapes.items.map((shape) => {
        shape.left = currentLeft;
        shape.top = currentTop;
        currentLeft += shape.width;
        if (shape.height > maxHeight) maxHeight = shape.height;
      });
      await context.sync();
      currentLeft = 0;
      if (currentTop > slideHeight - 200) currentTop = 0;
    });
'PowerPoint.Shape#width:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-set-shapes.yaml

    // Arranges the selected shapes in a line from left to right.

    await PowerPoint.run(async (context) => {
      const shapes = context.presentation.getSelectedShapes();
      const shapeCount = shapes.getCount();
      shapes.load("items");
      await context.sync();
      let maxHeight = 0;
      shapes.items.map((shape) => {
        shape.load("width,height");
      });
      await context.sync();
      shapes.items.map((shape) => {
        shape.left = currentLeft;
        shape.top = currentTop;
        currentLeft += shape.width;
        if (shape.height > maxHeight) maxHeight = shape.height;
      });
      await context.sync();
      currentLeft = 0;
      if (currentTop > slideHeight - 200) currentTop = 0;
    });
'PowerPoint.ShapeCollection#addGeometricShape:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/shapes.yaml

    // This function gets the collection of shapes on the first slide,

    // and adds a hexagon shape to the collection, while specifying its

    // location and size. Then it names the shape.

    await PowerPoint.run(async (context) => {
      const shapes = context.presentation.slides.getItemAt(0).shapes;
      const hexagon = shapes.addGeometricShape(PowerPoint.GeometricShapeType.hexagon, 
          {
            left: 100,
            top: 100,
            height: 150,
            width: 150
          });
      hexagon.name = "Hexagon";

      await context.sync();
    });
'PowerPoint.ShapeCollection#addLine:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/shapes.yaml

    // This function gets the collection of shapes on the first slide,

    // and adds a line to the collection, while specifying its

    // start and end points. Then it names the shape.

    await PowerPoint.run(async (context) => {
      const shapes = context.presentation.slides.getItemAt(0).shapes;

      // For a line, left and top are the coordinates of the start point,
      // while height and width are the coordinates of the end point.
      const line = shapes.addLine(PowerPoint.ConnectorType.straight, 
          { 
            left: 400, 
            top: 200, 
            height: 20, 
            width: 150 
          });
      line.name = "StraightLine";

      await context.sync();
    });
'PowerPoint.ShapeCollection#addTextBox:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/shapes.yaml

    // This function gets the collection of shapes on the first slide,

    // and adds a text box to the collection, while specifying its text,

    // location, and size. Then it names the text box.

    await PowerPoint.run(async (context) => {
      const shapes = context.presentation.slides.getItemAt(0).shapes;
      const textbox = shapes.addTextBox("Hello!", 
          { 
            left: 100, 
            top: 300, 
            height: 300, 
            width: 450 
          });
      textbox.name = "Textbox";

      return context.sync();
    });
'PowerPoint.ShapeCollection#getItemAt:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/tags/tags.yaml

    await PowerPoint.run(async function(context) {
      const slide = context.presentation.slides.getItemAt(0);
      const shape = slide.shapes.getItemAt(0);
      shape.tags.add("MOUNTAIN", "Denali");

      await context.sync();

      const myShapeTag = shape.tags.getItem("MOUNTAIN");
      myShapeTag.load("key, value");

      await context.sync();

      console.log("Added key " + JSON.stringify(myShapeTag.key) + " with value " + JSON.stringify(myShapeTag.value));
    });
'PowerPoint.ShapeFill#setSolidColor:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-set-shapes.yaml

    // Changes the selected shapes fill color to red.

    await PowerPoint.run(async (context) => {
      const shapes = context.presentation.getSelectedShapes();
      const shapeCount = shapes.getCount();
      shapes.load("items");
      await context.sync();
      shapes.items.map((shape) => {
        shape.fill.setSolidColor("red");
      });
      await context.sync();
    });
'PowerPoint.ShapeFont#color:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/text/get-set-textrange.yaml

    // Sets the color of the selected text range to green.

    await PowerPoint.run(async (context) => {
      const textRange = context.presentation.getSelectedTextRange();
      textRange.font.color = "green";
      await context.sync();
    });
'PowerPoint.Slide#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/slide-management/get-set-slides.yaml

    // Deletes the selected slides.

    await PowerPoint.run(async (context) => {
      context.presentation.load("slides");
      await context.sync();
      const slides = context.presentation.getSelectedSlides();
      const slideCount = slides.getCount();
      slides.load("items");
      await context.sync();
      slides.items.map((slide) => {
        slide.delete();
      });
    });
'PowerPoint.Slide#setSelectedShapes:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-set-shapes.yaml

    // Reselects shapes that were saved previously.

    await PowerPoint.run(async (context) => {
      const slide1 = context.presentation.slides.getItem(savedSlideSelection[0]);
      await context.sync();
      slide1.setSelectedShapes(savedShapeSelection);
      await context.sync();
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-set-shapes.yaml

    // Selects the first two shapes on slide 1.

    await PowerPoint.run(async (context) => {
      context.presentation.load("slides");
      await context.sync();
      const slide1 = context.presentation.slides.getItemAt(0);
      slide1.load("shapes");
      await context.sync();
      const shapes = slide1.shapes;
      const shape1 = shapes.getItemAt(0);
      const shape2 = shapes.getItemAt(1);
      shape1.load("id");
      shape2.load("id");
      await context.sync();
      slide1.setSelectedShapes([shape1.id, shape2.id]);
      await context.sync();
    });
'PowerPoint.SlideCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/slide-management/add-slides.yaml

    const chosenMaster = $("#master-id").val() as string;

    const chosenLayout = $("#layout-id").val() as string;


    await PowerPoint.run(async function(context) {
      context.presentation.slides.add({
        slideMasterId: chosenMaster,
        layoutId: chosenLayout
      });
      await context.sync();
    });
'PowerPoint.SlideCollection#getItemAt:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/slide-management/get-set-slides.yaml

    // Selects slides 2, 4, and 5.

    await PowerPoint.run(async (context) => {
      context.presentation.load("slides");
      await context.sync();
      const slide2 = context.presentation.slides.getItemAt(1);
      const slide4 = context.presentation.slides.getItemAt(3);
      const slide5 = context.presentation.slides.getItemAt(4);
      slide2.load("id");
      slide4.load("id");
      slide5.load("id");
      try {
        await context.sync();
      } catch (error) {
        console.warn("This action requires at least 5 slides in the presentation.");
        return;
      }
      await context.sync();
      context.presentation.setSelectedSlides([slide2.id, slide4.id, slide5.id]);
      await context.sync();
    });
'PowerPoint.TagCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/tags/tags.yaml

    await PowerPoint.run(async function(context) {
      const slide = context.presentation.slides.getItemAt(0);
      slide.tags.add("OCEAN", "Indian");
      slide.tags.add("PLANET", "Jupiter");
      slide.tags.add("CONTINENT", "Antarctica");

      await context.sync();

      slide.tags.load("key, value");

      await context.sync();

      for (let i = 0; i < slide.tags.items.length; i++) {
        console.log("Added key " + JSON.stringify(slide.tags.items[i].key) + " with value " +        JSON.stringify(slide.tags.items[i].value));
      }
    });
'PowerPoint.TagCollection#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/tags/tags.yaml

    await PowerPoint.run(async function (context) {
      let presentationTags = context.presentation.tags;

      presentationTags.delete("COLOR");

      await context.sync();

      console.log(JSON.stringify(presentationTags));
    });
'PowerPoint.TagCollection#getItem:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/tags/tags.yaml

    await PowerPoint.run(async function(context) {
      let selectedSlideIndex = await getSelectedSlideIndex();

      // Decrement because the getSelectedSlideByIndex method is 1-based,
      // but the getItemAt method is 0-based.
      selectedSlideIndex = selectedSlideIndex - 1;
      const slide = context.presentation.slides.getItemAt(selectedSlideIndex);
      slide.tags.add("CUSTOMER_TYPE", "Premium");

      await context.sync();

      const audienceTag = slide.tags.getItem("CUSTOMER_TYPE");
      audienceTag.load("key, value");

      await context.sync();

      console.log("Added key " + JSON.stringify(audienceTag.key) + " with value " + JSON.stringify(audienceTag.value));
    });
'PowerPoint.TextRange#font:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/text/get-set-textrange.yaml

    // Sets the color of the selected text range to green.

    await PowerPoint.run(async (context) => {
      const textRange = context.presentation.getSelectedTextRange();
      textRange.font.color = "green";
      await context.sync();
    });
'PowerPoint.TextRange#setSelected:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/text/get-set-textrange.yaml

    // Selects the first 10 characters of the selected shape.

    await PowerPoint.run(async (context) => {
      const shapes = context.presentation.getSelectedShapes();
      const shapeCount = shapes.getCount();
      await context.sync();
      if (shapeCount.value !== 1) {
        console.warn("You must select only one shape with text in it.");
        return;
      }
      const shape = shapes.getItemAt(0);
      const textFrame = shape.textFrame.load("textRange,hasText");
      await context.sync();
      if (textFrame.hasText != true) {
        console.warn("You must select only one shape with text in it.");
        return;
      }
      const textRange = textFrame.textRange;
      textRange.load("text");
      await context.sync();
      if (textRange.text.length < 10) {
        console.warn("You must select only one shape with at least 10 characters in it.");
        return;
      }
      const textRange10 = textRange.getSubstring(0, 10);
      textRange10.setSelected();
      await context.sync();
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/text/get-set-textrange.yaml

    // Sets the range selection to the range that was saved previously.

    await PowerPoint.run(async (context) => {
      const slide1 = context.presentation.slides.getItem(savedTextSlideSelection[0]);
      const shape1 = slide1.shapes.getItem(savedTextShapeSelection[0]);
      const textRange = shape1.textFrame.textRange.getSubstring(savedTextTextRangeStart, savedTextTextRangeLength);
      textRange.setSelected();
      await context.sync();
    });
'Word.Alignment:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/paragraph-properties.yaml

    await Word.run(async (context) => {
      const body = context.document.body;
      body.clear();
      body.insertParagraph(
        "Video provides a powerful way to help you prove your point. When you click Online Video, you can paste in the embed code for the video you want to add. You can also type a keyword to search online for the video that best fits your document.",
        "Start"
      );
      body.paragraphs
        .getLast()
        .insertText(
          "To make your document look professionally produced, Word provides header, footer, cover page, and text box designs that complement each other. For example, you can add a matching cover page, header, and sidebar. Click Insert and then choose the elements you want from the different galleries.",
          "Replace"
        );
      body.paragraphs.getFirst().alignment = "Left";
      body.paragraphs.getLast().alignment = Word.Alignment.left;
    });
'Word.Annotation#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml

    // Deletes all annotations found in the selected paragraph.

    await Word.run(async (context) => {
      const paragraph = context.document.getSelection().paragraphs.getFirst();
      const annotations = paragraph.getAnnotations();
      annotations.load("id");

      await context.sync();

      const ids = [];
      for (var i = 0; i < annotations.items.length; i++) {
        const annotation = annotations.items[i];

        ids.push(annotation.id);
        annotation.delete();
      }

      await context.sync();

      console.log("Annotations deleted:", ids);
    });
'Word.Annotation#critiqueAnnotation:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml

    // Gets annotations found in the selected paragraph.

    await Word.run(async (context) => {
      const paragraph = context.document.getSelection().paragraphs.getFirst();
      const annotations = paragraph.getAnnotations();
      annotations.load("id,state,critiqueAnnotation");

      await context.sync();

      console.log("Annotations found:");

      for (var i = 0; i < annotations.items.length; i++) {
        const annotation = annotations.items[i];

        console.log(`${annotation.id} - ${annotation.state} - ${JSON.stringify(annotation.critiqueAnnotation.critique)}`);
      }
    });
'Word.Annotation#id:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml

    // Accepts the first annotation found in the selected paragraph.

    await Word.run(async (context) => {
      const paragraph = context.document.getSelection().paragraphs.getFirst();
      const annotations = paragraph.getAnnotations();
      annotations.load("id,state,critiqueAnnotation");

      await context.sync();

      for (var i = 0; i < annotations.items.length; i++) {
        const annotation = annotations.items[i];

        if (annotation.state === Word.AnnotationState.created) {
          console.log(`Accepting ${annotation.id}`);
          annotation.critiqueAnnotation.accept();

          await context.sync();
          break;
        }
      }
    });
'Word.Annotation#state:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml

    // Rejects the last annotation found in the selected paragraph.

    await Word.run(async (context) => {
      const paragraph = context.document.getSelection().paragraphs.getFirst();
      const annotations = paragraph.getAnnotations();
      annotations.load("id,state,critiqueAnnotation");

      await context.sync();

      for (var i = annotations.items.length - 1; i >= 0; i--) {
        const annotation = annotations.items[i];

        if (annotation.state === Word.AnnotationState.created) {
          console.log(`Rejecting ${annotation.id}`);
          annotation.critiqueAnnotation.reject();

          await context.sync();
          break;
        }
      }
    });
'Word.AnnotationClickedEventArgs:interface':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml

    // Registers event handlers.

    await Word.run(async (context) => {
      eventContexts[0] = context.document.onParagraphAdded.add(paragraphChanged);
      eventContexts[1] = context.document.onParagraphChanged.add(paragraphChanged);

      eventContexts[2] = context.document.onAnnotationClicked.add(onClickedHandler);
      eventContexts[3] = context.document.onAnnotationHovered.add(onHoveredHandler);
      eventContexts[4] = context.document.onAnnotationInserted.add(onInsertedHandler);
      eventContexts[5] = context.document.onAnnotationRemoved.add(onRemovedHandler);

      await context.sync();

      console.log("Event handlers registered.");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml

    async function onClickedHandler(args: Word.AnnotationClickedEventArgs) {
      await Word.run(async (context) => {
        const annotation = context.document.getAnnotationById(args.id);
        annotation.load("critiqueAnnotation");

        await context.sync();

        console.log(`AnnotationClicked: ${args.id} - ${JSON.stringify(annotation.critiqueAnnotation.critique)}`);
      });
    }
'Word.AnnotationCollection:class':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml

    // Gets annotations found in the selected paragraph.

    await Word.run(async (context) => {
      const paragraph = context.document.getSelection().paragraphs.getFirst();
      const annotations = paragraph.getAnnotations();
      annotations.load("id,state,critiqueAnnotation");

      await context.sync();

      console.log("Annotations found:");

      for (var i = 0; i < annotations.items.length; i++) {
        const annotation = annotations.items[i];

        console.log(`${annotation.id} - ${annotation.state} - ${JSON.stringify(annotation.critiqueAnnotation.critique)}`);
      }
    });
'Word.AnnotationHoveredEventArgs:interface':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml

    // Registers event handlers.

    await Word.run(async (context) => {
      eventContexts[0] = context.document.onParagraphAdded.add(paragraphChanged);
      eventContexts[1] = context.document.onParagraphChanged.add(paragraphChanged);

      eventContexts[2] = context.document.onAnnotationClicked.add(onClickedHandler);
      eventContexts[3] = context.document.onAnnotationHovered.add(onHoveredHandler);
      eventContexts[4] = context.document.onAnnotationInserted.add(onInsertedHandler);
      eventContexts[5] = context.document.onAnnotationRemoved.add(onRemovedHandler);

      await context.sync();

      console.log("Event handlers registered.");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml

    async function onHoveredHandler(args: Word.AnnotationHoveredEventArgs) {
      await Word.run(async (context) => {
        const annotation = context.document.getAnnotationById(args.id);
        annotation.load("critiqueAnnotation");

        await context.sync();

        console.log(`AnnotationHovered: ${args.id} - ${JSON.stringify(annotation.critiqueAnnotation.critique)}`);
      });
    }
'Word.AnnotationInsertedEventArgs:interface':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml

    // Registers event handlers.

    await Word.run(async (context) => {
      eventContexts[0] = context.document.onParagraphAdded.add(paragraphChanged);
      eventContexts[1] = context.document.onParagraphChanged.add(paragraphChanged);

      eventContexts[2] = context.document.onAnnotationClicked.add(onClickedHandler);
      eventContexts[3] = context.document.onAnnotationHovered.add(onHoveredHandler);
      eventContexts[4] = context.document.onAnnotationInserted.add(onInsertedHandler);
      eventContexts[5] = context.document.onAnnotationRemoved.add(onRemovedHandler);

      await context.sync();

      console.log("Event handlers registered.");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml

    async function onInsertedHandler(args: Word.AnnotationInsertedEventArgs) {
      await Word.run(async (context) => {
        const annotations = [];
        for (let i = 0; i < args.ids.length; i++) {
          let annotation = context.document.getAnnotationById(args.ids[i]);
          annotation.load("id,critiqueAnnotation");

          annotations.push(annotation);
        }

        await context.sync();

        for (let annotation of annotations) {
          console.log(`AnnotationInserted: ${annotation.id} - ${JSON.stringify(annotation.critiqueAnnotation.critique)}`);
        }
      });
    }
'Word.AnnotationRemovedEventArgs:interface':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml

    // Registers event handlers.

    await Word.run(async (context) => {
      eventContexts[0] = context.document.onParagraphAdded.add(paragraphChanged);
      eventContexts[1] = context.document.onParagraphChanged.add(paragraphChanged);

      eventContexts[2] = context.document.onAnnotationClicked.add(onClickedHandler);
      eventContexts[3] = context.document.onAnnotationHovered.add(onHoveredHandler);
      eventContexts[4] = context.document.onAnnotationInserted.add(onInsertedHandler);
      eventContexts[5] = context.document.onAnnotationRemoved.add(onRemovedHandler);

      await context.sync();

      console.log("Event handlers registered.");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml

    async function onRemovedHandler(args: Word.AnnotationRemovedEventArgs) {
      await Word.run(async (context) => {
        for (let id of args.ids) {
          console.log(`AnnotationRemoved: ${id}`);
        }
      });
    }
'Word.AnnotationSet:interface':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml

    // Adds annotations to the selected paragraph.

    await Word.run(async (context) => {
      const paragraph = context.document.getSelection().paragraphs.getFirst();
      const critique1 = {
        colorScheme: Word.CritiqueColorScheme.red,
        start: 1,
        length: 3
      };
      const critique2 = {
        colorScheme: Word.CritiqueColorScheme.green,
        start: 6,
        length: 1
      };
      const critique3 = {
        colorScheme: Word.CritiqueColorScheme.blue,
        start: 10,
        length: 3
      };
      const critique4 = {
        colorScheme: Word.CritiqueColorScheme.lavender,
        start: 14,
        length: 3
      };
      const critique5 = {
        colorScheme: Word.CritiqueColorScheme.berry,
        start: 18,
        length: 10
      };
      const annotationSet: Word.AnnotationSet = {
        critiques: [critique1, critique2, critique3, critique4, critique5]
      };

      const annotationIds = paragraph.insertAnnotations(annotationSet);

      await context.sync();

      console.log("Annotations inserted:", annotationIds.value);
    });
'Word.AnnotationState:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml

    // Accepts the first annotation found in the selected paragraph.

    await Word.run(async (context) => {
      const paragraph = context.document.getSelection().paragraphs.getFirst();
      const annotations = paragraph.getAnnotations();
      annotations.load("id,state,critiqueAnnotation");

      await context.sync();

      for (var i = 0; i < annotations.items.length; i++) {
        const annotation = annotations.items[i];

        if (annotation.state === Word.AnnotationState.created) {
          console.log(`Accepting ${annotation.id}`);
          annotation.critiqueAnnotation.accept();

          await context.sync();
          break;
        }
      }
    });
'Word.Application#createDocument:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/insert-external-document.yaml

    // Updates the text of the current document with the text from another
    document passed in as a Base64-encoded string.

    await Word.run(async (context) => {
      // Use the Base64-encoded string representation of the selected .docx file.
      const externalDoc = context.application.createDocument(externalDocument);
      await context.sync();

      const externalDocBody = externalDoc.body;
      externalDocBody.load("text");
      await context.sync();

      // Insert the external document's text at the beginning of the current document's body.
      const externalDocBodyText = externalDocBody.text;
      const currentDocBody = context.document.body;
      currentDocBody.insertText(externalDocBodyText, Word.InsertLocation.start);
      await context.sync();
    });
'Word.Application#retrieveStylesFromBase64:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/get-external-styles.yaml

    // Gets style info from another document passed in as a Base64-encoded
    string.

    await Word.run(async (context) => {
      const retrievedStyles = context.application.retrieveStylesFromBase64(externalDocument);
      await context.sync();

      console.log("Styles from the other document:", retrievedStyles.value);
    });
'Word.Body#clear:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-body.yaml

    // Clears out the content from the document body.

    // Run a batch operation against the Word object model.

    await Word.run(async (context) => {
      // Create a proxy object for the document body.
      const body = context.document.body;

      // Queue a command to clear the contents of the body.
      body.clear();

      console.log("Cleared the body contents.");
    });


    // The Silly stories add-in sample shows how the clear method can be used to
    clear the contents of a document.

    // https://aka.ms/sillystorywordaddin
'Word.Body#getComments:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-comments.yaml

    // Gets the comments in the document body.

    await Word.run(async (context) => {
      const comments = context.document.body.getComments();

      // Load objects for display in Script Lab console.
      comments.load();
      await context.sync();

      console.log("All comments:");
      console.log(comments);
    });
'Word.Body#getHtml:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-body.yaml

    // Gets the HTML that represents the content of the body.

    // Run a batch operation against the Word object model.

    await Word.run(async (context) => {
      // Create a proxy object for the document body.
      const body = context.document.body;

      // Queue a command to get the HTML contents of the body.
      const bodyHTML = body.getHtml();

      // Synchronize the document state by executing the queued commands, and return a promise to indicate task completion.
      await context.sync();

      console.log("Body contents (HTML): " + bodyHTML.value);
    });
'Word.Body#getOoxml:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-body.yaml

    // Gets the OOXML that represents the content of the body.

    // Run a batch operation against the Word object model.

    await Word.run(async (context) => {
      // Create a proxy object for the document body.
      const body = context.document.body;

      // Queue a command to get the OOXML contents of the body.
      const bodyOOXML = body.getOoxml();

      // Synchronize the document state by executing the queued commands, and return a promise to indicate task completion.
      await context.sync();

      console.log("Body contents (OOXML): " + bodyOOXML.value);
    });
'Word.Body#getTrackedChanges:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-tracked-changes.yaml

    // Gets all tracked changes.

    await Word.run(async (context) => {
      const body = context.document.body;
      const trackedChanges = body.getTrackedChanges();
      trackedChanges.load();
      await context.sync();

      console.log(trackedChanges);
    });
'Word.Body#insertBreak:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-body.yaml

    // Inserts a page break at the beginning of the document.

    // Run a batch operation against the Word object model.

    await Word.run(async (context) => {
      // Create a proxy object for the document body.
      const body = context.document.body;

      // Queue a command to insert a page break at the start of the document body.
      body.insertBreak(Word.BreakType.page, Word.InsertLocation.start);

      // Synchronize the document state by executing the queued commands, and return a promise to indicate task completion.
      await context.sync();

      console.log("Added a page break at the start of the document body.");
    });
'Word.Body#insertContentControl:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-body.yaml

    // Creates a content control using the document body.

    // Run a batch operation against the Word object model.

    await Word.run(async (context) => {
      // Create a proxy object for the document body.
      const body = context.document.body;

      // Queue a command to wrap the body in a content control.
      body.insertContentControl();

      // Synchronize the document state by executing the queued commands, and return a promise to indicate task completion.
      await context.sync();

      console.log("Wrapped the body in a content control.");
    });
'Word.Body#insertFileFromBase64:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-body.yaml

    // Inserts the body from the external document at the beginning of this
    document.

    // Run a batch operation against the Word object model.

    await Word.run(async (context) => {
      // Create a proxy object for the document body.
      const body = context.document.body;

      // Queue a command to insert the Base64-encoded string representation of the body of the selected .docx file at the beginning of the current document.
      body.insertFileFromBase64(externalDocument, Word.InsertLocation.start);

      // Synchronize the document state by executing the queued commands, and return a promise to indicate task completion.
      await context.sync();

      console.log("Added Base64-encoded text to the beginning of the document body.");
    });
'Word.Body#insertHtml:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-body.yaml

    // Inserts the HTML at the beginning of this document.

    // Run a batch operation against the Word object model.

    await Word.run(async (context) => {
      // Create a proxy object for the document body.
      const body = context.document.body;

      // Queue a command to insert HTML at the beginning of the document.
      body.insertHtml("<strong>This is text inserted with body.insertHtml()</strong>", Word.InsertLocation.start);

      // Synchronize the document state by executing the queued commands, and return a promise to indicate task completion.
      await context.sync();

      console.log("HTML added to the beginning of the document body.");
    });
'Word.Body#insertInlinePictureFromBase64:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-body.yaml

    // Inserts an image inline at the beginning of this document.

    // Run a batch operation against the Word object model.

    await Word.run(async (context) => {
      // Create a proxy object for the document body.
      const body = context.document.body;

      // Base64-encoded image to insert inline.
      const base64EncodedImg =
        "iVBORw0KGgoAAAANSUhEUgAAAB4AAAANCAIAAAAxEEnAAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAACFSURBVDhPtY1BEoQwDMP6/0+XgIMTBAeYoTqso9Rkx1zG+tNj1H94jgGzeNSjteO5vtQQuG2seO0av8LzGbe3anzRoJ4ybm/VeKEerAEbAUpW4aWQCmrGFWykRzGBCnYy2ha3oAIq2MloW9yCCqhgJ6NtcQsqoIKdjLbFLaiACnYyf2fODbrjZcXfr2F4AAAAAElFTkSuQmCC";

      // Queue a command to insert a Base64-encoded image at the beginning of the current document.
      body.insertInlinePictureFromBase64(base64EncodedImg, Word.InsertLocation.start);

      // Synchronize the document state by executing the queued commands, and return a promise to indicate task completion.
      await context.sync();

      console.log("Added a Base64-encoded image to the beginning of the document body.");
    });
'Word.Body#insertOoxml:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-body.yaml

    // Inserts OOXML at the beginning of this document.

    // Run a batch operation against the Word object model.

    await Word.run(async (context) => {
      // Create a proxy object for the document body.
      const body = context.document.body;

      // Queue a command to insert OOXML at the beginning of the body.
      body.insertOoxml(
        "<pkg:package xmlns:pkg='http://schemas.microsoft.com/office/2006/xmlPackage'><pkg:part pkg:name='/_rels/.rels' pkg:contentType='application/vnd.openxmlformats-package.relationships+xml' pkg:padding='512'><pkg:xmlData><Relationships xmlns='http://schemas.openxmlformats.org/package/2006/relationships'><Relationship Id='rId1' Type='http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument' Target='word/document.xml'/></Relationships></pkg:xmlData></pkg:part><pkg:part pkg:name='/word/document.xml' pkg:contentType='application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml'><pkg:xmlData><w:document xmlns:w='http://schemas.openxmlformats.org/wordprocessingml/2006/main' ><w:body><w:p><w:pPr><w:spacing w:before='360' w:after='0' w:line='480' w:lineRule='auto'/><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr></w:pPr><w:r><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr><w:t>This text has formatting directly applied to achieve its font size, color, line spacing, and paragraph spacing.</w:t></w:r></w:p></w:body></w:document></pkg:xmlData></pkg:part></pkg:package>",
        Word.InsertLocation.start
      );

      // Synchronize the document state by executing the queued commands, and return a promise to indicate task completion.
      await context.sync();

      console.log("Added OOXML to the beginning of the document body.");
    });


    // Read "Understand when and how to use Office Open XML in your Word add-in"
    for guidance on working with OOXML.

    //
    https://learn.microsoft.com/office/dev/add-ins/word/create-better-add-ins-for-word-with-office-open-xml


    // The Word-Add-in-DocumentAssembly sample shows how you can use this API to
    assemble a document.

    // https://github.com/OfficeDev/Word-Add-in-DocumentAssembly
'Word.Body#insertParagraph:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/insert-formatted-text.yaml

    await Word.run(async (context) => {
      // Second sentence, let's insert it as a paragraph after the previously inserted one.
      const secondSentence = context.document.body.insertParagraph(
        "This is the first text with a custom style.",
        "End"
      );
      secondSentence.font.set({
        bold: false,
        italic: true,
        name: "Berlin Sans FB",
        color: "blue",
        size: 30
      });

      await context.sync();
    });
'Word.Body#insertTable:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/40-tables/table-cell-access.yaml

    await Word.run(async (context) => {
      // Use a two-dimensional array to hold the initial table values.
      const data = [
        ["Tokyo", "Beijing", "Seattle"],
        ["Apple", "Orange", "Pineapple"]
      ];
      const table = context.document.body.insertTable(2, 3, "Start", data);
      table.styleBuiltIn = Word.BuiltInStyleName.gridTable5Dark_Accent2;
      table.styleFirstColumn = false;

      await context.sync();
    });
'Word.Body#insertText:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-body.yaml

    // Inserts text at the beginning of this document.

    // Run a batch operation against the Word object model.

    await Word.run(async (context) => {
      // Create a proxy object for the document body.
      const body = context.document.body;

      // Queue a command to insert text at the beginning of the current document.
      body.insertText('This is text inserted with body.insertText()', Word.InsertLocation.start);

      // Synchronize the document state by executing the queued commands, and return a promise to indicate task completion.
      await context.sync();

      console.log('Text added to the beginning of the document body.');
    });
'Word.Body#search:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/search.yaml

    // Does a basic text search and highlights matches in the document.

    await Word.run(async (context) => {
      const results = context.document.body.search("Online");
      results.load("length");

      await context.sync();

      // Let's traverse the search results and highlight matches.
      for (let i = 0; i < results.items.length; i++) {
        results.items[i].font.highlightColor = "yellow";
      }

      await context.sync();
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/search.yaml

    // Does a wildcard search and highlights matches in the document.

    await Word.run(async (context) => {
      // Construct a wildcard expression and set matchWildcards to true in order to use wildcards.
      const results = context.document.body.search("$*.[0-9][0-9]", { matchWildcards: true });
      results.load("length");

      await context.sync();

      // Let's traverse the search results and highlight matches.
      for (let i = 0; i < results.items.length; i++) {
        results.items[i].font.highlightColor = "red";
        results.items[i].font.color = "white";
      }

      await context.sync();
    });
'Word.Body#select:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-body.yaml

    // Selects the entire body.

    // Run a batch operation against the Word object model.

    await Word.run(async (context) => {
      // Create a proxy object for the document body.
      const body = context.document.body;

      // Queue a command to select the document body.
      // The Word UI will move to the selected document body.
      body.select();

      console.log("Selected the document body.");
    });
'Word.Body#fields:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-fields.yaml

    // Gets all fields in the document body.

    await Word.run(async (context) => {
      const fields = context.document.body.fields.load("items");

      await context.sync();

      if (fields.items.length === 0) {
        console.log("No fields in this document.");
      } else {
        fields.load(["code", "result"]);
        await context.sync();

        for (let i = 0; i < fields.items.length; i++) {
          console.log(`Field ${i + 1}'s code: ${fields.items[i].code}`);
          console.log(`Field ${i + 1}'s result: ${JSON.stringify(fields.items[i].result)}`);
        }
      }
    });
'Word.Body#font:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-body.yaml

    // Gets the style and the font size, font name, and font color properties on
    the body object.

    // Run a batch operation against the Word object model.

    await Word.run(async (context) => {
      // Create a proxy object for the document body.
      const body = context.document.body;

      // Queue a command to load font and style information for the document body.
      body.load("font/size, font/name, font/color, style");

      // Synchronize the document state by executing the queued commands, and return a promise to indicate task completion.
      await context.sync();

      // Show font-related property values on the body object.
      const results =
        "Font size: " +
        body.font.size +
        "; Font name: " +
        body.font.name +
        "; Font color: " +
        body.font.color +
        "; Body style: " +
        body.style;

      console.log(results);
    });
'Word.Body#footnotes:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-footnotes.yaml

    // Gets the footnotes in the document body.

    await Word.run(async (context) => {
      const footnotes = context.document.body.footnotes;
      footnotes.load("length");
      await context.sync();

      console.log("Number of footnotes in the document body: " + footnotes.items.length);
    });
'Word.Body#inlinePictures:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/15-images/insert-and-get-pictures.yaml

    // Gets the first image in the document.

    await Word.run(async (context) => {
      const firstPicture = context.document.body.inlinePictures.getFirst();
      firstPicture.load("width, height");

      await context.sync();
      console.log(`Image dimensions: ${firstPicture.width} x ${firstPicture.height}`);
      // Get the image encoded as Base64.
      const base64 = firstPicture.getBase64ImageSrc();

      await context.sync();
      console.log(base64.value);
    });
'Word.Body#paragraphs:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/get-word-count.yaml

    // Counts how many times each term appears in the document.

    await Word.run(async (context) => {
      const paragraphs = context.document.body.paragraphs;
      paragraphs.load("text");
      await context.sync();

      // Split up the document text using existing spaces as the delimiter.
      let text = [];
      paragraphs.items.forEach((item) => {
        let paragraph = item.text.trim();
        if (paragraph) {
          paragraph.split(" ").forEach((term) => {
            let currentTerm = term.trim();
            if (currentTerm) {
              text.push(currentTerm);
            }
          });
        }
      });

      // Determine the list of unique terms.
      let makeTextDistinct = new Set(text);
      let distinctText = Array.from(makeTextDistinct);
      let allSearchResults = [];

      for (let i = 0; i < distinctText.length; i++) {
        let results = context.document.body.search(distinctText[i], { matchCase: true, matchWholeWord: true });
        results.load("text");

        // Map each search term with its results.
        let correlatedResults = {
          searchTerm: distinctText[i],
          hits: results
        };

        allSearchResults.push(correlatedResults);
      }

      await context.sync();

      // Display the count for each search term.
      allSearchResults.forEach((result) => {
        let length = result.hits.items.length;

        console.log("Search term: " + result.searchTerm + " => Count: " + length);
      });
    });
'Word.Body#tables:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/40-tables/table-cell-access.yaml

    // Gets the content of the first cell in the first table.

    await Word.run(async (context) => {
      const firstCell = context.document.body.tables.getFirst().getCell(0, 0).body;
      firstCell.load("text");

      await context.sync();
      console.log("First cell's text is: " + firstCell.text);
    });
'Word.Body#text:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-body.yaml

    // Gets the text content of the body.

    // Run a batch operation against the Word object model.

    await Word.run(async (context) => {
      // Create a proxy object for the document body.
      const body = context.document.body;

      // Queue a command to load the text in document body.
      body.load("text");

      // Synchronize the document state by executing the queued commands, and return a promise to indicate task completion.
      await context.sync();

      console.log("Body contents (text): " + body.text);
    });
'Word.Body#type:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-footnotes.yaml

    // Gets the referenced note's item type and body type, which are both
    "Footnote".

    await Word.run(async (context) => {
      const footnotes = context.document.body.footnotes;
      footnotes.load("items");
      await context.sync();

      const referenceNumber = $("#input-reference").val();
      const mark = (referenceNumber as number) - 1;
      const item = footnotes.items[mark];
      console.log(`Note type of footnote ${referenceNumber}: ${item.type}`);

      item.body.load("type");
      await context.sync();

      console.log(`Body type of note: ${item.body.type}`);
    });
'Word.BodyType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-footnotes.yaml

    // Gets the referenced note's item type and body type, which are both
    "Footnote".

    await Word.run(async (context) => {
      const footnotes = context.document.body.footnotes;
      footnotes.load("items");
      await context.sync();

      const referenceNumber = $("#input-reference").val();
      const mark = (referenceNumber as number) - 1;
      const item = footnotes.items[mark];
      console.log(`Note type of footnote ${referenceNumber}: ${item.type}`);

      item.body.load("type");
      await context.sync();

      console.log(`Body type of note: ${item.body.type}`);
    });
'Word.BorderCollection:class':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/99-preview-apis/manage-styles.yaml

    // Updates border properties (e.g., type, width, color) of the specified
    style.

    await Word.run(async (context) => {
      const styleName = $("#style-name").val() as string;
      if (styleName == "") {
        console.warn("Enter a style name to update border properties.");
        return;
      }

      const style = context.document.getStyles().getByNameOrNullObject(styleName);
      style.load();
      await context.sync();

      if (style.isNullObject) {
        console.warn(`There's no existing style with the name '${styleName}'.`);
      } else {
        const borders = style.borders;
        borders.load("items");
        await context.sync();

        borders.outsideBorderType = Word.BorderType.dashed;
        borders.outsideBorderWidth = Word.BorderWidth.pt025;
        borders.outsideBorderColor = "green";
        console.log("Updated outside borders");
      }
    });
'Word.BorderCollection#outsideBorderColor:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/99-preview-apis/manage-styles.yaml

    // Updates border properties (e.g., type, width, color) of the specified
    style.

    await Word.run(async (context) => {
      const styleName = $("#style-name").val() as string;
      if (styleName == "") {
        console.warn("Enter a style name to update border properties.");
        return;
      }

      const style = context.document.getStyles().getByNameOrNullObject(styleName);
      style.load();
      await context.sync();

      if (style.isNullObject) {
        console.warn(`There's no existing style with the name '${styleName}'.`);
      } else {
        const borders = style.borders;
        borders.load("items");
        await context.sync();

        borders.outsideBorderType = Word.BorderType.dashed;
        borders.outsideBorderWidth = Word.BorderWidth.pt025;
        borders.outsideBorderColor = "green";
        console.log("Updated outside borders");
      }
    });
'Word.BorderCollection#outsideBorderType:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/99-preview-apis/manage-styles.yaml

    // Updates border properties (e.g., type, width, color) of the specified
    style.

    await Word.run(async (context) => {
      const styleName = $("#style-name").val() as string;
      if (styleName == "") {
        console.warn("Enter a style name to update border properties.");
        return;
      }

      const style = context.document.getStyles().getByNameOrNullObject(styleName);
      style.load();
      await context.sync();

      if (style.isNullObject) {
        console.warn(`There's no existing style with the name '${styleName}'.`);
      } else {
        const borders = style.borders;
        borders.load("items");
        await context.sync();

        borders.outsideBorderType = Word.BorderType.dashed;
        borders.outsideBorderWidth = Word.BorderWidth.pt025;
        borders.outsideBorderColor = "green";
        console.log("Updated outside borders");
      }
    });
'Word.BorderCollection#outsideBorderWidth:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/99-preview-apis/manage-styles.yaml

    // Updates border properties (e.g., type, width, color) of the specified
    style.

    await Word.run(async (context) => {
      const styleName = $("#style-name").val() as string;
      if (styleName == "") {
        console.warn("Enter a style name to update border properties.");
        return;
      }

      const style = context.document.getStyles().getByNameOrNullObject(styleName);
      style.load();
      await context.sync();

      if (style.isNullObject) {
        console.warn(`There's no existing style with the name '${styleName}'.`);
      } else {
        const borders = style.borders;
        borders.load("items");
        await context.sync();

        borders.outsideBorderType = Word.BorderType.dashed;
        borders.outsideBorderWidth = Word.BorderWidth.pt025;
        borders.outsideBorderColor = "green";
        console.log("Updated outside borders");
      }
    });
'Word.BorderLocation:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/40-tables/manage-formatting.yaml

    // Gets border details about the first table in the document.

    await Word.run(async (context) => {
      const firstTable = context.document.body.tables.getFirst();
      const borderLocation = Word.BorderLocation.top;
      const border = firstTable.getBorder(borderLocation);
      border.load(["type", "color", "width"]);
      await context.sync();

      console.log(`Details about the ${borderLocation} border of the first table:`);
      console.log(`- Color: ${border.color}`);
      console.log(`- Type: ${border.type}`);
      console.log(`- Width: ${border.width} points`);
    });
'Word.BorderType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/40-tables/manage-formatting.yaml

    // Gets border details about the first of the first table in the document.

    await Word.run(async (context) => {
      const firstTable = context.document.body.tables.getFirst();
      const firstCell = firstTable.getCell(0, 0);
      const borderLocation = "Left";
      const border = firstCell.getBorder(borderLocation);
      border.load(["type", "color", "width"]);
      await context.sync();

      console.log(`Details about the ${borderLocation} border of the first table's first cell:`);
      console.log(`- Color: ${border.color}`);
      console.log(`- Type: ${border.type}`);
      console.log(`- Width: ${border.width} points`);
    });
'Word.BorderWidth:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/99-preview-apis/manage-styles.yaml

    // Updates border properties (e.g., type, width, color) of the specified
    style.

    await Word.run(async (context) => {
      const styleName = $("#style-name").val() as string;
      if (styleName == "") {
        console.warn("Enter a style name to update border properties.");
        return;
      }

      const style = context.document.getStyles().getByNameOrNullObject(styleName);
      style.load();
      await context.sync();

      if (style.isNullObject) {
        console.warn(`There's no existing style with the name '${styleName}'.`);
      } else {
        const borders = style.borders;
        borders.load("items");
        await context.sync();

        borders.outsideBorderType = Word.BorderType.dashed;
        borders.outsideBorderWidth = Word.BorderWidth.pt025;
        borders.outsideBorderColor = "green";
        console.log("Updated outside borders");
      }
    });
'Word.BreakType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/insert-line-and-page-breaks.yaml

    await Word.run(async (context) => {
      context.document.body.paragraphs.getFirst().insertBreak(Word.BreakType.page, "After");

      await context.sync();
      console.log("success");
    });
'Word.BuiltInStyleName:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/insert-formatted-text.yaml

    await Word.run(async (context) => {
      const sentence = context.document.body.insertParagraph(
        "To be or not to be",
        "End"
      );

      // Use styleBuiltIn to use an enumeration of existing styles. If your style is custom make sure to use: range.style = "name of your style";
      sentence.styleBuiltIn = Word.BuiltInStyleName.intenseReference;

      await context.sync();
    });
'Word.CellPaddingLocation:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/40-tables/manage-formatting.yaml

    // Gets cell padding details about the first table in the document.

    await Word.run(async (context) => {
      const firstTable = context.document.body.tables.getFirst();
      const cellPaddingLocation = Word.CellPaddingLocation.right;
      const cellPadding = firstTable.getCellPadding(cellPaddingLocation);
      await context.sync();

      console.log(
        `Cell padding details about the ${cellPaddingLocation} border of the first table: ${cellPadding.value} points`
      );
    });
'Word.ChangeTrackingMode:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-change-tracking.yaml

    // Gets the current change tracking mode.

    await Word.run(async (context) => {
      const document = context.document;
      document.load("changeTrackingMode");
      await context.sync();

      if (document.changeTrackingMode === Word.ChangeTrackingMode.trackMineOnly) {
        console.log("Only my changes are being tracked.");
      } else if (document.changeTrackingMode === Word.ChangeTrackingMode.trackAll) {
        console.log("Everyone's changes are being tracked.");
      } else {
        console.log("No changes are being tracked.");
      }
    });
'Word.ChangeTrackingVersion:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-change-tracking.yaml

    // Gets the reviewed text.

    await Word.run(async (context) => {
      const range = context.document.getSelection();
      const before = range.getReviewedText(Word.ChangeTrackingVersion.original);
      const after = range.getReviewedText(Word.ChangeTrackingVersion.current);

      await context.sync();

      console.log(`Reviewed text (before):\n${before.value}`);
      console.log(`Reviewed text (after):\n${after.value}`);
    });
'Word.Comment#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-comments.yaml

    // Deletes the first comment in the selected content.

    await Word.run(async (context) => {
      context.document
        .getSelection()
        .getComments()
        .getFirst()
        .delete();
      await context.sync();

      console.log("Comment deleted");
    });
'Word.Comment#getRange:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-comments.yaml

    // Gets the range of the first comment in the selected content.

    await Word.run(async (context) => {
      const range = context.document
        .getSelection()
        .getComments()
        .getFirst()
        .getRange();
      range.load("text");
      await context.sync();

      console.log(`Comment location: ${range.text}`);
    });
'Word.Comment#reply:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-comments.yaml

    // Replies to the first active comment in the selected content.

    await Word.run(async (context) => {
      const text = $("#reply-text")
        .val()
        .toString();
      const comments = context.document.getSelection().getComments();
      comments.load("items");
      await context.sync();
      const firstActiveComment = comments.items.find((item) => item.resolved !== true);
      if (firstActiveComment) {
        const reply = firstActiveComment.reply(text);
        console.log("Reply added");
      } else {
        console.log("No active comment was found in the selection so couldn't reply.");
      }
    });
'Word.Comment#content:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-comments.yaml

    // Edits the first comment in the selected content.

    await Word.run(async (context) => {
      const text = $("#edit-comment-text")
        .val()
        .toString();
      const comment = context.document
        .getSelection()
        .getComments()
        .getFirst();
      comment.content = text;

      // Load object for display in Script Lab console.
      comment.load();
      await context.sync();

      console.log("Comment content changed:");
      console.log(comment);
    });
'Word.Comment#resolved:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-comments.yaml

    // Toggles Resolved status of the first comment in the selected content.

    await Word.run(async (context) => {
      const comment = context.document
        .getSelection()
        .getComments()
        .getFirst();
      comment.load("resolved");
      await context.sync();

      // Toggle resolved status.
      // If the comment is active, set as resolved.
      // If it's resolved, set resolved to false.
      const toggleResolved: boolean = comment.resolved;
      comment.resolved = !toggleResolved;
      comment.load();
      await context.sync();

      console.log(`Comment Resolved status: ${comment.resolved}`);
      console.log(comment);
    });
'Word.CommentCollection#getFirst:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-comments.yaml

    // Gets the range of the first comment in the selected content.

    await Word.run(async (context) => {
      const range = context.document
        .getSelection()
        .getComments()
        .getFirst()
        .getRange();
      range.load("text");
      await context.sync();

      console.log(`Comment location: ${range.text}`);
    });
'Word.CommentCollection#items:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-comments.yaml

    // Replies to the first active comment in the selected content.

    await Word.run(async (context) => {
      const text = $("#reply-text")
        .val()
        .toString();
      const comments = context.document.getSelection().getComments();
      comments.load("items");
      await context.sync();
      const firstActiveComment = comments.items.find((item) => item.resolved !== true);
      if (firstActiveComment) {
        const reply = firstActiveComment.reply(text);
        console.log("Reply added");
      } else {
        console.log("No active comment was found in the selection so couldn't reply.");
      }
    });
'Word.CompareTarget:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/99-preview-apis/compare-documents.yaml

    // Compares the current document with a specified external document.

    await Word.run(async (context) => {
      // Absolute path of an online or local document.
      const filePath = $("#filePath")
        .val()
        .toString();
      // Options that configure the compare operation.
      const options = {
        compareTarget: Word.CompareTarget.compareTargetCurrent,
        detectFormatChanges: false
        // Other options you choose...
        };
      context.document.compare(filePath, options);

      await context.sync();

      console.log("Differences shown in the current document.");
    });
'Word.ContentControl#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/content-control-ondeleted-event.yaml

    await Word.run(async (context) => {
      const contentControls = context.document.contentControls.getByTag("forTesting");
      contentControls.load("items");
      await context.sync();

      if (contentControls.items.length === 0) {
        console.log("There are no content controls in this document.");
      } else {
        console.log("Control to be deleted:");
        console.log(contentControls.items[0]);
        contentControls.items[0].delete(false);
        await context.sync();
      }
    });
'Word.ContentControl#set:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/insert-and-change-content-controls.yaml

    // Adds title and colors to odd and even content controls and changes their
    appearance.

    await Word.run(async (context) => {
      // Get the complete sentence (as range) associated with the insertion point.
      let evenContentControls = context.document.contentControls.getByTag("even");
      let oddContentControls = context.document.contentControls.getByTag("odd");
      evenContentControls.load("length");
      oddContentControls.load("length");

      await context.sync();

      for (let i = 0; i < evenContentControls.items.length; i++) {
        // Change a few properties and append a paragraph
        evenContentControls.items[i].set({
          color: "red",
          title: "Odd ContentControl #" + (i + 1),
          appearance: Word.ContentControlAppearance.tags
        });
        evenContentControls.items[i].insertParagraph("This is an odd content control", "End");
      }

      for (let j = 0; j < oddContentControls.items.length; j++) {
        // Change a few properties and append a paragraph
        oddContentControls.items[j].set({
          color: "green",
          title: "Even ContentControl #" + (j + 1),
          appearance: "Tags"
        });
        oddContentControls.items[j].insertHtml("This is an <b>even</b> content control", "End");
      }

      await context.sync();
    });
'Word.ContentControl#onDataChanged:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/content-control-ondatachanged-event.yaml

    await Word.run(async (context) => {
      const contentControls = context.document.contentControls;
      contentControls.load("items");
      await context.sync();

      // Register the onDataChanged event handler on each content control.
      if (contentControls.items.length === 0) {
        console.log("There aren't any content controls in this document so can't register event handlers.");
      } else {
        for (let i = 0; i < contentControls.items.length; i++) {
          eventContexts[i] = contentControls.items[i].onDataChanged.add(contentControlDataChanged);
          contentControls.items[i].track();
        }

        await context.sync();

        console.log("Added event handlers for when data is changed in content controls.");
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/content-control-ondatachanged-event.yaml

    async function contentControlDataChanged(event:
    Word.ContentControlDataChangedEventArgs) {
      await Word.run(async (context) => {
        console.log(`${event.eventType} event detected. IDs of content controls where data was changed:`);
        console.log(event.ids);
      });
    }
'Word.ContentControl#onDeleted:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/content-control-ondeleted-event.yaml

    await Word.run(async (context) => {
      const contentControls = context.document.contentControls;
      contentControls.load("items");
      await context.sync();

      // Register the onDeleted event handler on each content control.
      if (contentControls.items.length === 0) {
        console.log("There aren't any content controls in this document so can't register event handlers.");
      } else {
        for (let i = 0; i < contentControls.items.length; i++) {
          eventContexts[i] = contentControls.items[i].onDeleted.add(contentControlDeleted);
          contentControls.items[i].track();
        }

        await context.sync();

        console.log("Added event handlers for when content controls are deleted.");
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/content-control-ondeleted-event.yaml

    async function contentControlDeleted(event:
    Word.ContentControlDeletedEventArgs) {
      await Word.run(async (context) => {
        console.log(`${event.eventType} event detected. IDs of content controls that were deleted:`);
        console.log(event.ids);
      });
    }
'Word.ContentControl#onEntered:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/content-control-onentered-event.yaml

    await Word.run(async (context) => {
      const contentControls = context.document.contentControls;
      contentControls.load("items");
      await context.sync();

      // Register the onEntered event handler on each content control.
      if (contentControls.items.length === 0) {
        console.log("There aren't any content controls in this document so can't register event handlers.");
      } else {
        for (let i = 0; i < contentControls.items.length; i++) {
          eventContexts[i] = contentControls.items[i].onEntered.add(contentControlEntered);
          contentControls.items[i].track();
        }

        await context.sync();

        console.log("Added event handlers for when the cursor is placed in content controls.");
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/content-control-onentered-event.yaml

    async function contentControlEntered(event:
    Word.ContentControlEnteredEventArgs) {
      await Word.run(async (context) => {
        console.log(`${event.eventType} event detected. ID of content control that was entered: ${event.ids[0]}`);
      });
    }
'Word.ContentControl#onExited:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/content-control-onexited-event.yaml

    await Word.run(async (context) => {
      const contentControls = context.document.contentControls;
      contentControls.load("items");
      await context.sync();

      // Register the onExited event handler on each content control.
      if (contentControls.items.length === 0) {
        console.log("There aren't any content controls in this document so can't register event handlers.");
      } else {
        for (let i = 0; i < contentControls.items.length; i++) {
          eventContexts[i] = contentControls.items[i].onExited.add(contentControlExited);
          contentControls.items[i].track();
        }

        await context.sync();

        console.log("Added event handlers for when the cursor is removed from within content controls.");
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/content-control-onexited-event.yaml

    async function contentControlExited(event:
    Word.ContentControlExitedEventArgs) {
      await Word.run(async (context) => {
        console.log(`${event.eventType} event detected. ID of content control that was exited: ${event.ids[0]}`);
      });
    }
'Word.ContentControl#onSelectionChanged:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/content-control-onselectionchanged-event.yaml

    await Word.run(async (context) => {
      const contentControls = context.document.contentControls;
      contentControls.load("items");
      await context.sync();

      if (contentControls.items.length === 0) {
        console.log("There aren't any content controls in this document so can't register event handlers.");
      } else {
        for (let i = 0; i < contentControls.items.length; i++) {
          eventContexts[i] = contentControls.items[i].onSelectionChanged.add(contentControlSelectionChanged);
          contentControls.items[i].track();
        }

        await context.sync();

        console.log("Added event handlers for when selections are changed in content controls.");
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/content-control-onselectionchanged-event.yaml

    async function contentControlSelectionChanged(event:
    Word.ContentControlSelectionChangedEventArgs) {
      await Word.run(async (context) => {
        console.log(`${event.eventType} event detected. IDs of content controls where selection was changed:`);
        console.log(event.ids);
      });
    }
'Word.ContentControl#tag:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/insert-and-change-content-controls.yaml

    // Traverses each paragraph of the document and wraps a content control on
    each with either a even or odd tags.

    await Word.run(async (context) => {
      let paragraphs = context.document.body.paragraphs;
      paragraphs.load("$none"); // Don't need any properties; just wrap each paragraph with a content control.

      await context.sync();

      for (let i = 0; i < paragraphs.items.length; i++) {
        let contentControl = paragraphs.items[i].insertContentControl();
        // For even, tag "even".
        if (i % 2 === 0) {
          contentControl.tag = "even";
        } else {
          contentControl.tag = "odd";
        }
      }
      console.log("Content controls inserted: " + paragraphs.items.length);

      await context.sync();
    });
'Word.ContentControlAddedEventArgs#eventType:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/content-control-onadded-event.yaml

    async function contentControlAdded(event: Word.ContentControlAddedEventArgs)
    {
      await Word.run(async (context) => {
        console.log(`${event.eventType} event detected. IDs of content controls that were added:`);
        console.log(event.ids);
      });
    }
'Word.ContentControlAddedEventArgs#ids:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/content-control-onadded-event.yaml

    async function contentControlAdded(event: Word.ContentControlAddedEventArgs)
    {
      await Word.run(async (context) => {
        console.log(`${event.eventType} event detected. IDs of content controls that were added:`);
        console.log(event.ids);
      });
    }
'Word.ContentControlAppearance:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/insert-and-change-content-controls.yaml

    // Adds title and colors to odd and even content controls and changes their
    appearance.

    await Word.run(async (context) => {
      // Get the complete sentence (as range) associated with the insertion point.
      let evenContentControls = context.document.contentControls.getByTag("even");
      let oddContentControls = context.document.contentControls.getByTag("odd");
      evenContentControls.load("length");
      oddContentControls.load("length");

      await context.sync();

      for (let i = 0; i < evenContentControls.items.length; i++) {
        // Change a few properties and append a paragraph
        evenContentControls.items[i].set({
          color: "red",
          title: "Odd ContentControl #" + (i + 1),
          appearance: Word.ContentControlAppearance.tags
        });
        evenContentControls.items[i].insertParagraph("This is an odd content control", "End");
      }

      for (let j = 0; j < oddContentControls.items.length; j++) {
        // Change a few properties and append a paragraph
        oddContentControls.items[j].set({
          color: "green",
          title: "Even ContentControl #" + (j + 1),
          appearance: "Tags"
        });
        oddContentControls.items[j].insertHtml("This is an <b>even</b> content control", "End");
      }

      await context.sync();
    });
'Word.ContentControlCollection#getByTag:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/90-scenarios/doc-assembly.yaml

    await Word.run(async (context) => {
        const contentControls = context.document.contentControls.getByTag("customer");
        contentControls.load("text");

        await context.sync();

        for (let i = 0; i < contentControls.items.length; i++) {
          contentControls.items[i].insertText("Fabrikam", "Replace");
        }

        await context.sync();
    });
'Word.ContentControlDataChangedEventArgs:interface':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/content-control-ondatachanged-event.yaml

    async function contentControlDataChanged(event:
    Word.ContentControlDataChangedEventArgs) {
      await Word.run(async (context) => {
        console.log(`${event.eventType} event detected. IDs of content controls where data was changed:`);
        console.log(event.ids);
      });
    }
'Word.ContentControlDeletedEventArgs:interface':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/content-control-ondeleted-event.yaml

    async function contentControlDeleted(event:
    Word.ContentControlDeletedEventArgs) {
      await Word.run(async (context) => {
        console.log(`${event.eventType} event detected. IDs of content controls that were deleted:`);
        console.log(event.ids);
      });
    }
'Word.ContentControlEnteredEventArgs:interface':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/content-control-onentered-event.yaml

    async function contentControlEntered(event:
    Word.ContentControlEnteredEventArgs) {
      await Word.run(async (context) => {
        console.log(`${event.eventType} event detected. ID of content control that was entered: ${event.ids[0]}`);
      });
    }
'Word.ContentControlExitedEventArgs:interface':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/content-control-onexited-event.yaml

    async function contentControlExited(event:
    Word.ContentControlExitedEventArgs) {
      await Word.run(async (context) => {
        console.log(`${event.eventType} event detected. ID of content control that was exited: ${event.ids[0]}`);
      });
    }
'Word.ContentControlSelectionChangedEventArgs:interface':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/content-control-onselectionchanged-event.yaml

    async function contentControlSelectionChanged(event:
    Word.ContentControlSelectionChangedEventArgs) {
      await Word.run(async (context) => {
        console.log(`${event.eventType} event detected. IDs of content controls where selection was changed:`);
        console.log(event.ids);
      });
    }
'Word.Critique:interface':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml

    // Adds annotations to the selected paragraph.

    await Word.run(async (context) => {
      const paragraph = context.document.getSelection().paragraphs.getFirst();
      const critique1 = {
        colorScheme: Word.CritiqueColorScheme.red,
        start: 1,
        length: 3
      };
      const critique2 = {
        colorScheme: Word.CritiqueColorScheme.green,
        start: 6,
        length: 1
      };
      const critique3 = {
        colorScheme: Word.CritiqueColorScheme.blue,
        start: 10,
        length: 3
      };
      const critique4 = {
        colorScheme: Word.CritiqueColorScheme.lavender,
        start: 14,
        length: 3
      };
      const critique5 = {
        colorScheme: Word.CritiqueColorScheme.berry,
        start: 18,
        length: 10
      };
      const annotationSet: Word.AnnotationSet = {
        critiques: [critique1, critique2, critique3, critique4, critique5]
      };

      const annotationIds = paragraph.insertAnnotations(annotationSet);

      await context.sync();

      console.log("Annotations inserted:", annotationIds.value);
    });
'Word.CritiqueAnnotation#accept:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml

    // Accepts the first annotation found in the selected paragraph.

    await Word.run(async (context) => {
      const paragraph = context.document.getSelection().paragraphs.getFirst();
      const annotations = paragraph.getAnnotations();
      annotations.load("id,state,critiqueAnnotation");

      await context.sync();

      for (var i = 0; i < annotations.items.length; i++) {
        const annotation = annotations.items[i];

        if (annotation.state === Word.AnnotationState.created) {
          console.log(`Accepting ${annotation.id}`);
          annotation.critiqueAnnotation.accept();

          await context.sync();
          break;
        }
      }
    });
'Word.CritiqueAnnotation#reject:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml

    // Rejects the last annotation found in the selected paragraph.

    await Word.run(async (context) => {
      const paragraph = context.document.getSelection().paragraphs.getFirst();
      const annotations = paragraph.getAnnotations();
      annotations.load("id,state,critiqueAnnotation");

      await context.sync();

      for (var i = annotations.items.length - 1; i >= 0; i--) {
        const annotation = annotations.items[i];

        if (annotation.state === Word.AnnotationState.created) {
          console.log(`Rejecting ${annotation.id}`);
          annotation.critiqueAnnotation.reject();

          await context.sync();
          break;
        }
      }
    });
'Word.CritiqueAnnotation#critique:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml

    // Gets annotations found in the selected paragraph.

    await Word.run(async (context) => {
      const paragraph = context.document.getSelection().paragraphs.getFirst();
      const annotations = paragraph.getAnnotations();
      annotations.load("id,state,critiqueAnnotation");

      await context.sync();

      console.log("Annotations found:");

      for (var i = 0; i < annotations.items.length; i++) {
        const annotation = annotations.items[i];

        console.log(`${annotation.id} - ${annotation.state} - ${JSON.stringify(annotation.critiqueAnnotation.critique)}`);
      }
    });
'Word.CustomProperty:class':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/30-properties/read-write-custom-document-properties.yaml

    await Word.run(async (context) => {
        const properties = context.document.properties.customProperties;
        properties.load("key,type,value");

        await context.sync();
        for (let i = 0; i < properties.items.length; i++)
            console.log("Property Name:" + properties.items[i].key + "; Type=" + properties.items[i].type + "; Property Value=" + properties.items[i].value);
    });
'Word.CustomPropertyCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/30-properties/read-write-custom-document-properties.yaml

    await Word.run(async (context) => {
        context.document.properties.customProperties.add("Numeric Property", 1234);

        await context.sync();
        console.log("Property added");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/30-properties/read-write-custom-document-properties.yaml

    await Word.run(async (context) => {
        context.document.properties.customProperties.add("String Property", "Hello World!");

        await context.sync();
        console.log("Property added");
    });
'Word.CustomPropertyCollection#items:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/30-properties/read-write-custom-document-properties.yaml

    await Word.run(async (context) => {
        const properties = context.document.properties.customProperties;
        properties.load("key,type,value");

        await context.sync();
        for (let i = 0; i < properties.items.length; i++)
            console.log("Property Name:" + properties.items[i].key + "; Type=" + properties.items[i].type + "; Property Value=" + properties.items[i].value);
    });
'Word.CustomXmlPart#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-custom-xml-part.yaml

    // Deletes a custom XML part.

    await Word.run(async (context) => {
      const settings = context.document.settings;
      const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
      await context.sync();

      if (xmlPartIDSetting.value) {
        let customXmlPart = context.document.customXmlParts.getItem(xmlPartIDSetting.value);
        const xmlBlob = customXmlPart.getXml();
        customXmlPart.delete();
        customXmlPart = context.document.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);

        await context.sync();

        if (customXmlPart.isNullObject) {
          console.log(`The XML part with the ID ${xmlPartIDSetting.value} has been deleted`);

          // Delete the associated setting too.
          xmlPartIDSetting.delete();

          await context.sync();
        } else {
          const readableXml = addLineBreaksToXML(xmlBlob.value);
          const strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} wasn't deleted:\n${readableXml}`;
          console.error(strangeMessage);
        }
      } else {
        console.warn("Didn't find custom XML part to delete");
      }
    });
'Word.CustomXmlPart#getXml:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-custom-xml-part.yaml

    // Adds a custom XML part.

    await Word.run(async (context) => {
      const originalXml =
        "<Reviewers><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
      const customXmlPart = context.document.customXmlParts.add(originalXml);
      customXmlPart.load("id");
      const xmlBlob = customXmlPart.getXml();

      await context.sync();

      const readableXml = addLineBreaksToXML(xmlBlob.value);
      console.log("Added custom XML part:");
      console.log(readableXml);

      // Store the XML part's ID in a setting so the ID is available to other functions.
      const settings = context.document.settings;
      settings.add("ContosoReviewXmlPartId", customXmlPart.id);

      await context.sync();
    });
'Word.CustomXmlPart#insertAttribute:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-custom-xml-part.yaml

    // Inserts an attribute into a custom XML part.

    await Word.run(async (context) => {
      const settings = context.document.settings;
      const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
      await context.sync();

      if (xmlPartIDSetting.value) {
        const customXmlPart = context.document.customXmlParts.getItem(xmlPartIDSetting.value);

        // The insertAttribute method inserts an attribute with the given name and value into the element identified by the xpath parameter.
        customXmlPart.insertAttribute("/Reviewers", { contoso: "http://schemas.contoso.com/review/1.0" }, "Nation", "US");
        const xmlBlob = customXmlPart.getXml();
        await context.sync();

        const readableXml = addLineBreaksToXML(xmlBlob.value);
        console.log("Successfully inserted attribute:");
        console.log(readableXml);
      } else {
        console.warn("Didn't find custom XML part to insert attribute into");
      }
    });
'Word.CustomXmlPart#insertElement:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-custom-xml-part.yaml

    // Inserts an element into a custom XML part.

    await Word.run(async (context) => {
      const settings = context.document.settings;
      const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
      await context.sync();

      if (xmlPartIDSetting.value) {
        const customXmlPart = context.document.customXmlParts.getItem(xmlPartIDSetting.value);

        // The insertElement method inserts the given XML under the parent element identified by the xpath parameter at the provided child position index.
        customXmlPart.insertElement(
          "/Reviewers",
          "<Lead>Mark</Lead>",
          { contoso: "http://schemas.contoso.com/review/1.0" },
          0
        );
        const xmlBlob = customXmlPart.getXml();
        await context.sync();

        const readableXml = addLineBreaksToXML(xmlBlob.value);
        console.log("Successfully inserted element:");
        console.log(readableXml);
      } else {
        console.warn("Didn't find custom XML part to insert element into");
      }
    });
'Word.CustomXmlPart#query:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-custom-xml-part.yaml

    // Queries a custom XML part for elements matching the search terms.

    await Word.run(async (context) => {
      const settings = context.document.settings;
      const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");

      await context.sync();

      if (xmlPartIDSetting.value) {
        const customXmlPart = context.document.customXmlParts.getItem(xmlPartIDSetting.value);
        const xpathToQueryFor = "/Reviewers/Reviewer";
        const clientResult = customXmlPart.query(xpathToQueryFor, {
          contoso: "http://schemas.contoso.com/review/1.0"
        });

        await context.sync();

        console.log(`Queried custom XML part for ${xpathToQueryFor} and found ${clientResult.value.length} matches:`);
        for (let i = 0; i < clientResult.value.length; i++) {
          console.log(clientResult.value[i]);
        }
      } else {
        console.warn("Didn't find custom XML part to query");
      }
    });
'Word.CustomXmlPart#setXml:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-custom-xml-part-ns.yaml

    // Replaces a custom XML part.

    await Word.run(async (context) => {
      const settings = context.document.settings;
      const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartIdNS").load("value");
      await context.sync();

      if (xmlPartIDSetting.value) {
        const customXmlPart = context.document.customXmlParts.getItem(xmlPartIDSetting.value);
        const originalXmlBlob = customXmlPart.getXml();
        await context.sync();

        let readableXml = addLineBreaksToXML(originalXmlBlob.value);
        console.log("Original custom XML part:");
        console.log(readableXml);

        // The setXml method replaces the entire XML part.
        customXmlPart.setXml(
          "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>John</Reviewer><Reviewer>Hitomi</Reviewer></Reviewers>"
        );
        const updatedXmlBlob = customXmlPart.getXml();
        await context.sync();

        readableXml = addLineBreaksToXML(updatedXmlBlob.value);
        console.log("Replaced custom XML part:");
        console.log(readableXml);
      } else {
        console.warn("Didn't find custom XML part to replace");
      }
    });
'Word.CustomXmlPart#id:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-custom-xml-part.yaml

    // Adds a custom XML part.

    await Word.run(async (context) => {
      const originalXml =
        "<Reviewers><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
      const customXmlPart = context.document.customXmlParts.add(originalXml);
      customXmlPart.load("id");
      const xmlBlob = customXmlPart.getXml();

      await context.sync();

      const readableXml = addLineBreaksToXML(xmlBlob.value);
      console.log("Added custom XML part:");
      console.log(readableXml);

      // Store the XML part's ID in a setting so the ID is available to other functions.
      const settings = context.document.settings;
      settings.add("ContosoReviewXmlPartId", customXmlPart.id);

      await context.sync();
    });
'Word.CustomXmlPart#namespaceUri:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-custom-xml-part-ns.yaml

    // Gets the namespace URI from a custom XML part.

    await Word.run(async (context) => {
      const settings = context.document.settings;
      const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartIdNS").load("value");

      await context.sync();

      if (xmlPartIDSetting.value) {
        const customXmlPart = context.document.customXmlParts.getItem(xmlPartIDSetting.value);
        customXmlPart.load("namespaceUri");
        await context.sync();

        const namespaceUri = customXmlPart.namespaceUri;
        console.log(`Namespace URI: ${JSON.stringify(namespaceUri)}`);
      } else {
        console.warn("Didn't find custom XML part");
      }
    });
'Word.CustomXmlPartCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-custom-xml-part.yaml

    // Adds a custom XML part.

    await Word.run(async (context) => {
      const originalXml =
        "<Reviewers><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
      const customXmlPart = context.document.customXmlParts.add(originalXml);
      customXmlPart.load("id");
      const xmlBlob = customXmlPart.getXml();

      await context.sync();

      const readableXml = addLineBreaksToXML(xmlBlob.value);
      console.log("Added custom XML part:");
      console.log(readableXml);

      // Store the XML part's ID in a setting so the ID is available to other functions.
      const settings = context.document.settings;
      settings.add("ContosoReviewXmlPartId", customXmlPart.id);

      await context.sync();
    });
'Word.CustomXmlPartCollection#getItem:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-custom-xml-part.yaml

    // Queries a custom XML part for elements matching the search terms.

    await Word.run(async (context) => {
      const settings = context.document.settings;
      const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");

      await context.sync();

      if (xmlPartIDSetting.value) {
        const customXmlPart = context.document.customXmlParts.getItem(xmlPartIDSetting.value);
        const xpathToQueryFor = "/Reviewers/Reviewer";
        const clientResult = customXmlPart.query(xpathToQueryFor, {
          contoso: "http://schemas.contoso.com/review/1.0"
        });

        await context.sync();

        console.log(`Queried custom XML part for ${xpathToQueryFor} and found ${clientResult.value.length} matches:`);
        for (let i = 0; i < clientResult.value.length; i++) {
          console.log(clientResult.value[i]);
        }
      } else {
        console.warn("Didn't find custom XML part to query");
      }
    });
'Word.Document#addStyle:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-styles.yaml

    // Adds a new style.

    await Word.run(async (context) => {
      const newStyleName = $("#new-style-name").val() as string;
      if (newStyleName == "") {
        console.warn("Enter a style name to add.");
        return;
      }

      const style = context.document.getStyles().getByNameOrNullObject(newStyleName);
      style.load();
      await context.sync();

      if (!style.isNullObject) {
        console.warn(
          `There's an existing style with the same name '${newStyleName}'! Please provide another style name.`
        );
        return;
      }

      const newStyleType = ($("#new-style-type").val() as unknown) as Word.StyleType;
      context.document.addStyle(newStyleName, newStyleType);
      await context.sync();
      
      console.log(newStyleName + " has been added to the style list.");
    });
'Word.Document#compare:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/99-preview-apis/compare-documents.yaml

    // Compares the current document with a specified external document.

    await Word.run(async (context) => {
      // Absolute path of an online or local document.
      const filePath = $("#filePath")
        .val()
        .toString();
      // Options that configure the compare operation.
      const options = {
        compareTarget: Word.CompareTarget.compareTargetCurrent,
        detectFormatChanges: false
        // Other options you choose...
        };
      context.document.compare(filePath, options);

      await context.sync();

      console.log("Differences shown in the current document.");
    });
'Word.Document#getParagraphByUniqueLocalId:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/onadded-event.yaml

    await Word.run(async (context) => {
      const paragraphId = $("#paragraph-id").val() as string;
      const paragraph = context.document.getParagraphByUniqueLocalId(paragraphId);
      paragraph.load();
      await paragraph.context.sync();

      console.log(paragraph);
    });
'Word.Document#getStyles:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-styles.yaml

    // Gets the number of styles.

    await Word.run(async (context) => {
      const styles = context.document.getStyles();
      const count = styles.getCount();
      await context.sync();

      console.log(`Number of styles: ${count.value}`);
    });
'Word.Document#importStylesFromJson:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/99-preview-apis/manage-custom-style.yaml

    // Imports styles from JSON.

    await Word.run(async (context) => {
      const str =
        '{"styles":[{"baseStyle":"Default Paragraph Font","builtIn":false,"inUse":true,"linked":false,"nameLocal":"NewCharStyle","priority":2,"quickStyle":true,"type":"Character","unhideWhenUsed":false,"visibility":false,"paragraphFormat":null,"font":{"name":"DengXian Light","size":16.0,"bold":true,"italic":false,"color":"#F1A983","underline":"None","subscript":false,"superscript":true,"strikeThrough":true,"doubleStrikeThrough":false,"highlightColor":null,"hidden":false},"shading":{"backgroundPatternColor":"#FF0000"}},{"baseStyle":"Normal","builtIn":false,"inUse":true,"linked":false,"nextParagraphStyle":"NewParaStyle","nameLocal":"NewParaStyle","priority":1,"quickStyle":true,"type":"Paragraph","unhideWhenUsed":false,"visibility":false,"paragraphFormat":{"alignment":"Centered","firstLineIndent":0.0,"keepTogether":false,"keepWithNext":false,"leftIndent":72.0,"lineSpacing":18.0,"lineUnitAfter":0.0,"lineUnitBefore":0.0,"mirrorIndents":false,"outlineLevel":"OutlineLevelBodyText","rightIndent":72.0,"spaceAfter":30.0,"spaceBefore":30.0,"widowControl":true},"font":{"name":"DengXian","size":14.0,"bold":true,"italic":true,"color":"#8DD873","underline":"Single","subscript":false,"superscript":false,"strikeThrough":false,"doubleStrikeThrough":true,"highlightColor":null,"hidden":false},"shading":{"backgroundPatternColor":"#00FF00"}},{"baseStyle":"Table Normal","builtIn":false,"inUse":true,"linked":false,"nextParagraphStyle":"NewTableStyle","nameLocal":"NewTableStyle","priority":100,"type":"Table","unhideWhenUsed":false,"visibility":false,"paragraphFormat":{"alignment":"Left","firstLineIndent":0.0,"keepTogether":false,"keepWithNext":false,"leftIndent":0.0,"lineSpacing":12.0,"lineUnitAfter":0.0,"lineUnitBefore":0.0,"mirrorIndents":false,"outlineLevel":"OutlineLevelBodyText","rightIndent":0.0,"spaceAfter":0.0,"spaceBefore":0.0,"widowControl":true},"font":{"name":"DengXian","size":20.0,"bold":false,"italic":true,"color":"#D86DCB","underline":"None","subscript":false,"superscript":false,"strikeThrough":false,"doubleStrikeThrough":false,"highlightColor":null,"hidden":false},"tableStyle":{"allowBreakAcrossPage":true,"alignment":"Left","bottomCellMargin":0.0,"leftCellMargin":0.08,"rightCellMargin":0.08,"topCellMargin":0.0,"cellSpacing":0.0},"shading":{"backgroundPatternColor":"#60CAF3"}}]}';
      const styles = context.document.importStylesFromJson(str);
      await context.sync();
      console.log("Styles imported from JSON:");
      console.log(styles);
    });
'Word.Document#insertFileFromBase64:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/insert-external-document.yaml

    // Inserts content (applying selected settings) from another document passed
    in as a Base64-encoded string.

    await Word.run(async (context) => {
      // Use the Base64-encoded string representation of the selected .docx file.
      context.document.insertFileFromBase64(externalDocument, "Replace", {
        importTheme: true,
        importStyles: true,
        importParagraphSpacing: true,
        importPageColor: true,
        importChangeTrackingMode: true,
        importCustomProperties: true,
        importCustomXmlParts: true,
        importDifferentOddEvenPages: true
      });
      await context.sync();
    });
'Word.Document#changeTrackingMode:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-change-tracking.yaml

    // Gets the current change tracking mode.

    await Word.run(async (context) => {
      const document = context.document;
      document.load("changeTrackingMode");
      await context.sync();

      if (document.changeTrackingMode === Word.ChangeTrackingMode.trackMineOnly) {
        console.log("Only my changes are being tracked.");
      } else if (document.changeTrackingMode === Word.ChangeTrackingMode.trackAll) {
        console.log("Everyone's changes are being tracked.");
      } else {
        console.log("No changes are being tracked.");
      }
    });
'Word.Document#onContentControlAdded:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/content-control-onadded-event.yaml

    // Registers the onAdded event handler on the document.

    await Word.run(async (context) => {
      eventContext = context.document.onContentControlAdded.add(contentControlAdded);
      await context.sync();

      console.log("Added event handler for when content controls are added.");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/content-control-onadded-event.yaml

    async function contentControlAdded(event: Word.ContentControlAddedEventArgs)
    {
      await Word.run(async (context) => {
        console.log(`${event.eventType} event detected. IDs of content controls that were added:`);
        console.log(event.ids);
      });
    }
'Word.Document#onParagraphAdded:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/onadded-event.yaml

    // Registers the onParagraphAdded event handler on the document.

    await Word.run(async (context) => {
      eventContext = context.document.onParagraphAdded.add(paragraphAdded);
      await context.sync();

      console.log("Added event handler for when paragraphs are added.");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/onadded-event.yaml

    async function paragraphAdded(event: Word.ParagraphAddedEventArgs) {
      await Word.run(async (context) => {
        console.log(`${event.type} event detected. IDs of paragraphs that were added:`);
        console.log(event.uniqueLocalIds);
      });
    }
'Word.Document#onParagraphChanged:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/onchanged-event.yaml

    // Registers the onParagraphChanged event handler on the document.

    await Word.run(async (context) => {
      eventContext = context.document.onParagraphChanged.add(paragraphChanged);
      await context.sync();

      console.log("Added event handler for when content is changed in paragraphs.");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/onchanged-event.yaml

    async function paragraphChanged(event: Word.ParagraphChangedEventArgs) {
      await Word.run(async (context) => {
        console.log(`${event.type} event detected. IDs of paragraphs where content was changed:`);
        console.log(event.uniqueLocalIds);
      });
    }
'Word.Document#onParagraphDeleted:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/ondeleted-event.yaml

    // Registers the onParagraphDeleted event handler on the document.

    await Word.run(async (context) => {
      eventContext = context.document.onParagraphDeleted.add(paragraphDeleted);
      await context.sync();

      console.log("Added event handlers for when paragraphs are deleted.");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/ondeleted-event.yaml

    async function paragraphDeleted(event: Word.ParagraphDeletedEventArgs) {
      await Word.run(async (context) => {
        console.log(`${event.type} event detected. IDs of paragraphs that were deleted:`);
        console.log(event.uniqueLocalIds);
      });
    }
'Word.Document#properties:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/30-properties/get-built-in-properties.yaml

    await Word.run(async (context) => {
        const builtInProperties = context.document.properties;
        builtInProperties.load("*"); // Let's get all!

        await context.sync();
        console.log(JSON.stringify(builtInProperties, null, 4));
    });
'Word.Document#settings:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-settings.yaml

    // Gets all custom settings this add-in set on this document.

    await Word.run(async (context) => {
      const settings = context.document.settings;
      settings.load("items");
      await context.sync();

      if (settings.items.length == 0) {
        console.log("There are no settings");
      } else {
        console.log("All settings:");
        for (let i = 0; i < settings.items.length; i++) {
          console.log(settings.items[i]);
        }
      }
    });
'Word.DocumentCompareOptions:interface':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/99-preview-apis/compare-documents.yaml

    // Compares the current document with a specified external document.

    await Word.run(async (context) => {
      // Absolute path of an online or local document.
      const filePath = $("#filePath")
        .val()
        .toString();
      // Options that configure the compare operation.
      const options = {
        compareTarget: Word.CompareTarget.compareTargetCurrent,
        detectFormatChanges: false
        // Other options you choose...
        };
      context.document.compare(filePath, options);

      await context.sync();

      console.log("Differences shown in the current document.");
    });
'Word.DocumentCreated:class':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/insert-external-document.yaml

    // Updates the text of the current document with the text from another
    document passed in as a Base64-encoded string.

    await Word.run(async (context) => {
      // Use the Base64-encoded string representation of the selected .docx file.
      const externalDoc = context.application.createDocument(externalDocument);
      await context.sync();

      const externalDocBody = externalDoc.body;
      externalDocBody.load("text");
      await context.sync();

      // Insert the external document's text at the beginning of the current document's body.
      const externalDocBodyText = externalDocBody.text;
      const currentDocBody = context.document.body;
      currentDocBody.insertText(externalDocBodyText, Word.InsertLocation.start);
      await context.sync();
    });
'Word.DocumentPropertyType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/30-properties/read-write-custom-document-properties.yaml

    await Word.run(async (context) => {
        const properties = context.document.properties.customProperties;
        properties.load("key,type,value");

        await context.sync();
        for (let i = 0; i < properties.items.length; i++)
            console.log("Property Name:" + properties.items[i].key + "; Type=" + properties.items[i].type + "; Property Value=" + properties.items[i].value);
    });
'Word.EventType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/content-control-ondeleted-event.yaml

    async function contentControlDeleted(event:
    Word.ContentControlDeletedEventArgs) {
      await Word.run(async (context) => {
        console.log(`${event.eventType} event detected. IDs of content controls that were deleted:`);
        console.log(event.ids);
      });
    }
'Word.Field#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-fields.yaml

    // Deletes the first field in the document.

    await Word.run(async (context) => {
      const field = context.document.body.fields.getFirstOrNullObject();
      field.load();

      await context.sync();

      if (field.isNullObject) {
        console.log("This document has no fields.");
      } else {
        field.delete();
        await context.sync();

        console.log("The first field in the document was deleted.");
      }
    });
'Word.Field#select:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-fields.yaml

    // Gets and updates the first field in the selection.

    await Word.run(async (context) => {
      var field = context.document.getSelection().fields.getFirstOrNullObject();
      field.load(["code", "result", "type", "locked"]);

      await context.sync();

      if (field.isNullObject) {
        console.log("No field in selection.");
      } else {
        console.log("Before updating:");
        console.log("Code of first field: " + field.code);
        console.log("Result of first field: " + JSON.stringify(field.result));

        field.updateResult();
        field.select();
        await context.sync();

        field.load(["code", "result"]);
        await context.sync();

        console.log("After updating:");
        console.log("Code of first field: " + field.code);
        console.log("Result of first field: " + JSON.stringify(field.result));
      }
    });
'Word.Field#updateResult:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-fields.yaml

    // Gets and updates the first field in the selection.

    await Word.run(async (context) => {
      var field = context.document.getSelection().fields.getFirstOrNullObject();
      field.load(["code", "result", "type", "locked"]);

      await context.sync();

      if (field.isNullObject) {
        console.log("No field in selection.");
      } else {
        console.log("Before updating:");
        console.log("Code of first field: " + field.code);
        console.log("Result of first field: " + JSON.stringify(field.result));

        field.updateResult();
        field.select();
        await context.sync();

        field.load(["code", "result"]);
        await context.sync();

        console.log("After updating:");
        console.log("Code of first field: " + field.code);
        console.log("Result of first field: " + JSON.stringify(field.result));
      }
    });
'Word.Field#code:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-fields.yaml

    // Gets the first field in the document.

    await Word.run(async (context) => {
      const field = context.document.body.fields.getFirstOrNullObject();
      field.load(["code", "result", "locked", "type", "data", "kind"]);

      await context.sync();

      if (field.isNullObject) {
        console.log("This document has no fields.");
      } else {
        console.log("Code of first field: " + field.code);
        console.log("Result of first field: " + JSON.stringify(field.result));
        console.log("Type of first field: " + field.type);
        console.log("Is the first field locked? " + field.locked);
        console.log("Kind of the first field: " + field.kind);
      }
    });
'Word.Field#kind:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-fields.yaml

    // Gets the first field in the document.

    await Word.run(async (context) => {
      const field = context.document.body.fields.getFirstOrNullObject();
      field.load(["code", "result", "locked", "type", "data", "kind"]);

      await context.sync();

      if (field.isNullObject) {
        console.log("This document has no fields.");
      } else {
        console.log("Code of first field: " + field.code);
        console.log("Result of first field: " + JSON.stringify(field.result));
        console.log("Type of first field: " + field.type);
        console.log("Is the first field locked? " + field.locked);
        console.log("Kind of the first field: " + field.kind);
      }
    });
'Word.Field#locked:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-fields.yaml

    // Gets the first field in the selection and toggles between setting it to
    locked or unlocked.

    await Word.run(async (context) => {
      var field = context.document.getSelection().fields.getFirstOrNullObject();
      field.load(["code", "result", "type", "locked"]);
      await context.sync();

      if (field.isNullObject) {
        console.log("The selection has no fields.");
      } else {
        console.log(`The first field in the selection is currently ${field.locked ? "locked" : "unlocked"}.`);
        field.locked = !field.locked;
        await context.sync();

        console.log(`The first field in the selection is now ${field.locked ? "locked" : "unlocked"}.`);
      }
    });
'Word.Field#parentBody:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-fields.yaml

    // Gets the parent body of the first field in the document.

    await Word.run(async (context) => {
      const field = context.document.body.fields.getFirstOrNullObject();
      field.load("parentBody/text");

      await context.sync();

      if (field.isNullObject) {
        console.log("This document has no fields.");
      } else {
        const parentBody = field.parentBody;
        console.log("Text of first field's parent body: " + JSON.stringify(parentBody.text));
      }
    });
'Word.Field#result:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-fields.yaml

    // Gets the first field in the document.

    await Word.run(async (context) => {
      const field = context.document.body.fields.getFirstOrNullObject();
      field.load(["code", "result", "locked", "type", "data", "kind"]);

      await context.sync();

      if (field.isNullObject) {
        console.log("This document has no fields.");
      } else {
        console.log("Code of first field: " + field.code);
        console.log("Result of first field: " + JSON.stringify(field.result));
        console.log("Type of first field: " + field.type);
        console.log("Is the first field locked? " + field.locked);
        console.log("Kind of the first field: " + field.kind);
      }
    });
'Word.Field#type:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-fields.yaml

    // Gets the first field in the document.

    await Word.run(async (context) => {
      const field = context.document.body.fields.getFirstOrNullObject();
      field.load(["code", "result", "locked", "type", "data", "kind"]);

      await context.sync();

      if (field.isNullObject) {
        console.log("This document has no fields.");
      } else {
        console.log("Code of first field: " + field.code);
        console.log("Result of first field: " + JSON.stringify(field.result));
        console.log("Type of first field: " + field.type);
        console.log("Is the first field locked? " + field.locked);
        console.log("Kind of the first field: " + field.kind);
      }
    });
'Word.FieldCollection#getFirstOrNullObject:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-fields.yaml

    // Gets the first field in the document.

    await Word.run(async (context) => {
      const field = context.document.body.fields.getFirstOrNullObject();
      field.load(["code", "result", "locked", "type", "data", "kind"]);

      await context.sync();

      if (field.isNullObject) {
        console.log("This document has no fields.");
      } else {
        console.log("Code of first field: " + field.code);
        console.log("Result of first field: " + JSON.stringify(field.result));
        console.log("Type of first field: " + field.type);
        console.log("Is the first field locked? " + field.locked);
        console.log("Kind of the first field: " + field.kind);
      }
    });
'Word.FieldCollection#items:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-fields.yaml

    // Gets all fields in the document body.

    await Word.run(async (context) => {
      const fields = context.document.body.fields.load("items");

      await context.sync();

      if (fields.items.length === 0) {
        console.log("No fields in this document.");
      } else {
        fields.load(["code", "result"]);
        await context.sync();

        for (let i = 0; i < fields.items.length; i++) {
          console.log(`Field ${i + 1}'s code: ${fields.items[i].code}`);
          console.log(`Field ${i + 1}'s result: ${JSON.stringify(fields.items[i].result)}`);
        }
      }
    });
'Word.FieldType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-fields.yaml

    // Inserts a Date field before selection.

    await Word.run(async (context) => {
      var range = context.document.getSelection().getRange();

      const field = range.insertField(Word.InsertLocation.before, Word.FieldType.date, '\\@ "M/d/yyyy h:mm am/pm"', true);

      field.load("result,code");
      await context.sync();

      if (field.isNullObject) {
        console.log("There are no fields in this document.");
      } else {
        console.log("Code of the field: " + field.code);
        console.log("Result of the field: " + JSON.stringify(field.result));
      }
    });
'Word.HeaderFooterType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/insert-header-and-footer.yaml

    await Word.run(async (context) => {
      context.document.sections
        .getFirst()
        .getHeader(Word.HeaderFooterType.primary)
        .insertParagraph("This is a primary header.", "End");

      await context.sync();
    });
'Word.ImageFormat:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/99-preview-apis/insert-and-get-pictures.yaml

    // Gets the first image in the document.

    await Word.run(async (context) => {
      const firstPicture = context.document.body.inlinePictures.getFirst();
      firstPicture.load("width, height, imageFormat");

      await context.sync();
      console.log(`Image dimensions: ${firstPicture.width} x ${firstPicture.height}`);
      console.log(`Image format: ${firstPicture.imageFormat}`);
      // Get the image encoded as Base64.
      const base64 = firstPicture.getBase64ImageSrc();

      await context.sync();
      console.log(base64.value);
    });
'Word.InlinePicture#getBase64ImageSrc:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/15-images/insert-and-get-pictures.yaml

    // Gets the first image in the document.

    await Word.run(async (context) => {
      const firstPicture = context.document.body.inlinePictures.getFirst();
      firstPicture.load("width, height");

      await context.sync();
      console.log(`Image dimensions: ${firstPicture.width} x ${firstPicture.height}`);
      // Get the image encoded as Base64.
      const base64 = firstPicture.getBase64ImageSrc();

      await context.sync();
      console.log(base64.value);
    });
'Word.InlinePicture:class':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/15-images/insert-and-get-pictures.yaml

    // Inserts an image anchored to the last paragraph.

    await Word.run(async (context) => {
      context.document.body.paragraphs
        .getLast()
        .insertParagraph("", "After")
        .insertInlinePictureFromBase64(base64Image, "End");

      await context.sync();
    });
'Word.InlinePicture#imageFormat:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/99-preview-apis/insert-and-get-pictures.yaml

    // Gets the first image in the document.

    await Word.run(async (context) => {
      const firstPicture = context.document.body.inlinePictures.getFirst();
      firstPicture.load("width, height, imageFormat");

      await context.sync();
      console.log(`Image dimensions: ${firstPicture.width} x ${firstPicture.height}`);
      console.log(`Image format: ${firstPicture.imageFormat}`);
      // Get the image encoded as Base64.
      const base64 = firstPicture.getBase64ImageSrc();

      await context.sync();
      console.log(base64.value);
    });
'Word.InlinePictureCollection:class':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/15-images/insert-and-get-pictures.yaml

    // Gets the first image in the document.

    await Word.run(async (context) => {
      const firstPicture = context.document.body.inlinePictures.getFirst();
      firstPicture.load("width, height");

      await context.sync();
      console.log(`Image dimensions: ${firstPicture.width} x ${firstPicture.height}`);
      // Get the image encoded as Base64.
      const base64 = firstPicture.getBase64ImageSrc();

      await context.sync();
      console.log(base64.value);
    });
'Word.InsertFileOptions:interface':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/insert-external-document.yaml

    // Inserts content (applying selected settings) from another document passed
    in as a Base64-encoded string.

    await Word.run(async (context) => {
      // Use the Base64-encoded string representation of the selected .docx file.
      context.document.insertFileFromBase64(externalDocument, "Replace", {
        importTheme: true,
        importStyles: true,
        importParagraphSpacing: true,
        importPageColor: true,
        importChangeTrackingMode: true,
        importCustomProperties: true,
        importCustomXmlParts: true,
        importDifferentOddEvenPages: true
      });
      await context.sync();
    });
'Word.InsertLocation:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/insert-section-breaks.yaml

    // Inserts a section without an associated page break.

    await Word.run(async (context) => {
      const body = context.document.body;
      body.insertBreak(Word.BreakType.sectionContinuous, Word.InsertLocation.end);

      await context.sync();

      console.log("Inserted section without an associated page break");
    });
'Word.List:class':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/20-lists/insert-list.yaml

    // This example starts a new list with the second paragraph.

    await Word.run(async (context) => {
      const paragraphs = context.document.body.paragraphs;
      paragraphs.load("$none");

      await context.sync();

      // Start new list using the second paragraph.
      const list = paragraphs.items[1].startNewList();
      list.load("$none");

      await context.sync();

      // To add new items to the list, use Start or End on the insertLocation parameter.
      list.insertParagraph("New list item at the start of the list", "Start");
      const paragraph = list.insertParagraph("New list item at the end of the list (set to list level 5)", "End");

      // Set up list level for the list item.
      paragraph.listItem.level = 4;

      // To add paragraphs outside the list, use Before or After.
      list.insertParagraph("New paragraph goes after (not part of the list)", "After");

      await context.sync();
    });
'Word.List#insertParagraph:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/20-lists/insert-list.yaml

    // This example starts a new list with the second paragraph.

    await Word.run(async (context) => {
      const paragraphs = context.document.body.paragraphs;
      paragraphs.load("$none");

      await context.sync();

      // Start new list using the second paragraph.
      const list = paragraphs.items[1].startNewList();
      list.load("$none");

      await context.sync();

      // To add new items to the list, use Start or End on the insertLocation parameter.
      list.insertParagraph("New list item at the start of the list", "Start");
      const paragraph = list.insertParagraph("New list item at the end of the list (set to list level 5)", "End");

      // Set up list level for the list item.
      paragraph.listItem.level = 4;

      // To add paragraphs outside the list, use Before or After.
      list.insertParagraph("New paragraph goes after (not part of the list)", "After");

      await context.sync();
    });
'Word.List#setLevelBullet:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/20-lists/organize-list.yaml

    // Inserts a list starting with the first paragraph then set numbering and
    bullet types of the list items.

    await Word.run(async (context) => {
      const paragraphs = context.document.body.paragraphs;
      paragraphs.load("$none");

      await context.sync();

      // Use the first paragraph to start a new list.
      const list = paragraphs.items[0].startNewList();
      list.load("$none");

      await context.sync();

      // To add new items to the list, use Start or End on the insertLocation parameter.
      list.insertParagraph("New list item at the start of the list", "Start");
      const paragraph = list.insertParagraph("New list item at the end of the list (set to list level 5)", "End");

      // Set numbering for list level 1.
      list.setLevelNumbering(0, Word.ListNumbering.arabic);

      // Set bullet type for list level 5.
      list.setLevelBullet(4, Word.ListBullet.arrow);

      // Set list level for the last item in this list.
      paragraph.listItem.level = 4;

      list.load("levelTypes");

      await context.sync();
    });
'Word.List#setLevelNumbering:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/20-lists/organize-list.yaml

    // Inserts a list starting with the first paragraph then set numbering and
    bullet types of the list items.

    await Word.run(async (context) => {
      const paragraphs = context.document.body.paragraphs;
      paragraphs.load("$none");

      await context.sync();

      // Use the first paragraph to start a new list.
      const list = paragraphs.items[0].startNewList();
      list.load("$none");

      await context.sync();

      // To add new items to the list, use Start or End on the insertLocation parameter.
      list.insertParagraph("New list item at the start of the list", "Start");
      const paragraph = list.insertParagraph("New list item at the end of the list (set to list level 5)", "End");

      // Set numbering for list level 1.
      list.setLevelNumbering(0, Word.ListNumbering.arabic);

      // Set bullet type for list level 5.
      list.setLevelBullet(4, Word.ListBullet.arrow);

      // Set list level for the last item in this list.
      paragraph.listItem.level = 4;

      list.load("levelTypes");

      await context.sync();
    });
'Word.List#levelExistences:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/20-lists/organize-list.yaml

    // Gets information about the first list in the document.

    await Word.run(async (context) => {
      const lists = context.document.body.lists;
      lists.load("items");

      await context.sync();

      if (lists.items.length === 0) {
        console.warn("There are no lists in this document");
        return;
      }
      
      // Get the first list.
      const list = lists.getFirst();
      list.load("levelTypes,levelExistences");

      await context.sync();

      const levelTypes = list.levelTypes;
      console.log("Level types of the first list:");
      for (let i = 0; i < levelTypes.length; i++) {
        console.log(`- Level ${i + 1} (index ${i}): ${levelTypes[i]}`);
      }

      const levelExistences = list.levelExistences;
      console.log("Level existences of the first list:");
      for (let i = 0; i < levelExistences.length; i++) {
        console.log(`- Level ${i + 1} (index ${i}): ${levelExistences[i]}`);
      }
    });
'Word.List#levelTypes:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/20-lists/organize-list.yaml

    // Gets information about the first list in the document.

    await Word.run(async (context) => {
      const lists = context.document.body.lists;
      lists.load("items");

      await context.sync();

      if (lists.items.length === 0) {
        console.warn("There are no lists in this document");
        return;
      }
      
      // Get the first list.
      const list = lists.getFirst();
      list.load("levelTypes,levelExistences");

      await context.sync();

      const levelTypes = list.levelTypes;
      console.log("Level types of the first list:");
      for (let i = 0; i < levelTypes.length; i++) {
        console.log(`- Level ${i + 1} (index ${i}): ${levelTypes[i]}`);
      }

      const levelExistences = list.levelExistences;
      console.log("Level existences of the first list:");
      for (let i = 0; i < levelExistences.length; i++) {
        console.log(`- Level ${i + 1} (index ${i}): ${levelExistences[i]}`);
      }
    });
'Word.ListBullet:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/20-lists/organize-list.yaml

    // Inserts a list starting with the first paragraph then set numbering and
    bullet types of the list items.

    await Word.run(async (context) => {
      const paragraphs = context.document.body.paragraphs;
      paragraphs.load("$none");

      await context.sync();

      // Use the first paragraph to start a new list.
      const list = paragraphs.items[0].startNewList();
      list.load("$none");

      await context.sync();

      // To add new items to the list, use Start or End on the insertLocation parameter.
      list.insertParagraph("New list item at the start of the list", "Start");
      const paragraph = list.insertParagraph("New list item at the end of the list (set to list level 5)", "End");

      // Set numbering for list level 1.
      list.setLevelNumbering(0, Word.ListNumbering.arabic);

      // Set bullet type for list level 5.
      list.setLevelBullet(4, Word.ListBullet.arrow);

      // Set list level for the last item in this list.
      paragraph.listItem.level = 4;

      list.load("levelTypes");

      await context.sync();
    });
'Word.ListItem#level:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/20-lists/insert-list.yaml

    // This example starts a new list with the second paragraph.

    await Word.run(async (context) => {
      const paragraphs = context.document.body.paragraphs;
      paragraphs.load("$none");

      await context.sync();

      // Start new list using the second paragraph.
      const list = paragraphs.items[1].startNewList();
      list.load("$none");

      await context.sync();

      // To add new items to the list, use Start or End on the insertLocation parameter.
      list.insertParagraph("New list item at the start of the list", "Start");
      const paragraph = list.insertParagraph("New list item at the end of the list (set to list level 5)", "End");

      // Set up list level for the list item.
      paragraph.listItem.level = 4;

      // To add paragraphs outside the list, use Before or After.
      list.insertParagraph("New paragraph goes after (not part of the list)", "After");

      await context.sync();
    });
'Word.ListLevelType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/20-lists/organize-list.yaml

    // Gets information about the first list in the document.

    await Word.run(async (context) => {
      const lists = context.document.body.lists;
      lists.load("items");

      await context.sync();

      if (lists.items.length === 0) {
        console.warn("There are no lists in this document");
        return;
      }
      
      // Get the first list.
      const list = lists.getFirst();
      list.load("levelTypes,levelExistences");

      await context.sync();

      const levelTypes = list.levelTypes;
      console.log("Level types of the first list:");
      for (let i = 0; i < levelTypes.length; i++) {
        console.log(`- Level ${i + 1} (index ${i}): ${levelTypes[i]}`);
      }

      const levelExistences = list.levelExistences;
      console.log("Level existences of the first list:");
      for (let i = 0; i < levelExistences.length; i++) {
        console.log(`- Level ${i + 1} (index ${i}): ${levelExistences[i]}`);
      }
    });
'Word.ListNumbering:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/20-lists/organize-list.yaml

    // Inserts a list starting with the first paragraph then set numbering and
    bullet types of the list items.

    await Word.run(async (context) => {
      const paragraphs = context.document.body.paragraphs;
      paragraphs.load("$none");

      await context.sync();

      // Use the first paragraph to start a new list.
      const list = paragraphs.items[0].startNewList();
      list.load("$none");

      await context.sync();

      // To add new items to the list, use Start or End on the insertLocation parameter.
      list.insertParagraph("New list item at the start of the list", "Start");
      const paragraph = list.insertParagraph("New list item at the end of the list (set to list level 5)", "End");

      // Set numbering for list level 1.
      list.setLevelNumbering(0, Word.ListNumbering.arabic);

      // Set bullet type for list level 5.
      list.setLevelBullet(4, Word.ListBullet.arrow);

      // Set list level for the last item in this list.
      paragraph.listItem.level = 4;

      list.load("levelTypes");

      await context.sync();
    });
'Word.LocationRelation:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/35-ranges/compare-location.yaml

    // Compares the location of one paragraph in relation to another paragraph.

    await Word.run(async (context) => {
      const paragraphs = context.document.body.paragraphs;
      paragraphs.load("items");

      await context.sync();

      const firstParagraphAsRange = paragraphs.items[0].getRange();
      const secondParagraphAsRange = paragraphs.items[1].getRange();

      const comparedLocation = firstParagraphAsRange.compareLocationWith(secondParagraphAsRange);

      await context.sync();

      console.log(`Location of the first paragraph in relation to the second paragraph: ${comparedLocation.value}`);
    });
'Word.NoteItem#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-footnotes.yaml

    // Deletes this referenced footnote.

    await Word.run(async (context) => {
      const footnotes = context.document.body.footnotes;
      footnotes.load("items");
      await context.sync();

      const referenceNumber = $("#input-reference").val();
      const mark = (referenceNumber as number) - 1;
      footnotes.items[mark].delete();
      await context.sync();

      console.log("Footnote deleted.");
    });
'Word.NoteItem#getNext:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-footnotes.yaml

    // Selects the next footnote in the document body.

    await Word.run(async (context) => {
      const footnotes = context.document.body.footnotes;
      footnotes.load("items/reference");
      await context.sync();

      const referenceNumber = $("#input-reference").val();
      const mark = (referenceNumber as number) - 1;
      const reference = footnotes.items[mark].getNext().reference;
      reference.select();
      console.log("Selected is the next footnote: " + (mark + 2));
    });
'Word.NoteItem#body:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-footnotes.yaml

    // Gets the text of the referenced footnote.

    await Word.run(async (context) => {
      const footnotes = context.document.body.footnotes;
      footnotes.load("items/body");
      await context.sync();

      const referenceNumber = $("#input-reference").val();
      const mark = (referenceNumber as number) - 1;
      const footnoteBody = footnotes.items[mark].body.getRange();
      footnoteBody.load("text");
      await context.sync();

      console.log(`Text of footnote ${referenceNumber}: ${footnoteBody.text}`);
    });
'Word.NoteItem#reference:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-footnotes.yaml

    // Selects the footnote's reference mark in the document body.

    await Word.run(async (context) => {
      const footnotes = context.document.body.footnotes;
      footnotes.load("items/reference");
      await context.sync();

      const referenceNumber = $("#input-reference").val();
      const mark = (referenceNumber as number) - 1;
      const item = footnotes.items[mark];
      const reference = item.reference;
      reference.select();
      await context.sync();

      console.log(`Reference ${referenceNumber} is selected.`);
    });
'Word.NoteItem#type:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-footnotes.yaml

    // Gets the referenced note's item type and body type, which are both
    "Footnote".

    await Word.run(async (context) => {
      const footnotes = context.document.body.footnotes;
      footnotes.load("items");
      await context.sync();

      const referenceNumber = $("#input-reference").val();
      const mark = (referenceNumber as number) - 1;
      const item = footnotes.items[mark];
      console.log(`Note type of footnote ${referenceNumber}: ${item.type}`);

      item.body.load("type");
      await context.sync();

      console.log(`Body type of note: ${item.body.type}`);
    });
'Word.NoteItemCollection#getFirst:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-footnotes.yaml

    // Gets the first footnote in the document body and select its reference
    mark.

    await Word.run(async (context) => {
      const reference = context.document.body.footnotes.getFirst().reference;
      reference.select();
      console.log("The first footnote is selected.");
    });
'Word.NoteItemType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-footnotes.yaml

    // Gets the referenced note's item type and body type, which are both
    "Footnote".

    await Word.run(async (context) => {
      const footnotes = context.document.body.footnotes;
      footnotes.load("items");
      await context.sync();

      const referenceNumber = $("#input-reference").val();
      const mark = (referenceNumber as number) - 1;
      const item = footnotes.items[mark];
      console.log(`Note type of footnote ${referenceNumber}: ${item.type}`);

      item.body.load("type");
      await context.sync();

      console.log(`Body type of note: ${item.body.type}`);
    });
'Word.Paragraph#getRange:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/get-paragraph-on-insertion-point.yaml

    await Word.run(async (context) => {
      // Get the complete sentence (as range) associated with the insertion point.
      const sentences = context.document
        .getSelection()
        .getTextRanges(["."] /* Using the "." as delimiter */, false /*means without trimming spaces*/);
      sentences.load("$none");
      await context.sync();

      // Expand the range to the end of the paragraph to get all the complete sentences.
      const sentencesToTheEndOfParagraph = sentences.items[0]
        .getRange()
        .expandTo(
          context.document
            .getSelection()
            .paragraphs.getFirst()
            .getRange(Word.RangeLocation.end)
        )
        .getTextRanges(["."], false /* Don't trim spaces*/);
      sentencesToTheEndOfParagraph.load("text");
      await context.sync();

      for (let i = 0; i < sentencesToTheEndOfParagraph.items.length; i++) {
        console.log(sentencesToTheEndOfParagraph.items[i].text);
      }
    });
'Word.Paragraph#insertAnnotations:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml

    // Adds annotations to the selected paragraph.

    await Word.run(async (context) => {
      const paragraph = context.document.getSelection().paragraphs.getFirst();
      const critique1 = {
        colorScheme: Word.CritiqueColorScheme.red,
        start: 1,
        length: 3
      };
      const critique2 = {
        colorScheme: Word.CritiqueColorScheme.green,
        start: 6,
        length: 1
      };
      const critique3 = {
        colorScheme: Word.CritiqueColorScheme.blue,
        start: 10,
        length: 3
      };
      const critique4 = {
        colorScheme: Word.CritiqueColorScheme.lavender,
        start: 14,
        length: 3
      };
      const critique5 = {
        colorScheme: Word.CritiqueColorScheme.berry,
        start: 18,
        length: 10
      };
      const annotationSet: Word.AnnotationSet = {
        critiques: [critique1, critique2, critique3, critique4, critique5]
      };

      const annotationIds = paragraph.insertAnnotations(annotationSet);

      await context.sync();

      console.log("Annotations inserted:", annotationIds.value);
    });
'Word.Paragraph#insertBreak:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/insert-line-and-page-breaks.yaml

    Word.run(async (context) => {
      context.document.body.paragraphs.getFirst().insertBreak(Word.BreakType.line, "After");

      await context.sync();
      console.log("success");
    });
'Word.Paragraph#insertText:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/insert-in-different-locations.yaml

    await Word.run(async (context) => {
      // Replace the last paragraph.
      const range = context.document.body.paragraphs.getLast().insertText("Just replaced the last paragraph!", "Replace");
      range.font.highlightColor = "black";
      range.font.color = "white";

      await context.sync();
    });
'Word.Paragraph#select:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/35-ranges/scroll-to-range.yaml

    await Word.run(async (context) => {
      // If select is called with no parameters, it selects the object.
      context.document.body.paragraphs.getLast().select();

      await context.sync();
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/35-ranges/scroll-to-range.yaml

    await Word.run(async (context) => {
      // Select can be at the start or end of a range; this by definition moves the insertion point without selecting the range.
      context.document.body.paragraphs.getLast().select(Word.SelectionMode.end);

      await context.sync();
    });
'Word.Paragraph#set:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/90-scenarios/multiple-property-set.yaml

    await Word.run(async (context) => {
      const paragraph = context.document.body.paragraphs.getFirst();
      paragraph.set({
        leftIndent: 30,
        font: {
          bold: true,
          color: "red"
        }
      });

      await context.sync();
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/90-scenarios/multiple-property-set.yaml

    await Word.run(async (context) => {
      const firstParagraph = context.document.body.paragraphs.getFirst();
      const secondParagraph = firstParagraph.getNext();
      firstParagraph.load("text, font/color, font/bold, leftIndent");

      await context.sync();

      secondParagraph.set(firstParagraph);

      await context.sync();
    });
'Word.Paragraph#split:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/35-ranges/split-words-of-first-paragraph.yaml

    await Word.run(async (context) => {
      const paragraph = context.document.body.paragraphs.getFirst();
      const words = paragraph.split([" "], true /* trimDelimiters*/, true /* trimSpaces */);
      words.load("text");

      await context.sync();

      for (let i = 0; i < words.items.length; i++) {
        if (i >= 1) {
          words.items[i - 1].font.highlightColor = "#FFFFFF";
        }
        words.items[i].font.highlightColor = "#FFFF00";

        await context.sync();
        await pause(200);
      }
    });
'Word.Paragraph#startNewList:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/20-lists/insert-list.yaml

    // This example starts a new list with the second paragraph.

    await Word.run(async (context) => {
      const paragraphs = context.document.body.paragraphs;
      paragraphs.load("$none");

      await context.sync();

      // Start new list using the second paragraph.
      const list = paragraphs.items[1].startNewList();
      list.load("$none");

      await context.sync();

      // To add new items to the list, use Start or End on the insertLocation parameter.
      list.insertParagraph("New list item at the start of the list", "Start");
      const paragraph = list.insertParagraph("New list item at the end of the list (set to list level 5)", "End");

      // Set up list level for the list item.
      paragraph.listItem.level = 4;

      // To add paragraphs outside the list, use Before or After.
      list.insertParagraph("New paragraph goes after (not part of the list)", "After");

      await context.sync();
    });
'Word.Paragraph#alignment:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/paragraph-properties.yaml

    await Word.run(async (context) => {
      // Center last paragraph alignment.
      context.document.body.paragraphs.getLast().alignment = "Centered";

      await context.sync();
    });
'Word.Paragraph#leftIndent:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/paragraph-properties.yaml

    await Word.run(async (context) => {
      // Indent the first paragraph.
      context.document.body.paragraphs.getFirst().leftIndent = 75; //units = points

      return context.sync();
    });
'Word.Paragraph#lineSpacing:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/paragraph-properties.yaml

    await Word.run(async (context) => {
      // Adjust line spacing.
      context.document.body.paragraphs.getFirst().lineSpacing = 20;

      await context.sync();
    });
'Word.Paragraph#lineUnitAfter:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/paragraph-properties.yaml

    await Word.run(async (context) => {
      // Set the space (in line units) after the first paragraph.
      context.document.body.paragraphs.getFirst().lineUnitAfter = 1;

      await context.sync();
    });
'Word.Paragraph#lineUnitBefore:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/paragraph-properties.yaml

    await Word.run(async (context) => {
      // Set the space (in line units) before the first paragraph.
      context.document.body.paragraphs.getFirst().lineUnitBefore = 1;

      await context.sync();
    });
'Word.Paragraph#spaceAfter:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/paragraph-properties.yaml

    await Word.run(async (context) => {
      // Set the space (in points) after the first paragraph.
      context.document.body.paragraphs.getFirst().spaceAfter = 20;

      await context.sync();
    });
'Word.Paragraph#style:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-styles.yaml

    // Applies the specified style to a paragraph.

    await Word.run(async (context) => {
      const styleName = $("#style-name-to-use").val() as string;
      if (styleName == "") {
        console.warn("Enter a style name to apply.");
        return;
      }

      const style = context.document.getStyles().getByNameOrNullObject(styleName);
      style.load();
      await context.sync();

      if (style.isNullObject) {
        console.warn(`There's no existing style with the name '${styleName}'.`);
      } else if (style.type != Word.StyleType.paragraph) {
        console.log(`The '${styleName}' style isn't a paragraph style.`);
      } else {
        const body = context.document.body;
        body.clear();
        body.insertParagraph(
          "Video provides a powerful way to help you prove your point. When you click Online Video, you can paste in the embed code for the video you want to add. You can also type a keyword to search online for the video that best fits your document.",
          "Start"
        );
        const paragraph = body.paragraphs.getFirst();
        paragraph.style = style.nameLocal;
        console.log(`'${styleName}' style applied to first paragraph.`);
      }
    });
'Word.Paragraph#styleBuiltIn:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/90-scenarios/doc-assembly.yaml

    await Word.run(async (context) => {
        const paragraph = context.document.body.insertParagraph("Timeline", "End");
        paragraph.styleBuiltIn = "Heading2";
        const paragraph2 = context.document.body.insertParagraph("The Services shall commence on July 31, 2015, and shall continue through July 29, 2015.", "End");
        paragraph2.styleBuiltIn = "Normal";
        const paragraph3 = context.document.body.insertParagraph("Project Costs by Phase", "End");
        paragraph3.styleBuiltIn = "Heading2";
        // Note a content control with the title of "ProjectCosts" is added. Content will be replaced later.
        const paragraph4 = context.document.body.insertParagraph("<Add Project Costs Here>", "End");
        paragraph4.styleBuiltIn = "Normal";
        paragraph4.font.highlightColor = "#FFFF00";
        const contentControl = paragraph4.insertContentControl();
        contentControl.title = "ProjectCosts";
        const paragraph5 = context.document.body.insertParagraph("Project Team", "End");
        paragraph5.styleBuiltIn = "Heading2";
        paragraph5.font.highlightColor = "#FFFFFF";
        const paragraph6 = context.document.body.insertParagraph("Terms of Work", "End");
        paragraph6.styleBuiltIn = "Heading1";
        const paragraph7 = context.document.body.insertParagraph("Contractor shall provide the Services and Deliverable(s) as follows:", "End");
        paragraph7.styleBuiltIn = "Normal";
        const paragraph8 = context.document.body.insertParagraph("Out-of-Pocket Expenses / Invoice Procedures", "End");
        paragraph8.styleBuiltIn = "Heading2";
        const paragraph9 = context.document.body.insertParagraph("Client will be invoiced monthly for the consulting services and T&L expenses. Standard Contractor invoicing is assumed to be acceptable. Invoices are due upon receipt. client will be invoiced all costs associated with out-of-pocket expenses (including, without limitation, costs and expenses associated with meals, lodging, local transportation and any other applicable business expenses) listed on the invoice as a separate line item. Reimbursement for out-of-pocket expenses in connection with performance of this SOW, when authorized and up to the limits set forth in this SOW, shall be in accordance with Client's then-current published policies governing travel and associated business expenses, which information shall be provided by the Client Project Manager.", "End");
        paragraph9.styleBuiltIn = "Normal";
        // Insert a page break at the end of the document.
        context.document.body.insertBreak("Page", "End");

        await context.sync();
    });
'Word.Paragraph#text:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/get-paragraph-on-insertion-point.yaml

    await Word.run(async (context) => {
      // The collection of paragraphs of the current selection returns the full paragraphs contained in it.
      const paragraph = context.document.getSelection().paragraphs.getFirst();
      paragraph.load("text");

      await context.sync();
      console.log(paragraph.text);
    });
'Word.Paragraph#uniqueLocalId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml

    // Registers event handlers.

    await Word.run(async (context) => {
      eventContexts[0] = context.document.onParagraphAdded.add(paragraphChanged);
      eventContexts[1] = context.document.onParagraphChanged.add(paragraphChanged);

      eventContexts[2] = context.document.onAnnotationClicked.add(onClickedHandler);
      eventContexts[3] = context.document.onAnnotationHovered.add(onHoveredHandler);
      eventContexts[4] = context.document.onAnnotationInserted.add(onInsertedHandler);
      eventContexts[5] = context.document.onAnnotationRemoved.add(onRemovedHandler);

      await context.sync();

      console.log("Event handlers registered.");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml

    async function paragraphChanged(args: Word.ParagraphChangedEventArgs) {
      await Word.run(async (context) => {
        const results = [];
        for (let id of args.uniqueLocalIds) {
          let para = context.document.getParagraphByUniqueLocalId(id);
          para.load("uniqueLocalId");

          results.push({ para: para, text: para.getText() });
        }

        await context.sync();

        for (let result of results) {
          console.log(`${args.type}: ${result.para.uniqueLocalId} - ${result.text.value}`);
        }
      });
    }
'Word.ParagraphAddedEventArgs:interface':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/onadded-event.yaml

    // Registers the onParagraphAdded event handler on the document.

    await Word.run(async (context) => {
      eventContext = context.document.onParagraphAdded.add(paragraphAdded);
      await context.sync();

      console.log("Added event handler for when paragraphs are added.");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/onadded-event.yaml

    async function paragraphAdded(event: Word.ParagraphAddedEventArgs) {
      await Word.run(async (context) => {
        console.log(`${event.type} event detected. IDs of paragraphs that were added:`);
        console.log(event.uniqueLocalIds);
      });
    }
'Word.ParagraphChangedEventArgs:interface':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/onchanged-event.yaml

    // Registers the onParagraphChanged event handler on the document.

    await Word.run(async (context) => {
      eventContext = context.document.onParagraphChanged.add(paragraphChanged);
      await context.sync();

      console.log("Added event handler for when content is changed in paragraphs.");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/onchanged-event.yaml

    async function paragraphChanged(event: Word.ParagraphChangedEventArgs) {
      await Word.run(async (context) => {
        console.log(`${event.type} event detected. IDs of paragraphs where content was changed:`);
        console.log(event.uniqueLocalIds);
      });
    }
'Word.ParagraphCollection#getFirst:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml

    // Gets annotations found in the selected paragraph.

    await Word.run(async (context) => {
      const paragraph = context.document.getSelection().paragraphs.getFirst();
      const annotations = paragraph.getAnnotations();
      annotations.load("id,state,critiqueAnnotation");

      await context.sync();

      console.log("Annotations found:");

      for (var i = 0; i < annotations.items.length; i++) {
        const annotation = annotations.items[i];

        console.log(`${annotation.id} - ${annotation.state} - ${JSON.stringify(annotation.critiqueAnnotation.critique)}`);
      }
    });
'Word.ParagraphCollection#getLast:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/15-images/insert-and-get-pictures.yaml

    // Inserts an image anchored to the last paragraph.

    await Word.run(async (context) => {
      context.document.body.paragraphs
        .getLast()
        .insertParagraph("", "After")
        .insertInlinePictureFromBase64(base64Image, "End");

      await context.sync();
    });
'Word.ParagraphCollection#items:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/20-lists/insert-list.yaml

    // This example starts a new list with the second paragraph.

    await Word.run(async (context) => {
      const paragraphs = context.document.body.paragraphs;
      paragraphs.load("$none");

      await context.sync();

      // Start new list using the second paragraph.
      const list = paragraphs.items[1].startNewList();
      list.load("$none");

      await context.sync();

      // To add new items to the list, use Start or End on the insertLocation parameter.
      list.insertParagraph("New list item at the start of the list", "Start");
      const paragraph = list.insertParagraph("New list item at the end of the list (set to list level 5)", "End");

      // Set up list level for the list item.
      paragraph.listItem.level = 4;

      // To add paragraphs outside the list, use Before or After.
      list.insertParagraph("New paragraph goes after (not part of the list)", "After");

      await context.sync();
    });
'Word.ParagraphDeletedEventArgs:interface':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/ondeleted-event.yaml

    // Registers the onParagraphDeleted event handler on the document.

    await Word.run(async (context) => {
      eventContext = context.document.onParagraphDeleted.add(paragraphDeleted);
      await context.sync();

      console.log("Added event handlers for when paragraphs are deleted.");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/ondeleted-event.yaml

    async function paragraphDeleted(event: Word.ParagraphDeletedEventArgs) {
      await Word.run(async (context) => {
        console.log(`${event.type} event detected. IDs of paragraphs that were deleted:`);
        console.log(event.uniqueLocalIds);
      });
    }
'Word.ParagraphFormat:class':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-styles.yaml

    // Sets certain aspects of the specified style's paragraph format e.g., the
    left indent size and the alignment.

    await Word.run(async (context) => {
      const styleName = $("#style-name").val() as string;
      if (styleName == "") {
        console.warn("Enter a style name to update its paragraph format.");
        return;
      }

      const style = context.document.getStyles().getByNameOrNullObject(styleName);
      style.load();
      await context.sync();

      if (style.isNullObject) {
        console.warn(`There's no existing style with the name '${styleName}'.`);
      } else {
        style.paragraphFormat.leftIndent = 30;
        style.paragraphFormat.alignment = Word.Alignment.centered;
        console.log(`Successfully the paragraph format of the '${styleName}' style.`);
      }
    });
'Word.ParagraphFormat#alignment:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-styles.yaml

    // Sets certain aspects of the specified style's paragraph format e.g., the
    left indent size and the alignment.

    await Word.run(async (context) => {
      const styleName = $("#style-name").val() as string;
      if (styleName == "") {
        console.warn("Enter a style name to update its paragraph format.");
        return;
      }

      const style = context.document.getStyles().getByNameOrNullObject(styleName);
      style.load();
      await context.sync();

      if (style.isNullObject) {
        console.warn(`There's no existing style with the name '${styleName}'.`);
      } else {
        style.paragraphFormat.leftIndent = 30;
        style.paragraphFormat.alignment = Word.Alignment.centered;
        console.log(`Successfully the paragraph format of the '${styleName}' style.`);
      }
    });
'Word.ParagraphFormat#leftIndent:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-styles.yaml

    // Sets certain aspects of the specified style's paragraph format e.g., the
    left indent size and the alignment.

    await Word.run(async (context) => {
      const styleName = $("#style-name").val() as string;
      if (styleName == "") {
        console.warn("Enter a style name to update its paragraph format.");
        return;
      }

      const style = context.document.getStyles().getByNameOrNullObject(styleName);
      style.load();
      await context.sync();

      if (style.isNullObject) {
        console.warn(`There's no existing style with the name '${styleName}'.`);
      } else {
        style.paragraphFormat.leftIndent = 30;
        style.paragraphFormat.alignment = Word.Alignment.centered;
        console.log(`Successfully the paragraph format of the '${styleName}' style.`);
      }
    });
'Word.Range#compareLocationWith:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/35-ranges/compare-location.yaml

    // Compares the location of one paragraph in relation to another paragraph.

    await Word.run(async (context) => {
      const paragraphs = context.document.body.paragraphs;
      paragraphs.load("items");

      await context.sync();

      const firstParagraphAsRange = paragraphs.items[0].getRange();
      const secondParagraphAsRange = paragraphs.items[1].getRange();

      const comparedLocation = firstParagraphAsRange.compareLocationWith(secondParagraphAsRange);

      await context.sync();

      console.log(`Location of the first paragraph in relation to the second paragraph: ${comparedLocation.value}`);
    });
'Word.Range#footnotes:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-footnotes.yaml

    // Gets the footnotes in the selected document range.

    await Word.run(async (context) => {
      const footnotes = context.document.getSelection().footnotes;
      footnotes.load("length");
      await context.sync();

      console.log("Number of footnotes in the selected range: " + footnotes.items.length);
    });
'Word.Range#getComments:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-comments.yaml

    // Gets the comments in the selected content.

    await Word.run(async (context) => {
      const comments = context.document.getSelection().getComments();

      // Load objects for display in Script Lab console.
      comments.load();
      await context.sync();

      console.log("Comments:");
      console.log(comments);
    });
'Word.Range#getReviewedText:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-change-tracking.yaml

    // Gets the reviewed text.

    await Word.run(async (context) => {
      const range = context.document.getSelection();
      const before = range.getReviewedText(Word.ChangeTrackingVersion.original);
      const after = range.getReviewedText(Word.ChangeTrackingVersion.current);

      await context.sync();

      console.log(`Reviewed text (before):\n${before.value}`);
      console.log(`Reviewed text (after):\n${after.value}`);
    });
'Word.Range#getTextRanges:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/get-paragraph-on-insertion-point.yaml

    await Word.run(async (context) => {
      // Get the complete sentence (as range) associated with the insertion point.
      const sentences = context.document
        .getSelection()
        .getTextRanges(["."] /* Using the "." as delimiter */, false /*means without trimming spaces*/);
      sentences.load("$none");
      await context.sync();

      // Expand the range to the end of the paragraph to get all the complete sentences.
      const sentencesToTheEndOfParagraph = sentences.items[0]
        .getRange()
        .expandTo(
          context.document
            .getSelection()
            .paragraphs.getFirst()
            .getRange(Word.RangeLocation.end)
        )
        .getTextRanges(["."], false /* Don't trim spaces*/);
      sentencesToTheEndOfParagraph.load("text");
      await context.sync();

      for (let i = 0; i < sentencesToTheEndOfParagraph.items.length; i++) {
        console.log(sentencesToTheEndOfParagraph.items[i].text);
      }
    });
'Word.Range#insertComment:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-comments.yaml

    // Sets a comment on the selected content.

    await Word.run(async (context) => {
      const text = $("#comment-text")
        .val()
        .toString();
      const comment = context.document.getSelection().insertComment(text);

      // Load object for display in Script Lab console.
      comment.load();
      await context.sync();

      console.log("Comment inserted:");
      console.log(comment);
    });
'Word.Range#insertContentControl:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/90-scenarios/doc-assembly.yaml

    // Simulates creation of a template. First searches the document for
    instances of the string "Contractor",

    // then changes the format  of each search result,

    // then wraps each search result within a content control,

    // finally sets a tag and title property on each content control.

    await Word.run(async (context) => {
        const results = context.document.body.search("Contractor");
        results.load("font/bold");

        // Check to make sure these content controls haven't been added yet.
        const customerContentControls = context.document.contentControls.getByTag("customer");
        customerContentControls.load("text");
        await context.sync();

      if (customerContentControls.items.length === 0) {
        for (let i = 0; i < results.items.length; i++) { 
            results.items[i].font.bold = true;
            let cc = results.items[i].insertContentControl();
            cc.tag = "customer";  // This value is used in the next step of this sample.
            cc.title = "Customer Name " + i;
        }
      }
        await context.sync();
    });
'Word.Range#insertField:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-fields.yaml

    // Inserts a Date field before selection.

    await Word.run(async (context) => {
      var range = context.document.getSelection().getRange();

      const field = range.insertField(Word.InsertLocation.before, Word.FieldType.date, '\\@ "M/d/yyyy h:mm am/pm"', true);

      field.load("result,code");
      await context.sync();

      if (field.isNullObject) {
        console.log("There are no fields in this document.");
      } else {
        console.log("Code of the field: " + field.code);
        console.log("Result of the field: " + JSON.stringify(field.result));
      }
    });
'Word.Range#insertFootnote:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-footnotes.yaml

    // Sets a footnote on the selected content.

    await Word.run(async (context) => {
      const text = $("#input-footnote")
        .val()
        .toString();
      const footnote = context.document.getSelection().insertFootnote(text);
      await context.sync();

      console.log("Inserted footnote.");
    });
'Word.Range#styleBuiltIn:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/90-scenarios/doc-assembly.yaml

    await Word.run(async (context) => {
        const header = context.document.body.insertText("This is a sample Heading 1 Title!!\n",
            "Start" /*this means at the beginning of the body */);
        header.styleBuiltIn = Word.BuiltInStyleName.heading1;

        await context.sync();
    });
'Word.RangeLocation:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/get-paragraph-on-insertion-point.yaml

    await Word.run(async (context) => {
      // Get the complete sentence (as range) associated with the insertion point.
      const sentences = context.document
        .getSelection()
        .getTextRanges(["."] /* Using the "." as delimiter */, false /*means without trimming spaces*/);
      sentences.load("$none");
      await context.sync();

      // Expand the range to the end of the paragraph to get all the complete sentences.
      const sentencesToTheEndOfParagraph = sentences.items[0]
        .getRange()
        .expandTo(
          context.document
            .getSelection()
            .paragraphs.getFirst()
            .getRange(Word.RangeLocation.end)
        )
        .getTextRanges(["."], false /* Don't trim spaces*/);
      sentencesToTheEndOfParagraph.load("text");
      await context.sync();

      for (let i = 0; i < sentencesToTheEndOfParagraph.items.length; i++) {
        console.log(sentencesToTheEndOfParagraph.items[i].text);
      }
    });
'Word.Section#getFooter:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/insert-header-and-footer.yaml

    await Word.run(async (context) => {
      context.document.sections
        .getFirst()
        .getFooter("Primary")
        .insertParagraph("This is a primary footer.", "End");

      await context.sync();
    });
'Word.Section#getHeader:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/insert-header-and-footer.yaml

    await Word.run(async (context) => {
      context.document.sections
        .getFirst()
        .getHeader(Word.HeaderFooterType.primary)
        .insertParagraph("This is a primary header.", "End");

      await context.sync();
    });
'Word.Section:class':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/insert-section-breaks.yaml

    // Inserts a section break on the next page.

    await Word.run(async (context) => {
      const body = context.document.body;
      body.insertBreak(Word.BreakType.sectionNext, Word.InsertLocation.end);

      await context.sync();

      console.log("Inserted section break on next page");
    });
'Word.SectionCollection:class':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/insert-section-breaks.yaml

    // Inserts a section break on the next even page.

    await Word.run(async (context) => {
      const body = context.document.body;
      body.insertBreak(Word.BreakType.sectionEven, Word.InsertLocation.end);

      await context.sync();

      console.log("Inserted section break on next even page");
    });
'Word.SelectionMode:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/35-ranges/scroll-to-range.yaml

    await Word.run(async (context) => {
      // Select can be at the start or end of a range; this by definition moves the insertion point without selecting the range.
      context.document.body.paragraphs.getLast().select(Word.SelectionMode.end);

      await context.sync();
    });
'Word.Setting#key:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-settings.yaml

    // Adds a new custom setting or

    // edits the value of an existing one.

    await Word.run(async (context) => {
      const key = $("#key")
        .val()
        .toString();

      if (key == "") {
        console.error("Key shouldn't be empty");
        return;
      }

      const value = $("#value")
        .val()
        .toString();

      const settings = context.document.settings;
      const setting = settings.add(key, value);
      setting.load();
      await context.sync();

      console.log("Setting added or edited:");
      console.log(setting);
    });
'Word.Setting#value:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-settings.yaml

    // Adds a new custom setting or

    // edits the value of an existing one.

    await Word.run(async (context) => {
      const key = $("#key")
        .val()
        .toString();

      if (key == "") {
        console.error("Key shouldn't be empty");
        return;
      }

      const value = $("#value")
        .val()
        .toString();

      const settings = context.document.settings;
      const setting = settings.add(key, value);
      setting.load();
      await context.sync();

      console.log("Setting added or edited:");
      console.log(setting);
    });
'Word.SettingCollection:class':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-settings.yaml

    // Deletes all custom settings this add-in had set on this document.

    await Word.run(async (context) => {
      const settings = context.document.settings;
      settings.deleteAll();
      await context.sync();
      console.log("All settings deleted");
    });
'Word.SettingCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-settings.yaml

    // Adds a new custom setting or

    // edits the value of an existing one.

    await Word.run(async (context) => {
      const key = $("#key")
        .val()
        .toString();

      if (key == "") {
        console.error("Key shouldn't be empty");
        return;
      }

      const value = $("#value")
        .val()
        .toString();

      const settings = context.document.settings;
      const setting = settings.add(key, value);
      setting.load();
      await context.sync();

      console.log("Setting added or edited:");
      console.log(setting);
    });
'Word.SettingCollection#items:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-settings.yaml

    // Gets all custom settings this add-in set on this document.

    await Word.run(async (context) => {
      const settings = context.document.settings;
      settings.load("items");
      await context.sync();

      if (settings.items.length == 0) {
        console.log("There are no settings");
      } else {
        console.log("All settings:");
        for (let i = 0; i < settings.items.length; i++) {
          console.log(settings.items[i]);
        }
      }
    });
'Word.Style#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-styles.yaml

    // Deletes the custom style.

    await Word.run(async (context) => {
      const styleName = $("#style-name-to-delete").val() as string;
      if (styleName == "") {
        console.warn("Enter a style name to delete.");
        return;
      }

      const style = context.document.getStyles().getByNameOrNullObject(styleName);
      style.load();
      await context.sync();

      if (style.isNullObject) {
        console.warn(`There's no existing style with the name '${styleName}'.`);
      } else {
        style.delete();
        console.log(`Successfully deleted custom style '${styleName}'.`);
      }
    });
'Word.Style#font:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-styles.yaml

    // Updates font properties (e.g., color, size) of the specified style.

    await Word.run(async (context) => {
      const styleName = $("#style-name").val() as string;
      if (styleName == "") {
        console.warn("Enter a style name to update font properties.");
        return;
      }

      const style = context.document.getStyles().getByNameOrNullObject(styleName);
      style.load();
      await context.sync();

      if (style.isNullObject) {
        console.warn(`There's no existing style with the name '${styleName}'.`);
      } else {
        const font = style.font;
        font.color = "#FF0000";
        font.size = 20;
        console.log(`Successfully updated font properties of the '${styleName}' style.`);
      }
    });
'Word.Style#nameLocal:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-styles.yaml

    // Applies the specified style to a paragraph.

    await Word.run(async (context) => {
      const styleName = $("#style-name-to-use").val() as string;
      if (styleName == "") {
        console.warn("Enter a style name to apply.");
        return;
      }

      const style = context.document.getStyles().getByNameOrNullObject(styleName);
      style.load();
      await context.sync();

      if (style.isNullObject) {
        console.warn(`There's no existing style with the name '${styleName}'.`);
      } else if (style.type != Word.StyleType.paragraph) {
        console.log(`The '${styleName}' style isn't a paragraph style.`);
      } else {
        const body = context.document.body;
        body.clear();
        body.insertParagraph(
          "Video provides a powerful way to help you prove your point. When you click Online Video, you can paste in the embed code for the video you want to add. You can also type a keyword to search online for the video that best fits your document.",
          "Start"
        );
        const paragraph = body.paragraphs.getFirst();
        paragraph.style = style.nameLocal;
        console.log(`'${styleName}' style applied to first paragraph.`);
      }
    });
'Word.Style#paragraphFormat:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-styles.yaml

    // Sets certain aspects of the specified style's paragraph format e.g., the
    left indent size and the alignment.

    await Word.run(async (context) => {
      const styleName = $("#style-name").val() as string;
      if (styleName == "") {
        console.warn("Enter a style name to update its paragraph format.");
        return;
      }

      const style = context.document.getStyles().getByNameOrNullObject(styleName);
      style.load();
      await context.sync();

      if (style.isNullObject) {
        console.warn(`There's no existing style with the name '${styleName}'.`);
      } else {
        style.paragraphFormat.leftIndent = 30;
        style.paragraphFormat.alignment = Word.Alignment.centered;
        console.log(`Successfully the paragraph format of the '${styleName}' style.`);
      }
    });
'Word.StyleCollection#getByNameOrNullObject:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-styles.yaml

    // Adds a new style.

    await Word.run(async (context) => {
      const newStyleName = $("#new-style-name").val() as string;
      if (newStyleName == "") {
        console.warn("Enter a style name to add.");
        return;
      }

      const style = context.document.getStyles().getByNameOrNullObject(newStyleName);
      style.load();
      await context.sync();

      if (!style.isNullObject) {
        console.warn(
          `There's an existing style with the same name '${newStyleName}'! Please provide another style name.`
        );
        return;
      }

      const newStyleType = ($("#new-style-type").val() as unknown) as Word.StyleType;
      context.document.addStyle(newStyleName, newStyleType);
      await context.sync();
      
      console.log(newStyleName + " has been added to the style list.");
    });
'Word.StyleCollection#getCount:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-styles.yaml

    // Gets the number of styles.

    await Word.run(async (context) => {
      const styles = context.document.getStyles();
      const count = styles.getCount();
      await context.sync();

      console.log(`Number of styles: ${count.value}`);
    });
'Word.StyleType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-styles.yaml

    // Applies the specified style to a paragraph.

    await Word.run(async (context) => {
      const styleName = $("#style-name-to-use").val() as string;
      if (styleName == "") {
        console.warn("Enter a style name to apply.");
        return;
      }

      const style = context.document.getStyles().getByNameOrNullObject(styleName);
      style.load();
      await context.sync();

      if (style.isNullObject) {
        console.warn(`There's no existing style with the name '${styleName}'.`);
      } else if (style.type != Word.StyleType.paragraph) {
        console.log(`The '${styleName}' style isn't a paragraph style.`);
      } else {
        const body = context.document.body;
        body.clear();
        body.insertParagraph(
          "Video provides a powerful way to help you prove your point. When you click Online Video, you can paste in the embed code for the video you want to add. You can also type a keyword to search online for the video that best fits your document.",
          "Start"
        );
        const paragraph = body.paragraphs.getFirst();
        paragraph.style = style.nameLocal;
        console.log(`'${styleName}' style applied to first paragraph.`);
      }
    });
'Word.Table#getBorder:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/40-tables/manage-formatting.yaml

    // Gets border details about the first table in the document.

    await Word.run(async (context) => {
      const firstTable = context.document.body.tables.getFirst();
      const borderLocation = Word.BorderLocation.top;
      const border = firstTable.getBorder(borderLocation);
      border.load(["type", "color", "width"]);
      await context.sync();

      console.log(`Details about the ${borderLocation} border of the first table:`);
      console.log(`- Color: ${border.color}`);
      console.log(`- Type: ${border.type}`);
      console.log(`- Width: ${border.width} points`);
    });
'Word.Table#getCell:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/40-tables/table-cell-access.yaml

    // Gets the content of the first cell in the first table.

    await Word.run(async (context) => {
      const firstCell = context.document.body.tables.getFirst().getCell(0, 0).body;
      firstCell.load("text");

      await context.sync();
      console.log("First cell's text is: " + firstCell.text);
    });
'Word.Table#getCellPadding:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/40-tables/manage-formatting.yaml

    // Gets cell padding details about the first table in the document.

    await Word.run(async (context) => {
      const firstTable = context.document.body.tables.getFirst();
      const cellPaddingLocation = Word.CellPaddingLocation.right;
      const cellPadding = firstTable.getCellPadding(cellPaddingLocation);
      await context.sync();

      console.log(
        `Cell padding details about the ${cellPaddingLocation} border of the first table: ${cellPadding.value} points`
      );
    });
'Word.Table#alignment:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/40-tables/manage-formatting.yaml

    // Gets alignment details about the first table in the document.

    await Word.run(async (context) => {
      const firstTable = context.document.body.tables.getFirst();
      firstTable.load(["alignment", "horizontalAlignment", "verticalAlignment"]);
      await context.sync();

      console.log(`Details about the alignment of the first table:`);
      console.log(`- Alignment of the table within the containing page column: ${firstTable.alignment}`);
      console.log(`- Horizontal alignment of every cell in the table: ${firstTable.horizontalAlignment}`);
      console.log(`- Vertical alignment of every cell in the table: ${firstTable.verticalAlignment}`);
    });
'Word.Table#horizontalAlignment:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/40-tables/manage-formatting.yaml

    // Gets alignment details about the first table in the document.

    await Word.run(async (context) => {
      const firstTable = context.document.body.tables.getFirst();
      firstTable.load(["alignment", "horizontalAlignment", "verticalAlignment"]);
      await context.sync();

      console.log(`Details about the alignment of the first table:`);
      console.log(`- Alignment of the table within the containing page column: ${firstTable.alignment}`);
      console.log(`- Horizontal alignment of every cell in the table: ${firstTable.horizontalAlignment}`);
      console.log(`- Vertical alignment of every cell in the table: ${firstTable.verticalAlignment}`);
    });
'Word.Table#rows:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/40-tables/manage-formatting.yaml

    // Gets content alignment details about the first row of the first table in
    the document.

    await Word.run(async (context) => {
      const firstTable = context.document.body.tables.getFirst();
      const firstTableRow = firstTable.rows.getFirst();
      firstTableRow.load(["horizontalAlignment", "verticalAlignment"]);
      await context.sync();

      console.log(`Details about the alignment of the first table's first row:`);
      console.log(`- Horizontal alignment of every cell in the row: ${firstTableRow.horizontalAlignment}`);
      console.log(`- Vertical alignment of every cell in the row: ${firstTableRow.verticalAlignment}`);
    });
'Word.Table#verticalAlignment:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/40-tables/manage-formatting.yaml

    // Gets alignment details about the first table in the document.

    await Word.run(async (context) => {
      const firstTable = context.document.body.tables.getFirst();
      firstTable.load(["alignment", "horizontalAlignment", "verticalAlignment"]);
      await context.sync();

      console.log(`Details about the alignment of the first table:`);
      console.log(`- Alignment of the table within the containing page column: ${firstTable.alignment}`);
      console.log(`- Horizontal alignment of every cell in the table: ${firstTable.horizontalAlignment}`);
      console.log(`- Vertical alignment of every cell in the table: ${firstTable.verticalAlignment}`);
    });
'Word.Table:class':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/40-tables/table-cell-access.yaml

    await Word.run(async (context) => {
      // Use a two-dimensional array to hold the initial table values.
      const data = [
        ["Tokyo", "Beijing", "Seattle"],
        ["Apple", "Orange", "Pineapple"]
      ];
      const table = context.document.body.insertTable(2, 3, "Start", data);
      table.styleBuiltIn = Word.BuiltInStyleName.gridTable5Dark_Accent2;
      table.styleFirstColumn = false;

      await context.sync();
    });
'Word.TableBorder#color:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/40-tables/manage-formatting.yaml

    // Gets border details about the first table in the document.

    await Word.run(async (context) => {
      const firstTable = context.document.body.tables.getFirst();
      const borderLocation = Word.BorderLocation.top;
      const border = firstTable.getBorder(borderLocation);
      border.load(["type", "color", "width"]);
      await context.sync();

      console.log(`Details about the ${borderLocation} border of the first table:`);
      console.log(`- Color: ${border.color}`);
      console.log(`- Type: ${border.type}`);
      console.log(`- Width: ${border.width} points`);
    });
'Word.TableBorder#type:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/40-tables/manage-formatting.yaml

    // Gets border details about the first table in the document.

    await Word.run(async (context) => {
      const firstTable = context.document.body.tables.getFirst();
      const borderLocation = Word.BorderLocation.top;
      const border = firstTable.getBorder(borderLocation);
      border.load(["type", "color", "width"]);
      await context.sync();

      console.log(`Details about the ${borderLocation} border of the first table:`);
      console.log(`- Color: ${border.color}`);
      console.log(`- Type: ${border.type}`);
      console.log(`- Width: ${border.width} points`);
    });
'Word.TableBorder#width:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/40-tables/manage-formatting.yaml

    // Gets border details about the first table in the document.

    await Word.run(async (context) => {
      const firstTable = context.document.body.tables.getFirst();
      const borderLocation = Word.BorderLocation.top;
      const border = firstTable.getBorder(borderLocation);
      border.load(["type", "color", "width"]);
      await context.sync();

      console.log(`Details about the ${borderLocation} border of the first table:`);
      console.log(`- Color: ${border.color}`);
      console.log(`- Type: ${border.type}`);
      console.log(`- Width: ${border.width} points`);
    });
'Word.TableCell:class':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/40-tables/table-cell-access.yaml

    // Gets the content of the first cell in the first table.

    await Word.run(async (context) => {
      const firstCell = context.document.body.tables.getFirst().getCell(0, 0).body;
      firstCell.load("text");

      await context.sync();
      console.log("First cell's text is: " + firstCell.text);
    });
'Word.TableCell#getBorder:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/40-tables/manage-formatting.yaml

    // Gets border details about the first of the first table in the document.

    await Word.run(async (context) => {
      const firstTable = context.document.body.tables.getFirst();
      const firstCell = firstTable.getCell(0, 0);
      const borderLocation = "Left";
      const border = firstCell.getBorder(borderLocation);
      border.load(["type", "color", "width"]);
      await context.sync();

      console.log(`Details about the ${borderLocation} border of the first table's first cell:`);
      console.log(`- Color: ${border.color}`);
      console.log(`- Type: ${border.type}`);
      console.log(`- Width: ${border.width} points`);
    });
'Word.TableCell#getCellPadding:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/40-tables/manage-formatting.yaml

    // Gets cell padding details about the first cell of the first table in the
    document.

    await Word.run(async (context) => {
      const firstTable = context.document.body.tables.getFirst();
      const firstCell = firstTable.getCell(0, 0);
      const cellPaddingLocation = "Left";
      const cellPadding = firstCell.getCellPadding(cellPaddingLocation);
      await context.sync();

      console.log(
        `Cell padding details about the ${cellPaddingLocation} border of the first table's first cell: ${cellPadding.value} points`
      );
    });
'Word.TableCell#horizontalAlignment:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/40-tables/manage-formatting.yaml

    // Gets content alignment details about the first cell of the first table in
    the document.

    await Word.run(async (context) => {
      const firstTable = context.document.body.tables.getFirst();
      const firstCell = firstTable.getCell(0, 0);
      firstCell.load(["horizontalAlignment", "verticalAlignment"]);
      await context.sync();

      console.log(`Details about the alignment of the first table's first cell:`);
      console.log(`- Horizontal alignment of the cell's content: ${firstCell.horizontalAlignment}`);
      console.log(`- Vertical alignment of the cell's content: ${firstCell.verticalAlignment}`);
    });
'Word.TableCell#verticalAlignment:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/40-tables/manage-formatting.yaml

    // Gets content alignment details about the first cell of the first table in
    the document.

    await Word.run(async (context) => {
      const firstTable = context.document.body.tables.getFirst();
      const firstCell = firstTable.getCell(0, 0);
      firstCell.load(["horizontalAlignment", "verticalAlignment"]);
      await context.sync();

      console.log(`Details about the alignment of the first table's first cell:`);
      console.log(`- Horizontal alignment of the cell's content: ${firstCell.horizontalAlignment}`);
      console.log(`- Vertical alignment of the cell's content: ${firstCell.verticalAlignment}`);
    });
'Word.TableCollection:class':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/40-tables/manage-formatting.yaml

    // Gets alignment details about the first table in the document.

    await Word.run(async (context) => {
      const firstTable = context.document.body.tables.getFirst();
      firstTable.load(["alignment", "horizontalAlignment", "verticalAlignment"]);
      await context.sync();

      console.log(`Details about the alignment of the first table:`);
      console.log(`- Alignment of the table within the containing page column: ${firstTable.alignment}`);
      console.log(`- Horizontal alignment of every cell in the table: ${firstTable.horizontalAlignment}`);
      console.log(`- Vertical alignment of every cell in the table: ${firstTable.verticalAlignment}`);
    });
'Word.TableCollection#getFirst:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/40-tables/table-cell-access.yaml

    // Gets the content of the first cell in the first table.

    await Word.run(async (context) => {
      const firstCell = context.document.body.tables.getFirst().getCell(0, 0).body;
      firstCell.load("text");

      await context.sync();
      console.log("First cell's text is: " + firstCell.text);
    });
'Word.TableRow#getBorder:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/40-tables/manage-formatting.yaml

    // Gets border details about the first row of the first table in the
    document.

    await Word.run(async (context) => {
      const firstTable = context.document.body.tables.getFirst();
      const firstTableRow = firstTable.rows.getFirst();
      const borderLocation = Word.BorderLocation.bottom;
      const border = firstTableRow.getBorder(borderLocation);
      border.load(["type", "color", "width"]);
      await context.sync();

      console.log(`Details about the ${borderLocation} border of the first table's first row:`);
      console.log(`- Color: ${border.color}`);
      console.log(`- Type: ${border.type}`);
      console.log(`- Width: ${border.width} points`);
    });
'Word.TableRow#getCellPadding:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/40-tables/manage-formatting.yaml

    // Gets cell padding details about the first row of the first table in the
    document.

    await Word.run(async (context) => {
      const firstTable = context.document.body.tables.getFirst();
      const firstTableRow = firstTable.rows.getFirst();
      const cellPaddingLocation = Word.CellPaddingLocation.bottom;
      const cellPadding = firstTableRow.getCellPadding(cellPaddingLocation);
      await context.sync();

      console.log(
        `Cell padding details about the ${cellPaddingLocation} border of the first table's first row: ${cellPadding.value} points`
      );
    });
'Word.TableRowCollection:class':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/40-tables/manage-formatting.yaml

    // Gets content alignment details about the first row of the first table in
    the document.

    await Word.run(async (context) => {
      const firstTable = context.document.body.tables.getFirst();
      const firstTableRow = firstTable.rows.getFirst();
      firstTableRow.load(["horizontalAlignment", "verticalAlignment"]);
      await context.sync();

      console.log(`Details about the alignment of the first table's first row:`);
      console.log(`- Horizontal alignment of every cell in the row: ${firstTableRow.horizontalAlignment}`);
      console.log(`- Vertical alignment of every cell in the row: ${firstTableRow.verticalAlignment}`);
    });
'Word.TableRowCollection#getFirst:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/40-tables/manage-formatting.yaml

    // Gets border details about the first row of the first table in the
    document.

    await Word.run(async (context) => {
      const firstTable = context.document.body.tables.getFirst();
      const firstTableRow = firstTable.rows.getFirst();
      const borderLocation = Word.BorderLocation.bottom;
      const border = firstTableRow.getBorder(borderLocation);
      border.load(["type", "color", "width"]);
      await context.sync();

      console.log(`Details about the ${borderLocation} border of the first table's first row:`);
      console.log(`- Color: ${border.color}`);
      console.log(`- Type: ${border.type}`);
      console.log(`- Width: ${border.width} points`);
    });
'Word.TableStyle:class':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/99-preview-apis/manage-custom-style.yaml

    // Gets the table style properties and displays them in the form.

    const styleName = $("#style-name")
      .val()
      .toString();
    if (styleName == "") {
      console.warn("Please input a table style name.");
      return;
    }


    await Word.run(async (context) => {
      const tableStyle = context.document.getStyles().getByName(styleName).tableStyle;
      tableStyle.load();
      await context.sync();

      if (tableStyle.isNullObject) {
        console.warn(`There's no existing table style with the name '${styleName}'.`);
        return;
      }

      console.log(tableStyle);
      $("#alignment").val(tableStyle.alignment);
      $("#allow-break-across-page").val(tableStyle.allowBreakAcrossPage.toString());
      $("#top-cell-margin").val(tableStyle.topCellMargin);
      $("#bottom-cell-margin").val(tableStyle.bottomCellMargin);
      $("#left-cell-margin").val(tableStyle.leftCellMargin);
      $("#right-cell-margin").val(tableStyle.rightCellMargin);
      $("#cell-spacing").val(tableStyle.cellSpacing);
    });
'Word.TrackedChange#accept:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-tracked-changes.yaml

    // Accepts the first tracked change.

    await Word.run(async (context) => {
      const body = context.document.body;
      const trackedChanges = body.getTrackedChanges();
      const trackedChange = trackedChanges.getFirst();
      trackedChange.load();
      await context.sync();

      console.log("First tracked change:");
      console.log(trackedChange);
      trackedChange.accept();
      console.log("Accepted the first tracked change");
    });
'Word.TrackedChange#getNext:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-tracked-changes.yaml

    // Gets the next (second) tracked change.

    await Word.run(async (context) => {
      const body = context.document.body;
      const trackedChanges = body.getTrackedChanges();
      await context.sync();

      const trackedChange = trackedChanges.getFirst();
      await context.sync();

      const nextTrackedChange = trackedChange.getNext();
      await context.sync();

      nextTrackedChange.load();
      await context.sync();

      console.log(nextTrackedChange);
    });
'Word.TrackedChange#getRange:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-tracked-changes.yaml

    // Gets the range of the first tracked change.

    await Word.run(async (context) => {
      const body = context.document.body;
      const trackedChanges = body.getTrackedChanges();
      const trackedChange = trackedChanges.getFirst();
      await context.sync();

      const range = trackedChange.getRange();
      range.load();
      await context.sync();

      console.log("range.text: " + range.text);
    });
'Word.TrackedChange#reject:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-tracked-changes.yaml

    // Rejects the first tracked change.

    await Word.run(async (context) => {
      const body = context.document.body;
      const trackedChanges = body.getTrackedChanges();
      const trackedChange = trackedChanges.getFirst();
      trackedChange.load();
      await context.sync();

      console.log("First tracked change:");
      console.log(trackedChange);
      trackedChange.reject();
      console.log("Rejected the first tracked change");
    });
'Word.TrackedChangeCollection#acceptAll:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-tracked-changes.yaml

    // Accepts all tracked changes.

    await Word.run(async (context) => {
      const body = context.document.body;
      const trackedChanges = body.getTrackedChanges();
      trackedChanges.acceptAll();
      console.log("Accepted all tracked changes");
    });
'Word.TrackedChangeCollection#getFirst:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-tracked-changes.yaml

    // Gets the range of the first tracked change.

    await Word.run(async (context) => {
      const body = context.document.body;
      const trackedChanges = body.getTrackedChanges();
      const trackedChange = trackedChanges.getFirst();
      await context.sync();

      const range = trackedChange.getRange();
      range.load();
      await context.sync();

      console.log("range.text: " + range.text);
    });
'Word.TrackedChangeCollection#rejectAll:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-tracked-changes.yaml

    // Rejects all tracked changes.

    await Word.run(async (context) => {
      const body = context.document.body;
      const trackedChanges = body.getTrackedChanges();
      trackedChanges.rejectAll();
      console.log("Rejected all tracked changes");
    });
'Word.VerticalAlignment:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/40-tables/manage-formatting.yaml

    // Gets content alignment details about the first row of the first table in
    the document.

    await Word.run(async (context) => {
      const firstTable = context.document.body.tables.getFirst();
      const firstTableRow = firstTable.rows.getFirst();
      firstTableRow.load(["horizontalAlignment", "verticalAlignment"]);
      await context.sync();

      console.log(`Details about the alignment of the first table's first row:`);
      console.log(`- Horizontal alignment of every cell in the row: ${firstTableRow.horizontalAlignment}`);
      console.log(`- Vertical alignment of every cell in the row: ${firstTableRow.verticalAlignment}`);
    });
