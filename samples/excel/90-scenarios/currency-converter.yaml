order: 5
id: excel-scenarios-currency-converter
name: Currency Converter
description: 'Uses an exchange rate API to convert currency values based on their original transaction times.'
author: cakriwut
host: EXCEL
api_set:
    ExcelApi: '1.4'
script:
    content: |
      /*
       * Copyright (c) Riwut Libinuko. All rights reserved. Licensed under the MIT license.
      */

      declare let moment: any;
      let tblSetup: Record<string, number> = {};

      $("#convert").click(() => tryCatch(convert));
      $("#setup").click(() => tryCatch(setupSample));      

      /** Main converting function **/
      async function convert() {
        await Excel.run(async (context) => {
          let range = context.workbook.getSelectedRange(); 
          // Check if any cell inside table is selected.
          let table = range.getTables();
          table.load("items")    
          await context.sync();
          if(table.items.length == 0){
            console.error("Error: Please select any cell inside table.");
            return;
          }
          
          let selectedTable = table.getFirst();
          selectedTable.columns.load("items");
          await context.sync();
          if(!IsTableValid(selectedTable.columns.items)) {
            console.error('Error: Some of default table header is missing. Required headers: \r\n"CCY","Price (CCY)","Trx Date","Base","Price in Base"')
            return;
          }
          selectedTable.rows.load("items,values");
          await context.sync();
          selectedTable.rows.items.forEach(async (row,idx,arr) => {
            let priceBaseRange = row.getRange().getCell(0, tblSetup['Price in Base']);
            priceBaseRange.load("address,text");
            await context.sync();
              let priceInBase = row.values[0][tblSetup['Price in Base']];
              let priceInCcy = row.values[0][tblSetup['Price (CCY)']];
              let trxDate = row.values[0][tblSetup['Trx Date']]
              let ccy = row.values[0][tblSetup['CCY']];
              let baseCcy = row.values[0][tblSetup['Base']]
              if (priceInBase === "") {
                let dateMoment = moment.fromOADate(trxDate);
                let period = dateMoment.format("YYYY-MM-DD");
                let queryUrl = convertValue(ccy, baseCcy, period, period);
                let response = await fetch(queryUrl);
                if (response.ok) {
                  let result = await response.json();
                  let converted = priceInCcy * result.rates[baseCcy];
                  priceBaseRange.values = [[converted]];
                  context.sync();
                }
              } else {
                console.info('Row: ' + idx + ' has been converted. Skipped.')
              }
          });
          
        });
      }

      /** Check if Table is Valid, ie has all required column **/
      function IsTableValid(items: Excel.TableColumn[]) {
        // Build the column index, search table header
        // CCY - origin currency
        // Price (CCY) - price in origin currency
        // Trx Date - transaction date
        // Base  - home currency
        // Price in Base - price in base currency
        items.forEach((col, idx, arr) => {
          tblSetup[col.name] = idx;
        });
        if (tblSetup['CCY'] === undefined || tblSetup['Price (CCY)'] === undefined || tblSetup['Trx Date'] === undefined || tblSetup['Base'] === undefined || tblSetup['Price in Base'] === undefined) {
          return false;
        }
        
        return true;
      }

      /** Request currency exchange on specific date **/      
      function convertValue(ccyOrig, ccyBase, start, end) {
        // GET https://api.exchangeratesapi.io/latest?symbols=SGD,USD&base=SGD&start_at=2019-10-05&end_at=2019-10-05
        const baseUrl = "https://api.exchangeratesapi.io/latest";
        let query = "?base=" + ccyOrig + "&symbols=" + ccyBase + "," + ccyOrig + "&start_at=" + start + "&end_at=" + end;
        return baseUrl + query;
      }

      /** Default helper for invoking an action and handling errors. */
      async function tryCatch(callback) {
        try {
          await callback();
        } catch (error) {
          // Note: In a production add-in, you'd want to notify the user through your add-in's UI.
          console.error(error);
        }
      }
      /* Create sample data */
      /* Default header */
      /* "CCY","Price (CCY)","Trx Date","Base","Price in Base" */
      async function setupSample() {
        await Excel.run(async (context) => {
          context.workbook.worksheets.getItemOrNullObject("Sample").delete();
          const sheet = context.workbook.worksheets.add("Sample");
          const salesTable = sheet.tables.add("A1:F1", true);
          salesTable.name = "SalesTable";
          salesTable.getHeaderRowRange().values = [["Product", "CCY", "Price (CCY)", "Trx Date", "Base", "Price in Base"]];
          salesTable.rows.add(null, [
            ["Frames", "MYR", 5000, "2019-10-05", "SGD", null],
            ["Chains", "CNY", 12000, "2019-10-04", "SGD",null]
          ]);
          salesTable.getRange().format.autofitColumns();
          sheet.activate();          
        });
      }
    language: typescript
template:
    content: |+
        <header class="ms-welcome__header ms-bgColor-neutralLighter" style='text-align: center'>
            <h1 class="ms-font-su">Simple Currency Converter</h1>
        </header>

        <section class="ms-font-m">
            <p>Simple currency converter shows how to read data from a cell, call currency converter API and update the result
                in adjecent cell.</p>
        </section>

        <section class="setup ms-font-m">
            <h3>Set up</h3>
            <button id="setup" class="ms-Button">
                <span class="ms-Button-label">Add sample data</span>
            </button>
        </section>

        <section class="samples ms-font-m">
            <h3>Try it out</h3>
            <p>The price conversion will be provide by conversion API. Select on empty price cell in price column, and click "Convert"</p>
            <ol>
              <li>Select any cell in the table.</li>
              <li>Click Convert button: <br /><br />
                 <button id="convert" class="ms-Button">
                    <span class="ms-Button-label">Convert</span>
                </button>
              </li>
            </ol>
        </section>

    language: html
style:
    content: |-
        section.samples {
            margin-top: 20px;
        }
        section.samples .ms-Button, section.setup .ms-Button {
            display: block;
            margin-bottom: 5px;
            margin-left: 20px;
            min-width: 80px;
        }
    language: css
libraries: |-
    https://appsforoffice.microsoft.com/lib/1/hosted/office.js
    @types/office-js
    office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
    office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css
    core-js@2.4.1/client/core.min.js
    @types/core-js
    jquery@3.1.1
    @types/jquery@3.3.1
    moment@2.18.1 
    moment-msdate@0.2.2