order: 1
id: excel-pivottables-get-pivottables
name: Get PivotTables
description: Get existing PivotTables in the workbook through their collections and through the ranges they occupy.
host: EXCEL
api_set:
    ExcelAPI: '1.12'
script:
    content: |
        $("#setup").click(() => tryCatch(setup)); $("#get-pivottables-in-workbook").click(() => tryCatch(getPivotTablesInWorkbook)); $("#get-pivottables-in-worksheet").click(() => tryCatch(getPivotTablesInWorksheet)); $("#get-pivottables-in-selected-range").click(() => tryCatch(getPivotTablesInSelectedRange));
        async function getPivotTablesInWorkbook() {
          await Excel.run(async (context) => {
            // Get the names of all the PivotTables in the workbook.
            const pivotTables = context.workbook.pivotTables;
            pivotTables.load("name");
            await context.sync();

            // Display the names in the console.
            console.log("PivotTables in the workbook:")
            pivotTables.items.forEach((pivotTable) => {
              console.log(`\t${pivotTable.name}`);
            });
          });
        }

        async function getPivotTablesInWorksheet() {
          await Excel.run(async (context) => {
            // Get the names of all the PivotTables in the current worksheet.
            const pivotTables = context.workbook.worksheets.getActiveWorksheet().pivotTables;
            pivotTables.load("name");
            await context.sync();

            // Display the names in the console.
            console.log("PivotTables in the current worksheet:")
            pivotTables.items.forEach((pivotTable) => {
              console.log(`\t${pivotTable.name}`);
            });
          });
        }

        async function getPivotTablesInSelectedRange() {
          await Excel.run(async (context) => {
            const activeRange = context.workbook.getSelectedRange();

            // Get all the PivotTables that intersect with this range.
            const partiallyContainedPivotTables = activeRange.getPivotTables();
            // Get all the PivotTables that are completely contained within this range.
            const fullyContainedPivotTables = activeRange.getPivotTables(true);

            partiallyContainedPivotTables.load("name");
            fullyContainedPivotTables.load("name");
            await context.sync();

            // Display the names in the console.
            console.log("PivotTables in the current range:")
            partiallyContainedPivotTables.items.forEach((pivotTable) => {
              console.log(`\t${pivotTable.name}`);
            });
            console.log("PivotTables completely contained in the current range:")
            fullyContainedPivotTables.items.forEach((pivotTable) => {
              console.log(`\t${pivotTable.name}`);
            });
          });
        }

        async function setup() {
          await Excel.run(async (context) => {
            // Create the worksheets.
            context.workbook.worksheets.getItemOrNullObject("Data").delete();
            const dataSheet = context.workbook.worksheets.add("Data");
            context.workbook.worksheets.getItemOrNullObject("TotalPivot").delete();
            context.workbook.worksheets.getItemOrNullObject("FilteredPivot").delete();
            const totalPivot = context.workbook.worksheets.add("TotalPivot");
            const filteredPivot = context.workbook.worksheets.add("FilteredPivot");

            // Create farm data.
            const data = [
              ["Farm", "Type", "Classification", "Crates Sold at Farm", "Crates Sold Wholesale"],
              ["A Farms", "Lime", "Organic", 300, 2000],
              ["A Farms", "Lemon", "Organic", 250, 1800],
              ["A Farms", "Orange", "Organic", 200, 2200],
              ["B Farms", "Lime", "Conventional", 80, 1000],
              ["B Farms", "Lemon", "Conventional", 75, 1230],
              ["B Farms", "Orange", "Conventional", 25, 800],
              ["B Farms", "Orange", "Organic", 20, 500],
              ["B Farms", "Lemon", "Organic", 10, 770],
              ["B Farms", "Kiwi", "Conventional", 30, 300],
              ["B Farms", "Lime", "Organic", 50, 400],
              ["C Farms", "Apple", "Organic", 275, 220],
              ["C Farms", "Kiwi", "Organic", 200, 120],
              ["D Farms", "Apple", "Conventional", 100, 3000],
              ["D Farms", "Apple", "Organic", 80, 2800],
              ["E Farms", "Lime", "Conventional", 160, 2700],
              ["E Farms", "Orange", "Conventional", 180, 2000],
              ["E Farms", "Apple", "Conventional", 245, 2200],
              ["E Farms", "Kiwi", "Conventional", 200, 1500],
              ["F Farms", "Kiwi", "Organic", 100, 150],
              ["F Farms", "Lemon", "Conventional", 150, 270]
            ];

            const range = dataSheet.getRange("A1:E21");
            range.values = data;
            range.format.autofitColumns();

            // Create the first PivotTable.
            const pivotTable = totalPivot.pivotTables.add("All Farm Sales", "Data!A1:E21", "TotalPivot!A2");
            pivotTable.rowHierarchies.add(pivotTable.hierarchies.getItem("Farm"));
            pivotTable.rowHierarchies.add(pivotTable.hierarchies.getItem("Type"));
            pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem("Crates Sold Wholesale"));
            pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem("Crates Sold at Farm"));

            // Create the second PivotTable.
            const pivotTable2 = filteredPivot.pivotTables.add("Filtered Wholesale", "Data!A1:E21", "FilteredPivot!A2");
            pivotTable2.rowHierarchies.add(pivotTable2.hierarchies.getItem("Farm"));
            pivotTable2.rowHierarchies.add(pivotTable2.hierarchies.getItem("Type"));
            pivotTable2.dataHierarchies.add(pivotTable2.hierarchies.getItem("Crates Sold Wholesale"));
            pivotTable2.filterHierarchies.add(pivotTable2.hierarchies.getItem("Classification"));

            // Switch to one of the worksheets with a PivotTable.
            totalPivot.activate();

            await context.sync();
          });
        }

        /** Default helper for invoking an action and handling errors. */
        async function tryCatch(callback) {
          try {
            await callback();
          } catch (error) {
            // Note: In a production add-in, you'd want to notify the user through your add-in's UI.
            console.error(error);
          }
        }
    language: typescript
template:
    content: |-
        <section class="ms-font-m">
          <p>This sample shows how to get PivotTables in the workbook. You can get them through PivotTableCollection objects
            or by querying a Range object containing PivotTable data.</p>
        </section>

        <section class="setup ms-font-m">
          <h3>Set up</h3>
          <p> This creates a data sheet and two PivotTables in two different worksheets.
            <button id="setup" class="ms-Button">
                <span class="ms-Button-label">Set up sample</span>
            </button>
        </section>

        <section class="setup ms-font-m">
          <h3>Try it out</h3>
        </section>

        <section class="setup ms-font-m">
          <button id="get-pivottables-in-workbook" class="ms-Button">
            <span class="ms-Button-label">Get PivotTables in the workbook</span>
          </button>
          <p />
          <button id="get-pivottables-in-worksheet" class="ms-Button">
            <span class="ms-Button-label">Get PivotTables in the worksheet</span>
          </button>
          <p />
          <button id="get-pivottables-in-selected-range" class="ms-Button">
              <span class="ms-Button-label">Get PivotTables in the selected range</span>
          </button>
          <p><i>Note that this button only works with a single selected range. 
          Multi-range selections aren't supported by `getPivotTables` at this time.</i></p>
        </section>
    language: html
style:
    content: |-
        section.samples {
            margin-top: 20px;
        }

        section.samples .ms-Button, section.setup .ms-Button {
            display: block;
            margin-bottom: 5px;
            margin-left: 20px;
            min-width: 80px;
        }
    language: css
libraries: |
    https://appsforoffice.microsoft.com/lib/beta/hosted/office.js
    @types/office-js-preview

    office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
    office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css

    core-js@2.4.1/client/core.min.js
    @types/core-js

    jquery@3.1.1
    @types/jquery@3.3.1
