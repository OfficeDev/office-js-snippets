order: 2
id: word-tables-manage-formatting
name: Table formatting
description: 'Gets the formatting details of a table, a table row, and a table cell, including borders, alignment, and cell padding.'
author: OfficeDev
host: WORD
api_set:
    WordApi: '1.3'
script:
    content: |
        $("#get-table-alignment").on("click", () => tryCatch(getTableAlignment));
        $("#get-table-border").on("click", () => tryCatch(getTableBorder));
        $("#get-table-cell-padding").on("click", () => tryCatch(getTableCellPadding));
        $("#get-table-row-alignment").on("click", () => tryCatch(getTableRowAlignment));
        $("#get-table-row-border").on("click", () => tryCatch(getTableRowBorder));
        $("#get-table-row-cell-padding").on("click", () => tryCatch(getTableRowCellPadding));
        $("#get-table-cell-alignment").on("click", () => tryCatch(getTableCellAlignment));
        $("#get-table-cell-border").on("click", () => tryCatch(getTableCellBorder));
        $("#get-table-cell-cell-padding").on("click", () => tryCatch(getTableCellCellPadding));
        $("#setup").on("click", () => tryCatch(insertTable));

        async function getTableAlignment() {
          // Gets alignment details about the first table in the document.
          await Word.run(async (context) => {
            const firstTable: Word.Table = context.document.body.tables.getFirst();
            firstTable.load(["alignment", "horizontalAlignment", "verticalAlignment"]);
            await context.sync();

            console.log(`Details about the alignment of the first table:`, `- Alignment of the table within the containing page column: ${firstTable.alignment}`, `- Horizontal alignment of every cell in the table: ${firstTable.horizontalAlignment}`, `- Vertical alignment of every cell in the table: ${firstTable.verticalAlignment}`);
          });
        }

        async function getTableBorder() {
          // Gets border details about the first table in the document.
          await Word.run(async (context) => {
            const firstTable: Word.Table = context.document.body.tables.getFirst();
            const borderLocation = Word.BorderLocation.top;
            const border: Word.TableBorder = firstTable.getBorder(borderLocation);
            border.load(["type", "color", "width"]);
            await context.sync();

            console.log(`Details about the ${borderLocation} border of the first table:`, `- Color: ${border.color}`, `- Type: ${border.type}`, `- Width: ${border.width} points`);
          });
        }

        async function getTableCellPadding() {
          // Gets cell padding details about the first table in the document.
          await Word.run(async (context) => {
            const firstTable: Word.Table = context.document.body.tables.getFirst();
            const cellPaddingLocation = Word.CellPaddingLocation.right;
            const cellPadding = firstTable.getCellPadding(cellPaddingLocation);
            await context.sync();

            console.log(
              `Cell padding details about the ${cellPaddingLocation} border of the first table: ${cellPadding.value} points`
            );
          });
        }

        async function getTableRowAlignment() {
          // Gets content alignment details about the first row of the first table in the document.
          await Word.run(async (context) => {
            const firstTable: Word.Table = context.document.body.tables.getFirst();
            const firstTableRow: Word.TableRow = firstTable.rows.getFirst();
            firstTableRow.load(["horizontalAlignment", "verticalAlignment"]);
            await context.sync();

            console.log(`Details about the alignment of the first table's first row:`, `- Horizontal alignment of every cell in the row: ${firstTableRow.horizontalAlignment}`, `- Vertical alignment of every cell in the row: ${firstTableRow.verticalAlignment}`);
          });
        }

        async function getTableRowBorder() {
          // Gets border details about the first row of the first table in the document.
          await Word.run(async (context) => {
            const firstTable: Word.Table = context.document.body.tables.getFirst();
            const firstTableRow: Word.TableRow = firstTable.rows.getFirst();
            const borderLocation = Word.BorderLocation.bottom;
            const border: Word.TableBorder = firstTableRow.getBorder(borderLocation);
            border.load(["type", "color", "width"]);
            await context.sync();

            console.log(`Details about the ${borderLocation} border of the first table's first row:`, `- Color: ${border.color}`, `- Type: ${border.type}`, `- Width: ${border.width} points`);
          });
        }

        async function getTableRowCellPadding() {
          // Gets cell padding details about the first row of the first table in the document.
          await Word.run(async (context) => {
            const firstTable: Word.Table = context.document.body.tables.getFirst();
            const firstTableRow: Word.TableRow = firstTable.rows.getFirst();
            const cellPaddingLocation = Word.CellPaddingLocation.bottom;
            const cellPadding = firstTableRow.getCellPadding(cellPaddingLocation);
            await context.sync();

            console.log(
              `Cell padding details about the ${cellPaddingLocation} border of the first table's first row: ${cellPadding.value} points`
            );
          });
        }

        async function getTableCellAlignment() {
          // Gets content alignment details about the first cell of the first table in the document.
          await Word.run(async (context) => {
            const firstTable: Word.Table = context.document.body.tables.getFirst();
            const firstCell: Word.TableCell = firstTable.getCell(0, 0);
            firstCell.load(["horizontalAlignment", "verticalAlignment"]);
            await context.sync();

            console.log(`Details about the alignment of the first table's first cell:`, `- Horizontal alignment of the cell's content: ${firstCell.horizontalAlignment}`, `- Vertical alignment of the cell's content: ${firstCell.verticalAlignment}`);
          });
        }

        async function getTableCellBorder() {
          // Gets border details about the first of the first table in the document.
          await Word.run(async (context) => {
            const firstTable: Word.Table = context.document.body.tables.getFirst();
            const firstCell: Word.TableCell = firstTable.getCell(0, 0);
            const borderLocation = "Left";
            const border: Word.TableBorder = firstCell.getBorder(borderLocation);
            border.load(["type", "color", "width"]);
            await context.sync();

            console.log(`Details about the ${borderLocation} border of the first table's first cell:`, `- Color: ${border.color}`, `- Type: ${border.type}`, `- Width: ${border.width} points`);
          });
        }

        async function getTableCellCellPadding() {
          // Gets cell padding details about the first cell of the first table in the document.
          await Word.run(async (context) => {
            const firstTable: Word.Table = context.document.body.tables.getFirst();
            const firstCell: Word.TableCell = firstTable.getCell(0, 0);
            const cellPaddingLocation = "Left";
            const cellPadding = firstCell.getCellPadding(cellPaddingLocation);
            await context.sync();

            console.log(
              `Cell padding details about the ${cellPaddingLocation} border of the first table's first cell: ${cellPadding.value} points`
            );
          });
        }

        async function insertTable() {
          await Word.run(async (context) => {
            // Use a two-dimensional array to hold the initial table values.
            const data = [
              ["Tokyo", "Beijing", "Seattle"],
              ["Apple", "Orange", "Pineapple"]
            ];
            const table = context.document.body.insertTable(2, 3, "Start", data);
            table.styleBuiltIn = Word.BuiltInStyleName.gridTable5Dark_Accent2;
            table.styleFirstColumn = false;

            await context.sync();
          });
        }

        // Default helper for invoking an action and handling errors.
        async function tryCatch(callback) {
          try {
            await callback();
          } catch (error) {
            // Note: In a production add-in, you'd want to notify the user through your add-in's UI.
            console.error(error);
          }
        }
    language: typescript
template:
    content: |-
        <section class="ms-font-m">
            This sample shows how to get various formatting details about a table, a table row, and a table cell, including
            borders, alignment, and cell padding.
        </section>

        <section class="setup ms-font-m">
            <h3>Set up</h3>
            <button id="setup" class="ms-Button">
              <span class="ms-Button-label">Add table</span>
          </button>
        </section>
        <section class="samples ms-font-m">
            <h3>Try it out</h3>
            <h4>Table formatting</h4>
            <p>
                <button id="get-table-alignment" class="ms-Button">
              <span class="ms-Button-label">Get table alignment </span>
            </button>
                <button id="get-table-border" class="ms-Button">
              <span class="ms-Button-label">Get table border </span>
            </button>
                <button id="get-table-cell-padding" class="ms-Button">
              <span class="ms-Button-label">Get table cell padding </span>
            </button>
            </p>
            <h4>Table row formatting</h4>
            <p>
                <button id="get-table-row-alignment" class="ms-Button">
              <span class="ms-Button-label">Get row alignment</span>
            </button>
                <button id="get-table-row-border" class="ms-Button">
              <span class="ms-Button-label">Get row border</span>
            </button>
                <button id="get-table-row-cell-padding" class="ms-Button">
              <span class="ms-Button-label">Get row cell padding</span>
            </button>
            </p>
            <h4>Table cell formatting</h4>
            <p>
                <button id="get-table-cell-alignment" class="ms-Button">
              <span class="ms-Button-label">Get cell alignment</span>
            </button>
                <button id="get-table-cell-border" class="ms-Button">
              <span class="ms-Button-label">Get cell border</span>
            </button>
                <button id="get-table-cell-cell-padding" class="ms-Button">
              <span class="ms-Button-label">Get cell padding</span>
            </button>
            </p>
        </section>
    language: html
style:
    content: |-
        section.samples {
            margin-top: 20px;
        }

        section.samples .ms-Button, section.setup .ms-Button {
            display: block;
            margin-bottom: 5px;
            margin-left: 20px;
            min-width: 80px;
        }
    language: css
libraries: |-
    https://appsforoffice.microsoft.com/lib/1/hosted/office.js
    @types/office-js

    office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
    office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css

    core-js@2.4.1/client/core.min.js
    @types/core-js

    jquery@3.1.1
    @types/jquery@3.3.1