name: Outline
description: Creates an outline by grouping rows and columns.
host: EXCEL
api_set: {}
script:
  content: |
    $("#setup-data").click(() => tryCatch(setupData));
    $("#setup-totals").click(() => tryCatch(setupTotals));
    $("#group-rows").click(() => tryCatch(groupRows));
    $("#group-columns").click(() => tryCatch(groupColumns));

    async function groupRows() {
        Excel.run(async (context) => {
            const sheet = context.workbook.worksheets.getActiveWorksheet();
            await context.sync();
        });
    }

    async function groupColumns() {
        Excel.run(async (context) => {
            const sheet = context.workbook.worksheets.getActiveWorksheet();
            await context.sync();
        });
    }

    async function setupData() {
        await Excel.run(async (context) => {
            context.workbook.worksheets.getItemOrNullObject("Sample").delete();
            const sheet = context.workbook.worksheets.add("Sample");

            const data = [
                ["Category", "Type", "Q1", "Q2", "Q3", "Q4", "Q1", "Q2", "Q3", "Q4", "Q1", "Q2", "Q3", "Q4"],
                ["Stone Fruit", "Peaches", 500, 2000, 5000, 1500, 600, 2200, 5400, 1300, 300, 1500, 4300, 1200],
                [, "Plums", 700, 900, 1300, 800, 800, 1000, 2000, 700, 300, 600, 1100, 700],
                ["Citrus", "Lemons", 8000, 3000, 4500, 7500, 8900, 4000, 3500, 4500, 6000, 2500, 4500, 9500],
                [, "Limes", 12000, 7000, 8000, 13000, 16000, 10000, 8500, 12000, 11000, 5600, 6500, 11000]
            ];

            sheet.getRange("A3:N7").values = data;
            sheet.getRange("A1").values = [["Fruit Sales"]];
            sheet.getRange("A1").style = "Heading1";
            sheet.getRanges("C2:N3,A3:B7").format.font.bold = true;

            sheet.getRange("A1:N7").format.autofitColumns();
            sheet.activate();

            await context.sync();
        });
    }

    async function setupTotals() {
        await Excel.run(async (context) => {
            const sheet = context.workbook.worksheets.getActiveWorksheet();
            const subtotalColumns = ["G", "L", "Q"]
            const subtotalRows = ["6", "9"]
            for (let column of subtotalColumns) {
                sheet.getRange(`${column}:${column}`).insert(Excel.InsertShiftDirection.right);
                sheet.getRange(`${column}3`).values = [["Total"]];
            }

            for (let row of subtotalRows) {
                sheet.getRange(`${row}:${row}`).insert(Excel.InsertShiftDirection.down);
                sheet.getRange(`B${row}`).values = [["Total"]];
            }

            for (let column of subtotalColumns) {
                const totalRange = sheet.getRange(`${column}4`);
                const precedingRange = totalRange.getColumnsBefore(4);
                precedingRange.load("address");
                await context.sync();
                totalRange.formulas = [[`=SUM(${precedingRange.address})`]];
                totalRange.autoFill(`${column}4:${column}9`);
            }

            for (let row of subtotalRows) {
                const totalRange = sheet.getRange(`C${row}`);
                const precedingRange = totalRange.getRowsAbove(2);
                precedingRange.load("address");
                await context.sync();
                totalRange.formulas = [[`=SUM(${precedingRange.address})`]];
                totalRange.autoFill(`C${row}:Q${row}`);
            }

            sheet.getRange("R3").values = [["Grand Total"]];
            sheet.getRange("R4").formulas = [["=SUM(G4,K4,Q4)"]];
            sheet.getRange("R4").autoFill("R4:R9");

            sheet.getRange("A1:R9").format.autofitColumns();
            await context.sync();
        });
    }

    /** Default helper for invoking an action and handling errors. */
    async function tryCatch(callback, option?) {
        try {
            await callback(option);
        } catch (error) {
            // Note: In a production add-in, you'd want to notify the user through your add-in's UI.
            console.error(error);
        }
    }
  language: typescript
template:
  content: "<section class=\"ms-font-m\">\n\t<p>This sample shows how to group and ungroup rows and columns for an outline.</p>\n</section>\n\n<section class=\"setup ms-font-m\">\n\t<h3>Set up</h3>\n\t<button id=\"setup-data\" class=\"ms-Button\">\n    <span class=\"ms-Button-label\">Add sample data</span>\n  </button>\n  <p/>\n  <button id=\"setup-totals\" class=\"ms-Button\">\n    <span class=\"ms-Button-label\">Add subtotal and total cells</span>\n  </button>\n</section>\n\n<section class=\"samples ms-font-m\">\n\t<h3>Try it out</h3>\n\t<button id=\"group-rows\" class=\"ms-Button\">\n      <span class=\"ms-Button-label\">Group rows</span>\n    </button>\n\t<p />\n\t<button id=\"group-columns\" class=\"ms-Button\">\n\t\t<span class=\"ms-Button-label\">Group columns</span>\n\t</button>\n</section>"
  language: html
style:
  content: |-
    section.samples {
        margin-top: 20px;
    }

    section.samples .ms-Button, section.setup .ms-Button {
        display: block;
        margin-bottom: 5px;
        margin-left: 20px;
        min-width: 80px;
    }
  language: css
libraries: |
  https://appsforoffice.microsoft.com/lib/beta/hosted/office.js
  @types/office-js-preview

  office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
  office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css

  core-js@2.4.1/client/core.min.js
  @types/core-js

  jquery@3.1.1
  @types/jquery@3.3.1
