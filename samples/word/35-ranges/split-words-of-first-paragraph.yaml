order: 2
id: word-ranges-split-words-of-first-paragraph
name: Split a paragraph into ranges
description: 'Splits a paragraph into word ranges and then traverses all the ranges to format each word, producing a "karaoke" effect.'
author: OfficeDev
host: WORD
api_set:
    WordApi: '1.3'
script:
    content: |
        $("#setup").on("click", () => tryCatch(setup));
        $("#highlight").on("click", () => tryCatch(highlightWords));

        async function highlightWords() {
          await Word.run(async (context) => {
            const paragraph: Word.Paragraph = context.document.body.paragraphs.getFirst();
            const words = paragraph.split([" "], true /* trimDelimiters*/, true /* trimSpaces */);
            words.load("text");

            await context.sync();

            for (let i = 0; i < words.items.length; i++) {
              if (i >= 1) {
                words.items[i - 1].font.highlightColor = "#FFFFFF";
              }
              words.items[i].font.highlightColor = "#FFFF00";

              await context.sync();
              await pause(200);
            }
          });
        }

        function pause(milliseconds) {
          return new Promise((resolve) => setTimeout(resolve, milliseconds));
        }

        async function setup() {
          await Word.run(async (context) => {
            const body: Word.Body = context.document.body;
            body.clear();
            body.insertParagraph(
              "Do you want to create a solution that extends the functionality of Word? You can use the Office Add-ins platform to extend Word clients running on the web, on a Windows desktop, or on a Mac.",
              "Start"
            );
            body.paragraphs
              .getLast()
              .insertText(
                "Use add-in commands to extend the Word UI and launch task panes that run JavaScript that interacts with the content in a Word document. Any code that you can run in a browser can run in a Word add-in. Add-ins that interact with content in a Word document create requests to act on Word objects and synchronize object state.",
                "Replace"
              );
          });
        }

        async function tryCatch(callback) {
          try {
            await callback();
          } catch (error) {
            // Note: In a production add-in, you'd want to notify the user through your add-in's UI.
            console.error(error);
          }
        }
    language: typescript
template:
    content: |
        <section class="ms-Fabric ms-font-m">
           This sample demonstrates splitting and traversing ranges.
        </section>

        <section class="ms-Fabric setup ms-font-m">
            <h3>Set up</h3>
            <button id="setup" class="ms-Button">
                <span class="ms-Button-label">Add sample text</span>
            </button>
        </section>

        <section class="ms-Fabric samples ms-font-m">
            <h3>Try it out</h3>
            <button id="highlight" class="ms-Button">
                <span class="ms-Button-label">Highlight word by word</span>
            </button>
        </section>
    language: html
style:
    content: |-
        section.samples {
            margin-top: 20px;
        }

        section.samples .ms-Button, section.setup .ms-Button {
            display: block;
            margin-bottom: 5px;
            margin-left: 20px;
            min-width: 80px;
        }
    language: css
libraries: |
    https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js
    @types/office-js

    office-ui-fabric-core@11.1.0/dist/css/fabric.min.css
    office-ui-fabric-js@1.5.0/dist/css/fabric.components.min.css

    core-js@2.4.1/client/core.min.js
    @types/core-js

    jquery@3.1.1
    @types/jquery@3.3.1