order: 7
id: excel-shape-get-active
name: Get active shape
description: Get the active shape in your workbook.
host: EXCEL
api_set:
    ExcelApi: '1.19'
script:
  content: |
    $("#setup").on("click", () => tryCatch(setup));
    $("#addShapeAsTitle").on("click", () => tryCatch(addShapeAsTitle));
    $("#group").on("click", () => tryCatch(groupChartShape));
    $("#getActiveShape").on("click", () => tryCatch(getActiveShape));

    async function setup() {
      await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        const count = sheet.shapes.getCount();
        await context.sync();
        if (count.value > 0) {
          const shape = sheet.shapes.getItemAt(0);
          shape.delete();
        }
        let range = sheet.getRange("A1:C4");
        range.values = [
          ["Type", "Product A", "Product B"],
          ["Q1", 15, 20],
          ["Q2", 22, 15],
          ["Q3", 33, 47]
        ];
        let chart = sheet.charts.add(Excel.ChartType.lineMarkers, range);
        chart.name = "SalesChart";
        // chart.title.text = "Sales Quantity";
        await context.sync();
      });
    }

    async function addShapeAsTitle() {
      await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        let shape = sheet.shapes.addGeometricShape(Excel.GeometricShapeType.rectangle);
        shape.name = "ChartTitle";
        shape.height = 20;
        shape.width = 90;
        shape.textFrame.textRange.text = "Sales Quantity";
        shape.textFrame.textRange.font.size = 13;

        let chart = sheet.charts.getItemAt(0);
        chart.load("left, top");
        chart.plotArea.load("width");
        await context.sync();

        shape.left = chart.left + chart.plotArea.width / 2 - 30;
        shape.top = chart.top + 10;

        await context.sync();
      });
    }

    async function groupChartShape() {
      await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        let shape = sheet.shapes.getItem("ChartTitle");
        let chartShape = sheet.shapes.getItem("SalesChart");
        let group = sheet.shapes.addGroup([shape, chartShape]);
        group.name = "GroupChart";
        await context.sync();
      });
    }

    async function getActiveShape() {
      await Excel.run(async (context) => {
        let group = context.workbook.getActiveShapeOrNullObject();
        if (group == null) {
          console.log("No active shape");
        } else {
          let image = group.getAsImage(Excel.PictureFormat.png);
          await context.sync();
          let div = document.getElementById("image");
          let img = document.createElement("img");
          img.src = "data: image / jpeg; base64," + image.value;
          div.appendChild(img);
        }
      });
    }

    /** Default helper for invoking an action and handling errors. */
    async function tryCatch(callback) {
      try {
        await callback();
      } catch (error) {
        // Note: In a production add-in, you'd want to notify the user through your add-in's UI.
        console.error(error);
      }
    }
  language: typescript
template:
  content: "<section class=\"ms-font-m\">\n\t<p>This sample shows how to use API to get active shape.</p>\n</section>\n<section class=\"setup ms-font-m\">\n\t<h3>Setup</h3>\n\t<button id=\"setup\" class=\"ms-Button\">\n        <span class=\"ms-Button-label\">Create a chart</span>\n\t</button>\n</section>\n<section class=\"samples ms-font-m\">\n\t<h3>Try it out</h3>\n\t<button id=\"addShapeAsTitle\" class=\"ms-Button\">\n\t\t\t\t<span class=\"ms-Button-label\">Add rectangle as chart title</span>\n\t\t</button>\n\t<button id=\"group\" class=\"ms-Button\">\n\t\t\t<span class=\"ms-Button-label\">Group the rectangle with chart</span>\n\t</button>\n\t<p class=\"tips\">Note: Make sure the group shape is selected.</p>\n\t<button id=\"getActiveShape\" class=\"ms-Button\">\n\t\t\t<span class=\"ms-Button-label\">Get active shape</span>\n\t</button>\n</section>\n<p class=\"tips ms-font-m\">Here shows the image from avtive shape:</p>\n<div id=\"image\"></div>"
  language: html
style:
  content: |-
    section.samples {
        margin-top: 20px;
    }

    section.samples .ms-Button, section.setup .ms-Button {
        display: block;
        margin-bottom: 5px;
        margin-left: 20px;
        min-width: 80px;
    }

    p.tips {
        margin-left: 20px;
        font-size: 13px;
    }
  language: css
libraries: |
  https://appsforoffice.microsoft.com/lib/beta/hosted/office.js
  https://appsforoffice.microsoft.com/lib/beta/hosted/office-experiment52.d.ts

  office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
  office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css

  core-js@2.4.1/client/core.min.js
  @types/core-js

  jquery@3.1.1
  @types/jquery@3.3.1
