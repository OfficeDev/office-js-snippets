'Excel.Application#decimalSeparator:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/50-workbook/culture-info.yaml

    await Excel.run(async (context) => {
      context.application.load("decimalSeparator,thousandsSeparator");
      context.application.cultureInfo.numberFormat.load("numberDecimalSeparator,numberGroupSeparator");
      await context.sync();

      // Local settings are set under the "Options > Advanced" menu.
      const localDecimalSeparator = context.application.decimalSeparator;
      const localThousandsSeparator = context.application.thousandsSeparator;

      const systemDecimalSeparator = context.application.cultureInfo.numberFormat.numberDecimalSeparator;
      const systemThousandsSeparator = context.application.cultureInfo.numberFormat.numberGroupSeparator;

      console.log("Local character settings: ");
      console.log(`  Local decimal separator: ${localDecimalSeparator}`);
      console.log(`  Local thousands separator: ${localThousandsSeparator}`);

      console.log("System culture settings: ");
      console.log(`  System decimal separator: ${systemDecimalSeparator}`);
      console.log(`  System thousands separator: ${systemThousandsSeparator}`);
      console.log(`  `);

      await context.sync();
    });
'Excel.Application#suspendScreenUpdatingUntilNextSync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/90-scenarios/performance-optimization.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        const rowCount = 500;
        const columnCount = 20;

        const startTime = Date.now();
        console.log("Starting...");

        if (pauseScreenPainting) {
            // Note: Don't call `suspendScreenUpdatingUntilNextSync` repeatedly (such as in a loop).
            // Repeated calls will cause the Excel window to flicker. 
            context.application.suspendScreenUpdatingUntilNextSync();
        }

        for (let i = 0; i < rowCount; i++) {
            for (let j = 0; j < columnCount; j++) {
                let cell = sheet.getCell(i, j);
                cell.values = [[i * j * Math.random()]];
                if (untrack) {
                    cell.untrack();
                }
            }
        }

        await context.sync();

        console.log(`Ending. Adding ${rowCount * columnCount} cells took ${Date.now() - startTime} milliseconds`);
    });
'Excel.AutoFilter#apply:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/worksheet-auto-filter.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        const farmData = sheet.getUsedRange();

        // This filter will only show the rows with the top 25% of values in column 3.
        sheet.autoFilter.apply(farmData, 3, { criterion1: "25", filterOn: Excel.FilterOn.topPercent });
        await context.sync();
    });
'Excel.Binding#onDataChanged:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/data-changed.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");    
        const salesTable = sheet.tables.getItem("SalesTable");
        const salesByQuarterBinding = context.workbook.bindings.add(salesTable.getRange(), "Table", "SalesByQuarter");
        salesByQuarterBinding.onDataChanged.add(onSalesDataChanged);

        console.log("The data changed handler is registered.");

        await context.sync();
    });
'Excel.CellPropertiesFill#color:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/cell-properties.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // Creating the SettableCellProperties objects to use for the range.
        // In your add-in, these should be created once, outside the function.
        const topHeaderProps: Excel.SettableCellProperties = {
            // The style property takes a string matching the name of an Excel style.
            // Built-in style names are listed in the `BuiltInStyle` enum.
            // Note that a style will overwrite any formatting,
            // so do not use the format property with the style property.
            style: "Heading1"
        };

        const headerProps: Excel.SettableCellProperties = {
            // Any subproperties of format that are not set will not be changed when these cell properties are set.
            format: {
                fill: {
                    color: "Blue"
                },
                font: {
                    color: "White",
                    bold: true
                }
            }
        };

        const nonApplicableProps: Excel.SettableCellProperties = {
            format: {
                fill: {
                    pattern: Excel.FillPattern.gray25
                },
                font: {
                    color: "Gray",
                    italic: true
                }
            }
        };

        const matchupScoreProps: Excel.SettableCellProperties = {
            format: {
                borders: {
                    bottom: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    left: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    right: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    top: {
                        style: Excel.BorderLineStyle.continuous
                    }
                }
            }
        };

        const range = sheet.getRange("A1:E5");

        // You can use empty JSON objects to avoid changing a cell's properties.
        range.setCellProperties([
            [topHeaderProps, {}, {}, {}, {}],
            [{}, {}, headerProps, headerProps, headerProps],
            [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]
        ]);

        sheet.getUsedRange().format.autofitColumns();
        await context.sync();
    });
'Excel.CellPropertiesFillLoadOptions#color:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/cell-properties.yaml

    await Excel.run(async (context) => {
        const cell = context.workbook.getActiveCell();

        // Define the cell properties to get by setting the matching LoadOptions to true.
        const propertiesToGet = cell.getCellProperties({
            address: true,
            format: {
                fill: {
                    color: true
                },
                font: {
                    color: true
                }
            },
            style: true
        });

        // Sync to get the data from the workbook.
        await context.sync();
        const cellProperties = propertiesToGet.value[0][0];
        console.log(
            `Address: ${cellProperties.address}\nStyle: ${cellProperties.style}\nFill Color: ${cellProperties.format.fill.color}\nFont Color: ${cellProperties.format.font.color}`);
    });
'Excel.CellPropertiesFont#color:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/cell-properties.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // Creating the SettableCellProperties objects to use for the range.
        // In your add-in, these should be created once, outside the function.
        const topHeaderProps: Excel.SettableCellProperties = {
            // The style property takes a string matching the name of an Excel style.
            // Built-in style names are listed in the `BuiltInStyle` enum.
            // Note that a style will overwrite any formatting,
            // so do not use the format property with the style property.
            style: "Heading1"
        };

        const headerProps: Excel.SettableCellProperties = {
            // Any subproperties of format that are not set will not be changed when these cell properties are set.
            format: {
                fill: {
                    color: "Blue"
                },
                font: {
                    color: "White",
                    bold: true
                }
            }
        };

        const nonApplicableProps: Excel.SettableCellProperties = {
            format: {
                fill: {
                    pattern: Excel.FillPattern.gray25
                },
                font: {
                    color: "Gray",
                    italic: true
                }
            }
        };

        const matchupScoreProps: Excel.SettableCellProperties = {
            format: {
                borders: {
                    bottom: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    left: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    right: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    top: {
                        style: Excel.BorderLineStyle.continuous
                    }
                }
            }
        };

        const range = sheet.getRange("A1:E5");

        // You can use empty JSON objects to avoid changing a cell's properties.
        range.setCellProperties([
            [topHeaderProps, {}, {}, {}, {}],
            [{}, {}, headerProps, headerProps, headerProps],
            [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]
        ]);

        sheet.getUsedRange().format.autofitColumns();
        await context.sync();
    });
'Excel.CellPropertiesFontLoadOptions#color:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/cell-properties.yaml

    await Excel.run(async (context) => {
        const cell = context.workbook.getActiveCell();

        // Define the cell properties to get by setting the matching LoadOptions to true.
        const propertiesToGet = cell.getCellProperties({
            address: true,
            format: {
                fill: {
                    color: true
                },
                font: {
                    color: true
                }
            },
            style: true
        });

        // Sync to get the data from the workbook.
        await context.sync();
        const cellProperties = propertiesToGet.value[0][0];
        console.log(
            `Address: ${cellProperties.address}\nStyle: ${cellProperties.style}\nFill Color: ${cellProperties.format.fill.color}\nFont Color: ${cellProperties.format.font.color}`);
    });
'Excel.CellPropertiesLoadOptions#address:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/cell-properties.yaml

    await Excel.run(async (context) => {
        const cell = context.workbook.getActiveCell();

        // Define the cell properties to get by setting the matching LoadOptions to true.
        const propertiesToGet = cell.getCellProperties({
            address: true,
            format: {
                fill: {
                    color: true
                },
                font: {
                    color: true
                }
            },
            style: true
        });

        // Sync to get the data from the workbook.
        await context.sync();
        const cellProperties = propertiesToGet.value[0][0];
        console.log(
            `Address: ${cellProperties.address}\nStyle: ${cellProperties.style}\nFill Color: ${cellProperties.format.fill.color}\nFont Color: ${cellProperties.format.font.color}`);
    });
'Excel.CellValueConditionalFormat#format:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B21:E23");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.cellValue);
        conditionalFormat.cellValue.format.font.color = "red";
        conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

        await context.sync();
    });
'Excel.CellValueConditionalFormat#rule:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B21:E23");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.cellValue);
        conditionalFormat.cellValue.format.font.color = "red";
        conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

        await context.sync();
    });
'Excel.ChartAxis#displayUnit:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/10-chart/chart-axis.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        let chart = sheet.charts.getItemAt(0);
        let categoryAxis = chart.axes.categoryAxis;
        let valueAxis = chart.axes.valueAxis;

        // Load to get display unit.
        valueAxis.load("displayUnit");

        await context.sync();

        console.log("The vertical axis display unit is: " + valueAxis.displayUnit);
    });
'Excel.ChartAxis#showDisplayUnitLabel:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/10-chart/chart-axis.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        let chart = sheet.charts.getItemAt(0);
        let axis = chart.axes.valueAxis;

        // Remove display unit.
        axis.showDisplayUnitLabel = false;

        await context.sync();
    });
'Excel.ChartFill#setSolidColor:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/10-chart/chart-point.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        let pointsCollection = sheet.charts.getItemAt(0).series.getItemAt(0).points;
        let point = pointsCollection.getItemAt(2);

        // Set color for chart point.
        point.format.fill.setSolidColor('red');

        await context.sync();        
    });
'Excel.ChartLegendFormat#font:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/10-chart/chart-legend.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        let chart = sheet.charts.getItemAt(0);
        chart.legend.visible = true;

        // Format the legend font.
        let font = chart.legend.format.font;
        font.bold = true;
        font.color = "red";
        font.italic = true;
        font.size = 15;
        font.name = "Calibri";
        font.underline = "Single";

        await context.sync();
    });
'Excel.ChartSeries#setBubbleSizes:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/10-chart/chart-bubble-chart.yaml

    await Excel.run(async (context) => {
      /*
        The table is expected to look like this:
        Product, Inventory, Price, Current Market Share
        Calamansi, 2000, $2.45, 10%
        ...

        We want each bubble to represent a single row.
      */

      // Get the worksheet and table data.
      const sheet = context.workbook.worksheets.getItem("Sample");
      const table = sheet.tables.getItem("Sales");
      const dataRange = table.getDataBodyRange();

      // Get the table data without the row names.
      const valueRange = dataRange.getOffsetRange(0, 1).getResizedRange(0, -1);

      // Create the chart.
      const bubbleChart = sheet.charts.add(Excel.ChartType.bubble, valueRange);
      bubbleChart.name = "Product Chart";

      // Remove the default series, since we want a unique series for each row.
      bubbleChart.series.getItemAt(0).delete();

      // Load the data necessary to make a chart series.
      dataRange.load(["rowCount", "values"]);
      await context.sync();

      // For each row, create a chart series (a bubble).
      for (let i = 0; i < dataRange.rowCount; i++) {
        const newSeries = bubbleChart.series.add(dataRange.values[i][0], i);
        newSeries.setXAxisValues(dataRange.getCell(i, 1));
        newSeries.setValues(dataRange.getCell(i, 2));
        newSeries.setBubbleSizes(dataRange.getCell(i, 3));

        // Show the product name and market share percentage.
        newSeries.dataLabels.showSeriesName = true;
        newSeries.dataLabels.showBubbleSize = true;
        newSeries.dataLabels.showValue = false;
      }

      await context.sync();
    });
'Excel.ChartSeries#getDimensionValues:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/10-chart/chart-bubble-chart.yaml

    await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getItem("Sample");

      // The sample chart is of type `Excel.ChartType.bubble`.
      const bubbleChart = sheet.charts.getItem("Product Chart");

      // Get the first series in the chart.
      const firstSeries = bubbleChart.series.getItemAt(0);

      // Get the values for the dimensions we're interested in.
      const bubbleSize = firstSeries.getDimensionValues(Excel.ChartSeriesDimension.bubbleSizes);
      const xValues = firstSeries.getDimensionValues(Excel.ChartSeriesDimension.xvalues);
      const yValues = firstSeries.getDimensionValues(Excel.ChartSeriesDimension.yvalues);
      const category = firstSeries.getDimensionValues(Excel.ChartSeriesDimension.categories);

      await context.sync();

      // Log the information.
      console.log(`Series ${category.value} - X:${xValues.value},Y:${yValues.value},Bubble:${bubbleSize.value}`);
    });
'Excel.ChartSeries#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/10-chart/chart-series.yaml

    await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getItem("Sample");
      const seriesCollection = sheet.charts.getItemAt(0).series;
      seriesCollection.load("count");
      await context.sync();

      if (seriesCollection.count > 0) {
        const series = seriesCollection.getItemAt(0);

        // Delete the first series.
        series.delete();
      }

      await context.sync();
    });
'Excel.ChartSeries#setValues:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/10-chart/chart-series.yaml

    await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getItem("Sample");

      let seriesCollection = sheet.charts.getItemAt(0);
      let rangeSelection = sheet.getRange("C2:C7");
      let xRangeSelection = sheet.getRange("A1:A7");

      // Add a series.
      let newSeries = seriesCollection.series.add("Qtr2");
      newSeries.setValues(rangeSelection);
      newSeries.setXAxisValues(xRangeSelection);

      await context.sync();
    });
'Excel.ChartSeries#markerBackgroundColor:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/10-chart/chart-series-markers.yaml

    await Excel.run(async (context) => {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let salesTable = sheet.tables.getItem("SalesTable");
        let dataRange = sheet.getRange("A1:E7");

        // Create an XY scatter chart.
        let chart = sheet.charts.add("XYScatterSmooth", dataRange, "Auto");
        chart.title.text = "Bicycle Parts Quarterly Sales"; 
      
        let series = chart.series;
        let series0 = series.getItemAt(0);
        let series1 = series.getItemAt(1);
        let series2 = series.getItemAt(2);
        let series3 = series.getItemAt(3);

        // Set markers.
        series0.markerStyle = "Dash";
        series0.markerForegroundColor = "black";
        series1.markerStyle = "Star";
        series1.markerForegroundColor = "black";
        series2.markerStyle = "X";
        series2.markerSize = 12;
        series3.markerStyle = "Triangle";
        series3.markerBackgroundColor = "purple";

        await context.sync();
    });
'Excel.ChartSeries#markerForegroundColor:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/10-chart/chart-series-markers.yaml

    await Excel.run(async (context) => {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let salesTable = sheet.tables.getItem("SalesTable");
        let dataRange = sheet.getRange("A1:E7");

        // Create an XY scatter chart.
        let chart = sheet.charts.add("XYScatterSmooth", dataRange, "Auto");
        chart.title.text = "Bicycle Parts Quarterly Sales"; 
      
        let series = chart.series;
        let series0 = series.getItemAt(0);
        let series1 = series.getItemAt(1);
        let series2 = series.getItemAt(2);
        let series3 = series.getItemAt(3);

        // Set markers.
        series0.markerStyle = "Dash";
        series0.markerForegroundColor = "black";
        series1.markerStyle = "Star";
        series1.markerForegroundColor = "black";
        series2.markerStyle = "X";
        series2.markerSize = 12;
        series3.markerStyle = "Triangle";
        series3.markerBackgroundColor = "purple";

        await context.sync();
    });
'Excel.ChartSeries#markerSize:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/10-chart/chart-series-markers.yaml

    await Excel.run(async (context) => {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let salesTable = sheet.tables.getItem("SalesTable");
        let dataRange = sheet.getRange("A1:E7");

        // Create an XY scatter chart.
        let chart = sheet.charts.add("XYScatterSmooth", dataRange, "Auto");
        chart.title.text = "Bicycle Parts Quarterly Sales"; 
      
        let series = chart.series;
        let series0 = series.getItemAt(0);
        let series1 = series.getItemAt(1);
        let series2 = series.getItemAt(2);
        let series3 = series.getItemAt(3);

        // Set markers.
        series0.markerStyle = "Dash";
        series0.markerForegroundColor = "black";
        series1.markerStyle = "Star";
        series1.markerForegroundColor = "black";
        series2.markerStyle = "X";
        series2.markerSize = 12;
        series3.markerStyle = "Triangle";
        series3.markerBackgroundColor = "purple";

        await context.sync();
    });
'Excel.ChartSeries#markerStyle:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/10-chart/chart-series-markers.yaml

    await Excel.run(async (context) => {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let salesTable = sheet.tables.getItem("SalesTable");
        let dataRange = sheet.getRange("A1:E7");

        // Create an XY scatter chart.
        let chart = sheet.charts.add("XYScatterSmooth", dataRange, "Auto");
        chart.title.text = "Bicycle Parts Quarterly Sales"; 
      
        let series = chart.series;
        let series0 = series.getItemAt(0);
        let series1 = series.getItemAt(1);
        let series2 = series.getItemAt(2);
        let series3 = series.getItemAt(3);

        // Set markers.
        series0.markerStyle = "Dash";
        series0.markerForegroundColor = "black";
        series1.markerStyle = "Star";
        series1.markerForegroundColor = "black";
        series2.markerStyle = "X";
        series2.markerSize = 12;
        series3.markerStyle = "Triangle";
        series3.markerBackgroundColor = "purple";

        await context.sync();
    });
'Excel.ChartTitle#getSubstring:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/10-chart/chart-title-format.yaml

    await Excel.run(async (context) => {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let chart = sheet.charts.getItemAt(0);

        // Get first seven characters of the title and color them green.
        chart.title.getSubstring(0, 7).font.color = "Yellow";
        await context.sync();
    });
'Excel.ChartTitle#textOrientation:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/10-chart/chart-title-format.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const title = sheet.charts.getItemAt(0).title;
        title.textOrientation = -45;

        await context.sync();
    });
'Excel.ChartTrendline#type:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/10-chart/chart-trendlines.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        let seriesCollection = sheet.charts.getItemAt(0).series;

        // Get the trendline for series 1 and load its type property.  
        let trendline = seriesCollection.getItemAt(0).trendlines.getItem(0);
        trendline.load("type");

        await context.sync();

        console.log("The trendline type is:" + trendline.type);  
    });
'Excel.ChartTrendlineCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/10-chart/chart-trendlines.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        let seriesCollection = sheet.charts.getItemAt(0).series;

         // Add a trendline.  
        seriesCollection.getItemAt(0).trendlines.add("Linear");

        await context.sync();
    });
'Excel.ChartTrendlineFormat#line:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/10-chart/chart-trendlines.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        let seriesCollection = sheet.charts.getItemAt(0).series; 

        // Get the color of the chart trendline. 
        let trendline = seriesCollection.getItemAt(0).trendlines.getItem(0);
        let line = trendline.format.line;
        line.load("color");

        await context.sync();

        console.log("The trendline color is:" + line.color);
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/10-chart/chart-trendlines.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        let seriesCollection = sheet.charts.getItemAt(0).series; 
        let trendline = seriesCollection.getItemAt(0).trendlines.getItem(0);

        // Set format of the trendline to a solid, red line.
        let line = trendline.format.line;
        line.color = '#FF0000';

        await context.sync();

        console.log("The trendline color has been set to:" + line.color);
    });
'Excel.ColorScaleConditionalFormat#criteria:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B2:M5");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.colorScale);
        const criteria = {
            minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
            midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
            maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
        };
        conditionalFormat.colorScale.criteria = criteria;

        await context.sync();
    });
'Excel.Comment#content:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/12-comment/comment-basics.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Comments");
        const comment = sheet.comments.getItemAt(0);
        comment.content = "PLEASE add headers here.";
        await context.sync();
    });
'Excel.Comment#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/12-comment/comment-basics.yaml

    await Excel.run(async (context) => {
        context.workbook.comments.getItemByCell("Comments!A2").delete();
        await context.sync();
    });
'Excel.Comment#load:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/12-comment/comment-basics.yaml

    await Excel.run(async (context) => {
        const comment = context.workbook.comments.getItemByCell("Comments!A2");
        comment.load(["authorEmail", "authorName", "creationDate"]);
        await context.sync();

        console.log(`${comment.creationDate.toDateString()}: ${comment.authorName} (${comment.authorEmail})`);
        await context.sync();
    });
'Excel.Comment#resolved:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/12-comment/comment-resolution.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Comments");
        sheet.comments.getItemAt(0).resolved = true;
        await context.sync();
    });
'Excel.CommentCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/12-comment/comment-basics.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Comments");

        // Note that an InvalidArgument error will be thrown if multiple cells passed to `comment.add`.
        sheet.comments.add("A2", "TODO: add data.");
        await context.sync();
    });
'Excel.CommentCollection#onAdded:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-comment-event-handler.yaml

    await Excel.run(async (context) => {
        const comments = context.workbook.worksheets.getActiveWorksheet().comments;

        // Register the onAdded, onChanged, and onDeleted comment event handlers.
        comments.onAdded.add(commentAdded);
        comments.onChanged.add(commentChanged);
        comments.onDeleted.add(commentDeleted);

        await context.sync();

        console.log("Added event handlers for when comments are added, changed, or deleted.");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-comment-event-handler.yaml

    async function commentAdded(event: Excel.CommentAddedEventArgs) {
        await Excel.run(async (context) => {
            // Retrieve the added comment using the comment ID.
            // Note: This method assumes only a single comment is added at a time. 
            const addedComment = context.workbook.comments.getItem(event.commentDetails[0].commentId);

            // Load the added comment's data.
            addedComment.load(["content", "authorName", "creationDate"]);

            await context.sync();

            // Print out the added comment's data.
            console.log(`A comment was added:`);
            console.log(`    ID: ${event.commentDetails[0].commentId}`);
            console.log(`    Comment content:${addedComment.content}`);
            console.log(`    Comment author:${addedComment.authorName}`);
            console.log(`    Creation date:${addedComment.creationDate}`);
        });
    }
'Excel.CommentCollection#onChanged:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-comment-event-handler.yaml

    await Excel.run(async (context) => {
        const comments = context.workbook.worksheets.getActiveWorksheet().comments;

        // Register the onAdded, onChanged, and onDeleted comment event handlers.
        comments.onAdded.add(commentAdded);
        comments.onChanged.add(commentChanged);
        comments.onDeleted.add(commentDeleted);

        await context.sync();

        console.log("Added event handlers for when comments are added, changed, or deleted.");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-comment-event-handler.yaml

    async function commentChanged(event: Excel.CommentChangedEventArgs) {
        await Excel.run(async (context) => {
            // Retrieve the changed comment using the comment ID.
            // Note: This method assumes only a single comment is changed at a time. 
            const changedComment = context.workbook.comments.getItem(event.commentDetails[0].commentId);

            // Load the changed comment's data.
            changedComment.load(["content", "authorName", "creationDate"]);

            await context.sync();

            // Print out the changed comment's data.
            console.log(`A comment was changed:`);
            console.log(`    ID: ${event.commentDetails[0].commentId}`);
            console.log(`    Updated comment content: ${changedComment.content}`);
            console.log(`    Comment author: ${changedComment.authorName}`);
            console.log(`    Creation date: ${changedComment.creationDate}`);
        });
    }
'Excel.CommentCollection#onDeleted:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-comment-event-handler.yaml

    await Excel.run(async (context) => {
        const comments = context.workbook.worksheets.getActiveWorksheet().comments;

        // Register the onAdded, onChanged, and onDeleted comment event handlers.
        comments.onAdded.add(commentAdded);
        comments.onChanged.add(commentChanged);
        comments.onDeleted.add(commentDeleted);

        await context.sync();

        console.log("Added event handlers for when comments are added, changed, or deleted.");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-comment-event-handler.yaml

    async function commentDeleted(event: Excel.CommentDeletedEventArgs) {
        await Excel.run(async (context) => {
            // Print out the deleted comment's ID.
            // Note: This method assumes only a single comment is deleted at a time. 
            console.log(`A comment was deleted:`);
            console.log(`    ID: ${event.commentDetails[0].commentId}`);
        });
    }
'Excel.CommentReply#content:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/12-comment/comment-replies.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Comments");
        const comment = sheet.comments.getItemAt(0);
        const reply = comment.replies.getItemAt(0);
        reply.load("content");
        // Sync to load the content of the comment reply.
        await context.sync();

        // Append "Please!" to the end of the comment reply.
        reply.content += " Please!";
        await context.sync();
    });
'Excel.CommentReply#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/12-comment/comment-replies.yaml

    await Excel.run(async (context) => {
        // Remove the first comment reply from this worksheet's first comment.
        const sheet = context.workbook.worksheets.getItem("Comments");
        const comment = sheet.comments.getItemAt(0);
        comment.replies.getItemAt(0).delete();
        await context.sync();
    });
'Excel.CommentReplyCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/12-comment/comment-replies.yaml

    await Excel.run(async (context) => {
        // Adds a reply to the first comment in this worksheet.
        const sheet = context.workbook.worksheets.getItem("Comments");
        const comment = sheet.comments.getItemAt(0);
        comment.replies.add("Add content to this worksheet.");
        await context.sync();
    });
'Excel.CommentRichContent#mentions:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/12-comment/comment-mentions.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Comments");
        const mention = {
            email: "kakri@contoso.com",
            id: 0,
            name: "Kate Kristensen"
        };

        // This will tag the mention's name using the '@' syntax.
        // They will be notified via email.
        const commentBody = {
            mentions: [mention],
            richContent: '<at id="0">' + mention.name + "</at> -  Can you take a look?"
        };

        // Note that an InvalidArgument error will be thrown if multiple cells passed to `comment.add`.
        sheet.comments.add("A1", commentBody, Excel.ContentType.mention);
        await context.sync();
    });
'Excel.ConditionalCellValueRule#formula1:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B21:E23");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.cellValue);
        conditionalFormat.cellValue.format.font.color = "red";
        conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

        await context.sync();
    });
'Excel.ConditionalCellValueRule#operator:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B21:E23");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.cellValue);
        conditionalFormat.cellValue.format.font.color = "red";
        conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

        await context.sync();
    });
'Excel.ConditionalFormat#cellValue:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B21:E23");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.cellValue);
        conditionalFormat.cellValue.format.font.color = "red";
        conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

        await context.sync();
    });
'Excel.ConditionalFormat#colorScale:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B2:M5");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.colorScale);
        const criteria = {
            minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
            midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
            maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
        };
        conditionalFormat.colorScale.criteria = criteria;

        await context.sync();
    });
'Excel.ConditionalFormat#custom:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
        conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
        conditionalFormat.custom.format.font.color = "green";

        await context.sync();
    });
'Excel.ConditionalFormat#dataBar:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.dataBar);
        conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;

        await context.sync();
    });
'Excel.ConditionalFormat#getRange:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const worksheetRange = sheet.getRange();
        worksheetRange.conditionalFormats.load("type");

        await context.sync();

        let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
        worksheetRange.conditionalFormats.items.forEach(item => {
            cfRangePairs.push({
                cf: item,
                range: item.getRange().load("address")
            });
        });

        await context.sync();

        if (cfRangePairs.length > 0) {
            cfRangePairs.forEach(item => {
                console.log(item.cf.type);
            });
        } else {
            console.log("No conditional formats applied.");
        }
    });
'Excel.ConditionalFormat#iconSet:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.iconSet);
        const iconSetCF = conditionalFormat.iconSet;
        iconSetCF.style = Excel.IconSet.threeTriangles;

        /*
            The iconSetCF.criteria array is automatically prepopulated with
            criterion elements whose properties have been given default settings.
            You can't write to each property of a criterion directly. Instead,
            replace the whole criteria object.

            With a "three*" icon set style, such as "threeTriangles", the third
            element in the criteria array (criteria[2]) defines the "top" icon;
            e.g., a green triangle. The second (criteria[1]) defines the "middle"
            icon, The first (criteria[0]) defines the "low" icon, but it
            can often be left empty as this method does below, because every
            cell that does not match the other two criteria always gets the low
            icon.            
        */
        iconSetCF.criteria = [
            {} as any,
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=700"
            },
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=1000",
            }
        ];

        await context.sync();
    });
'Excel.ConditionalFormat#preset:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B2:M5");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.presetCriteria);
        conditionalFormat.preset.format.font.color = "white";
        conditionalFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage };

        await context.sync();
    });
'Excel.ConditionalFormat#textComparison:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B16:D18");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.containsText);
        conditionalFormat.textComparison.format.font.color = "red";
        conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

        await context.sync();
    });
'Excel.ConditionalFormat#type:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const worksheetRange = sheet.getRange();
        worksheetRange.conditionalFormats.load("type");

        await context.sync();

        let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
        worksheetRange.conditionalFormats.items.forEach(item => {
            cfRangePairs.push({
                cf: item,
                range: item.getRange().load("address")
            });
        });

        await context.sync();

        if (cfRangePairs.length > 0) {
            cfRangePairs.forEach(item => {
                console.log(item.cf.type);
            });
        } else {
            console.log("No conditional formats applied.");
        }
    });
'Excel.ConditionalFormatCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B2:M5");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.colorScale);
        const criteria = {
            minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
            midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
            maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
        };
        conditionalFormat.colorScale.criteria = criteria;

        await context.sync();
    });
'Excel.ConditionalFormatCollection#clearAll:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange();
        range.conditionalFormats.clearAll();

        await context.sync();

        $(".conditional-formats").hide();
    });
'Excel.ConditionalFormatCollection#getItemAt:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const worksheetRange = sheet.getRange();
        worksheetRange.conditionalFormats.load("type");

        await context.sync();

        let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
        worksheetRange.conditionalFormats.items.forEach(item => {
            cfRangePairs.push({
                cf: item,
                range: item.getRange().load("address")
            });
        });

        await context.sync();

        if (cfRangePairs.length > 0) {
            cfRangePairs.forEach(item => {
                console.log(item.cf.type);
            });
        } else {
            console.log("No conditional formats applied.");
        }
    });
'Excel.ConditionalFormatRule#formula:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
        conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
        conditionalFormat.custom.format.font.color = "green";

        await context.sync();
    });
'Excel.ConditionalIconCriterion#formula:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.iconSet);
        const iconSetCF = conditionalFormat.iconSet;
        iconSetCF.style = Excel.IconSet.threeTriangles;

        /*
            The iconSetCF.criteria array is automatically prepopulated with
            criterion elements whose properties have been given default settings.
            You can't write to each property of a criterion directly. Instead,
            replace the whole criteria object.

            With a "three*" icon set style, such as "threeTriangles", the third
            element in the criteria array (criteria[2]) defines the "top" icon;
            e.g., a green triangle. The second (criteria[1]) defines the "middle"
            icon, The first (criteria[0]) defines the "low" icon, but it
            can often be left empty as this method does below, because every
            cell that does not match the other two criteria always gets the low
            icon.            
        */
        iconSetCF.criteria = [
            {} as any,
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=700"
            },
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=1000",
            }
        ];

        await context.sync();
    });
'Excel.ConditionalIconCriterion#operator:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.iconSet);
        const iconSetCF = conditionalFormat.iconSet;
        iconSetCF.style = Excel.IconSet.threeTriangles;

        /*
            The iconSetCF.criteria array is automatically prepopulated with
            criterion elements whose properties have been given default settings.
            You can't write to each property of a criterion directly. Instead,
            replace the whole criteria object.

            With a "three*" icon set style, such as "threeTriangles", the third
            element in the criteria array (criteria[2]) defines the "top" icon;
            e.g., a green triangle. The second (criteria[1]) defines the "middle"
            icon, The first (criteria[0]) defines the "low" icon, but it
            can often be left empty as this method does below, because every
            cell that does not match the other two criteria always gets the low
            icon.            
        */
        iconSetCF.criteria = [
            {} as any,
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=700"
            },
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=1000",
            }
        ];

        await context.sync();
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B16:D18");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.containsText);
        conditionalFormat.textComparison.format.font.color = "red";
        conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

        await context.sync();
    });
'Excel.ConditionalIconCriterion#type:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.iconSet);
        const iconSetCF = conditionalFormat.iconSet;
        iconSetCF.style = Excel.IconSet.threeTriangles;

        /*
            The iconSetCF.criteria array is automatically prepopulated with
            criterion elements whose properties have been given default settings.
            You can't write to each property of a criterion directly. Instead,
            replace the whole criteria object.

            With a "three*" icon set style, such as "threeTriangles", the third
            element in the criteria array (criteria[2]) defines the "top" icon;
            e.g., a green triangle. The second (criteria[1]) defines the "middle"
            icon, The first (criteria[0]) defines the "low" icon, but it
            can often be left empty as this method does below, because every
            cell that does not match the other two criteria always gets the low
            icon.            
        */
        iconSetCF.criteria = [
            {} as any,
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=700"
            },
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=1000",
            }
        ];

        await context.sync();
    });
'Excel.ConditionalPresetCriteriaRule#criterion:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B2:M5");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.presetCriteria);
        conditionalFormat.preset.format.font.color = "white";
        conditionalFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage };

        await context.sync();
    });
'Excel.ConditionalTextComparisonRule#text:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B16:D18");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.containsText);
        conditionalFormat.textComparison.format.font.color = "red";
        conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

        await context.sync();
    });
'Excel.CultureInfo#datetimeFormat:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/50-workbook/culture-info-date-time.yaml

    await Excel.run(async (context) => {
      context.application.cultureInfo.datetimeFormat.load([
        "longDatePattern",
        "shortDatePattern",
        "dateSeparator",
        "longTimePattern",
        "timeSeparator"
      ]);
      await context.sync();

      // Use the cultural settings API to retrieve the user's system date and time settings.
      const systemLongDatePattern = context.application.cultureInfo.datetimeFormat.longDatePattern;
      const systemShortDatePattern = context.application.cultureInfo.datetimeFormat.shortDatePattern;
      const systemDateSeparator = context.application.cultureInfo.datetimeFormat.dateSeparator;
      const systemLongTimePattern = context.application.cultureInfo.datetimeFormat.longTimePattern;
      const systemTimeSeparator = context.application.cultureInfo.datetimeFormat.timeSeparator;

      // Write the date and time settings in your table. 
      const sheet = context.workbook.worksheets.getActiveWorksheet();
      const dateTimeData = sheet.getRange("A2:B6");
      dateTimeData.values = [
        ["Long date", systemLongDatePattern], 
        ["Short date", systemShortDatePattern], 
        ["Date separator", systemDateSeparator], 
        ["Long time format", systemLongTimePattern],
        ["Time separator", systemTimeSeparator]
      ];

      sheet.tables
        .getItemAt(0)
        .getRange()
        .format.autofitColumns();

      await context.sync();
    });
'Excel.CustomConditionalFormat#format:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
        conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
        conditionalFormat.custom.format.font.color = "green";

        await context.sync();
    });
'Excel.CustomPropertyCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/26-document/custom-properties.yaml

    await Excel.run(async (context) => {
      // Get the key/value pair from the task pane.
      const userKey = $("#key").text();
      const userValue = $("#value").text();

      // Add the custom property.
      const customDocProperties = context.workbook.properties.custom;
      customDocProperties.add(userKey, userValue);

      await context.sync();

      console.log(`Successfully set custom document property ${userKey}:${userValue}.`);
    });
'Excel.CustomXmlPart#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/18-custom-xml-parts/create-set-get-and-delete-custom-xml-parts.yaml

    await Excel.run(async (context) => {
        const settings = context.workbook.settings;
        const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
        await context.sync();

        if (xmlPartIDSetting.value) {   
            let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);
            const xmlBlob = customXmlPart.getXml();
            customXmlPart.delete();
            customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);

            await context.sync();

            if (customXmlPart.isNullObject) {
                $("#display-xml").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);

                // Delete the unneeded setting too.
                xmlPartIDSetting.delete();            
            } else {
                const readableXml = addLineBreaksToXML(xmlBlob.value);
                const strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\n${readableXml}`
                $("#display-xml").text(strangeMessage);
            }

            await context.sync();
        }
    });
'Excel.CustomXmlPart#getXml:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/18-custom-xml-parts/create-set-get-and-delete-custom-xml-parts.yaml

    await Excel.run(async (context) => {
        // You must have the xmlns attribute to populate the 
        // CustomXml.namespaceUri property.
        const originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
        const customXmlPart = context.workbook.customXmlParts.add(originalXml);
        customXmlPart.load("id");
        const xmlBlob = customXmlPart.getXml();

        await context.sync();

        const readableXml = addLineBreaksToXML(xmlBlob.value);
        $("#display-xml").text(readableXml);

        // Store the XML part's ID in a setting.
        const settings = context.workbook.settings;
        settings.add("ContosoReviewXmlPartId", customXmlPart.id);

        await context.sync();
    });
'Excel.CustomXmlPart#id:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/18-custom-xml-parts/create-set-get-and-delete-custom-xml-parts.yaml

    await Excel.run(async (context) => {
        // You must have the xmlns attribute to populate the 
        // CustomXml.namespaceUri property.
        const originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
        const customXmlPart = context.workbook.customXmlParts.add(originalXml);
        customXmlPart.load("id");
        const xmlBlob = customXmlPart.getXml();

        await context.sync();

        const readableXml = addLineBreaksToXML(xmlBlob.value);
        $("#display-xml").text(readableXml);

        // Store the XML part's ID in a setting.
        const settings = context.workbook.settings;
        settings.add("ContosoReviewXmlPartId", customXmlPart.id);

        await context.sync();
    });
'Excel.CustomXmlPart#setXml:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/18-custom-xml-parts/create-set-get-and-delete-custom-xml-parts.yaml

    await Excel.run(async (context) => {
        const settings = context.workbook.settings;
        const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
        await context.sync();

        if (xmlPartIDSetting.value) {   
            const customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);

            // The setXml method does a whole-for-whole replacement 
            // of the entire XML.
            customXmlPart.setXml("<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>John</Reviewer><Reviewer>Hitomi</Reviewer></Reviewers>");
            const xmlBlob = customXmlPart.getXml();
            await context.sync();

            const readableXml = addLineBreaksToXML(xmlBlob.value);
            $("#display-xml").text(readableXml);
            await context.sync();
        }
    });
'Excel.CustomXmlPartCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/18-custom-xml-parts/create-set-get-and-delete-custom-xml-parts.yaml

    await Excel.run(async (context) => {
        // You must have the xmlns attribute to populate the 
        // CustomXml.namespaceUri property.
        const originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
        const customXmlPart = context.workbook.customXmlParts.add(originalXml);
        customXmlPart.load("id");
        const xmlBlob = customXmlPart.getXml();

        await context.sync();

        const readableXml = addLineBreaksToXML(xmlBlob.value);
        $("#display-xml").text(readableXml);

        // Store the XML part's ID in a setting.
        const settings = context.workbook.settings;
        settings.add("ContosoReviewXmlPartId", customXmlPart.id);

        await context.sync();
    });
'Excel.CustomXmlPartCollection#getItem:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/18-custom-xml-parts/create-set-get-and-delete-custom-xml-parts.yaml

    await Excel.run(async (context) => {
        const settings = context.workbook.settings;
        const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
        await context.sync();

        if (xmlPartIDSetting.value) {   
            const customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);

            // The setXml method does a whole-for-whole replacement 
            // of the entire XML.
            customXmlPart.setXml("<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>John</Reviewer><Reviewer>Hitomi</Reviewer></Reviewers>");
            const xmlBlob = customXmlPart.getXml();
            await context.sync();

            const readableXml = addLineBreaksToXML(xmlBlob.value);
            $("#display-xml").text(readableXml);
            await context.sync();
        }
    });
'Excel.CustomXmlPartCollection#getByNamespace:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/18-custom-xml-parts/test-xml-for-unique-namespace.yaml

    await Excel.run(async (context) => {
        $("#display-xml").text("");
        const contosoNamespace = "http://schemas.contoso.com/review/1.0";
        const customXmlParts = context.workbook.customXmlParts;
        const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
        const numberOfPartsInNamespace = filteredXmlParts.getCount();

        await context.sync();

        if (numberOfPartsInNamespace.value == 1) {
            const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
            const xmlBlob = onlyXmlPartInNamespace.getXml();

            await context.sync();

            // Make it a bit more readable.
            const readableXml = xmlBlob.value.replace(/></g, ">\n<");

            $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                ${readableXml}`);

        } else {
            console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
        }        

        await context.sync();
    });
'Excel.CustomXmlPartScopedCollection#getItemOrNullObject:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/18-custom-xml-parts/create-set-get-and-delete-custom-xml-parts.yaml

    await Excel.run(async (context) => {
        const settings = context.workbook.settings;
        const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
        await context.sync();

        if (xmlPartIDSetting.value) {   
            let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);
            const xmlBlob = customXmlPart.getXml();
            customXmlPart.delete();
            customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);

            await context.sync();

            if (customXmlPart.isNullObject) {
                $("#display-xml").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);

                // Delete the unneeded setting too.
                xmlPartIDSetting.delete();            
            } else {
                const readableXml = addLineBreaksToXML(xmlBlob.value);
                const strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\n${readableXml}`
                $("#display-xml").text(strangeMessage);
            }

            await context.sync();
        }
    });
'Excel.CustomXmlPartScopedCollection#getCount:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/18-custom-xml-parts/test-xml-for-unique-namespace.yaml

    await Excel.run(async (context) => {
        $("#display-xml").text("");
        const contosoNamespace = "http://schemas.contoso.com/review/1.0";
        const customXmlParts = context.workbook.customXmlParts;
        const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
        const numberOfPartsInNamespace = filteredXmlParts.getCount();

        await context.sync();

        if (numberOfPartsInNamespace.value == 1) {
            const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
            const xmlBlob = onlyXmlPartInNamespace.getXml();

            await context.sync();

            // Make it a bit more readable.
            const readableXml = xmlBlob.value.replace(/></g, ">\n<");

            $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                ${readableXml}`);

        } else {
            console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
        }        

        await context.sync();
    });
'Excel.CustomXmlPartScopedCollection#getOnlyItem:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/18-custom-xml-parts/test-xml-for-unique-namespace.yaml

    await Excel.run(async (context) => {
        $("#display-xml").text("");
        const contosoNamespace = "http://schemas.contoso.com/review/1.0";
        const customXmlParts = context.workbook.customXmlParts;
        const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
        const numberOfPartsInNamespace = filteredXmlParts.getCount();

        await context.sync();

        if (numberOfPartsInNamespace.value == 1) {
            const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
            const xmlBlob = onlyXmlPartInNamespace.getXml();

            await context.sync();

            // Make it a bit more readable.
            const readableXml = xmlBlob.value.replace(/></g, ">\n<");

            $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                ${readableXml}`);

        } else {
            console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
        }        

        await context.sync();
    });
'Excel.DataBarConditionalFormat#barDirection:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.dataBar);
        conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;

        await context.sync();
    });
'Excel.DataPivotHierarchy#showAs:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-calculations.yaml

    await Excel.run(async (context) => {
        const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
        const farmDataHierarchy: Excel.DataPivotHierarchy = pivotTable.dataHierarchies.getItem("Sum of Crates Sold at Farm");        
        const wholesaleDataHierarchy: Excel.DataPivotHierarchy = pivotTable.dataHierarchies.getItem("Sum of Crates Sold Wholesale");

        farmDataHierarchy.load("showAs");
        wholesaleDataHierarchy.load("showAs");
        await context.sync();

        // show the crates of each fruit type sold at the farm as a percentage of the column's total
        let farmShowAs = farmDataHierarchy.showAs;
        farmShowAs.calculation = Excel.ShowAsCalculation.percentOfColumnTotal;
        farmShowAs.baseField = pivotTable.rowHierarchies.getItem("Type").fields.getItem("Type");
        farmDataHierarchy.showAs = farmShowAs;

        let wholesaleShowAs = wholesaleDataHierarchy.showAs;
        wholesaleShowAs.calculation = Excel.ShowAsCalculation.percentOfColumnTotal;
        wholesaleShowAs.baseField = pivotTable.rowHierarchies.getItem("Type").fields.getItem("Type");
        wholesaleDataHierarchy.showAs = wholesaleShowAs;
        await context.sync();
    });
'Excel.DataPivotHierarchy#name:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-create-and-modify.yaml

    await Excel.run(async (context) => {
        const dataHierarchies = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales").dataHierarchies
        dataHierarchies.load("no-properties-needed");
        await context.sync();

        dataHierarchies.items[0].name = "Farm Sales";
        dataHierarchies.items[1].name = "Wholesale";
        await context.sync();
    });
'Excel.DataValidation#prompt:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/22-data-validation/data-validation.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Decision");
        const rankingRange = sheet.tables.getItem("NameOptionsTable").columns.getItem("Ranking").getDataBodyRange();

        // When you are developing, it is a good practice to
        // clear the dataValidation object with each run of your code.
        rankingRange.dataValidation.clear();

        let greaterThanZeroRule = {
            wholeNumber: {
                formula1: 0,
                operator: Excel.DataValidationOperator.greaterThan
            }
        };
        rankingRange.dataValidation.rule = greaterThanZeroRule;

        rankingRange.dataValidation.prompt = {
            message: "Please enter a positive number.",
            showPrompt: true,
            title: "Positive numbers only."
        };

        rankingRange.dataValidation.errorAlert = {
            message: "Sorry, only positive numbers are allowed",
            showAlert: true,
            style: "Stop",
            title: "Negative Number Entered"
        };

        await context.sync();
    });
'Excel.DataValidation#rule:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/22-data-validation/data-validation.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Decision");
        const nameRange = 
            sheet.tables.getItem("NameOptionsTable").columns.getItem("Baby Name").getDataBodyRange();

        // When you are developing, it is a good practice to
        // clear the dataValidation object with each run of your code.
        nameRange.dataValidation.clear();

        const nameSourceRange = context.workbook.worksheets.getItem("Names").getRange("A1:A3");

        let approvedListRule = {
            list: {
                inCellDropDown: true,
                source: nameSourceRange
            }
        };
        nameRange.dataValidation.rule = approvedListRule;

        await context.sync();
    });
'Excel.DataValidation#errorAlert:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/22-data-validation/data-validation.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Decision");
        const commentsRange = 
            sheet.tables.getItem("NameOptionsTable").columns.getItem("Comments").getDataBodyRange();

        // When you are developing, it is a good practice to
        // clear the dataValidation object with each run of your code.
        commentsRange.dataValidation.clear();   

        // If the value of A2 is contained in the value of C2, then 
        // SEARCH(A2,C2) returns the number where it begins. Otherwise,
        // it does not return a number.
        let redundantStringRule = {
            custom: {
                formula: "=NOT(ISNUMBER(SEARCH(A2,C2)))"
            }
        };
        commentsRange.dataValidation.rule = redundantStringRule;
        commentsRange.dataValidation.errorAlert = {
            message: "It is redundant to include the baby name in the comment.",
            showAlert: true,
            style: "Information",
            title: "Baby Name in Comment"
        };

        await context.sync();
    });
'Excel.DataValidationRule#list:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/22-data-validation/data-validation.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Decision");
        const nameRange = 
            sheet.tables.getItem("NameOptionsTable").columns.getItem("Baby Name").getDataBodyRange();

        // When you are developing, it is a good practice to
        // clear the dataValidation object with each run of your code.
        nameRange.dataValidation.clear();

        const nameSourceRange = context.workbook.worksheets.getItem("Names").getRange("A1:A3");

        let approvedListRule = {
            list: {
                inCellDropDown: true,
                source: nameSourceRange
            }
        };
        nameRange.dataValidation.rule = approvedListRule;

        await context.sync();
    });
'Excel.DataValidationRule#wholeNumber:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/22-data-validation/data-validation.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Decision");
        const rankingRange = sheet.tables.getItem("NameOptionsTable").columns.getItem("Ranking").getDataBodyRange();

        // When you are developing, it is a good practice to
        // clear the dataValidation object with each run of your code.
        rankingRange.dataValidation.clear();

        let greaterThanZeroRule = {
            wholeNumber: {
                formula1: 0,
                operator: Excel.DataValidationOperator.greaterThan
            }
        };
        rankingRange.dataValidation.rule = greaterThanZeroRule;

        rankingRange.dataValidation.prompt = {
            message: "Please enter a positive number.",
            showPrompt: true,
            title: "Positive numbers only."
        };

        rankingRange.dataValidation.errorAlert = {
            message: "Sorry, only positive numbers are allowed",
            showAlert: true,
            style: "Stop",
            title: "Negative Number Entered"
        };

        await context.sync();
    });
'Excel.DocumentProperties#custom:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/26-document/custom-properties.yaml

    await Excel.run(async (context) => {
      // Load the keys and values of all custom properties.
      const customDocProperties = context.workbook.properties.custom;
      customDocProperties.load(["key", "value"]);
      await context.sync();

      // Log each custom property to the console.
      // Note that your document may have more properties than those you have set using this snippet.
      customDocProperties.items.forEach((property) => {
        console.log(`${property.key}:${property.value}`);
      });
    });
'Excel.IconSetConditionalFormat#criteria:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.iconSet);
        const iconSetCF = conditionalFormat.iconSet;
        iconSetCF.style = Excel.IconSet.threeTriangles;

        /*
            The iconSetCF.criteria array is automatically prepopulated with
            criterion elements whose properties have been given default settings.
            You can't write to each property of a criterion directly. Instead,
            replace the whole criteria object.

            With a "three*" icon set style, such as "threeTriangles", the third
            element in the criteria array (criteria[2]) defines the "top" icon;
            e.g., a green triangle. The second (criteria[1]) defines the "middle"
            icon, The first (criteria[0]) defines the "low" icon, but it
            can often be left empty as this method does below, because every
            cell that does not match the other two criteria always gets the low
            icon.            
        */
        iconSetCF.criteria = [
            {} as any,
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=700"
            },
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=1000",
            }
        ];

        await context.sync();
    });
'Excel.IconSetConditionalFormat#style:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.iconSet);
        const iconSetCF = conditionalFormat.iconSet;
        iconSetCF.style = Excel.IconSet.threeTriangles;

        /*
            The iconSetCF.criteria array is automatically prepopulated with
            criterion elements whose properties have been given default settings.
            You can't write to each property of a criterion directly. Instead,
            replace the whole criteria object.

            With a "three*" icon set style, such as "threeTriangles", the third
            element in the criteria array (criteria[2]) defines the "top" icon;
            e.g., a green triangle. The second (criteria[1]) defines the "middle"
            icon, The first (criteria[0]) defines the "low" icon, but it
            can often be left empty as this method does below, because every
            cell that does not match the other two criteria always gets the low
            icon.            
        */
        iconSetCF.criteria = [
            {} as any,
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=700"
            },
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=1000",
            }
        ];

        await context.sync();
    });
'Excel.Image#format:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/44-shape/shape-images.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const image = sheet.shapes.getItem("Image").image;
        image.load("format");
        await context.sync();

        console.log("The image's format is: " + image.format);
        await context.sync();
    });
'Excel.Line#connectBeginShape:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/44-shape/shape-lines.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const line = shapes.getItem("StraightLine").line;
        line.connectBeginShape(shapes.getItem("Left"), 2);
        line.connectEndShape(shapes.getItem("Right"), 0);
        await context.sync();
    });
'Excel.Line#connectEndShape:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/44-shape/shape-lines.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const line = shapes.getItem("StraightLine").line;
        line.connectBeginShape(shapes.getItem("Left"), 2);
        line.connectEndShape(shapes.getItem("Right"), 0);
        await context.sync();
    });
'Excel.Line#disconnectBeginShape:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/44-shape/shape-lines.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const line = shapes.getItem("StraightLine").line;
        line.disconnectBeginShape();
        line.disconnectEndShape();
        await context.sync();
    });
'Excel.Line#disconnectEndShape:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/44-shape/shape-lines.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const line = shapes.getItem("StraightLine").line;
        line.disconnectBeginShape();
        line.disconnectEndShape();
        await context.sync();
    });
'Excel.NamedItem#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/34-named-item/create-and-remove-named-item.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const totalName = sheet.names.getItemOrNullObject("TotalAmount");
        totalName.load();
        await context.sync();

        if (totalName.value) {
            totalName.delete();

            // Replace the named item (TotalAmount) with the actual formula for TotalAmount to avoid displaying #NAME in the cell.
            sheet.getRange("D11").values = [["=SUM(ExpensesTable[AMOUNT])"]];
        } else {
            console.log("No named item created for the formula.");
        }

        await context.sync();
    });
'Excel.NamedItem#formula:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/34-named-item/update-named-item.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        // Get the named item
        const myNamedItem = sheet.names.getItemOrNullObject("MyRange");
        myNamedItem.load("name, formula");
        await context.sync();

        if (myNamedItem.isNullObject) {
            console.log(`There is no named item. Create it with "Add named item for a range" first.`);
        } else {                    
            // Update named item to point to the second range
            myNamedItem.formula = "=Sample!$B$10:$D$14";
            sheet.getRange("B10:D14").select();
            await context.sync();

            console.log(`Just updated the named item "${myNamedItem.name}" -- it's now located here: ${myNamedItem.formula}`);
        }
    });
'Excel.NamedItemCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/34-named-item/create-and-remove-named-item.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const headerRange = sheet.getRange("A1:D1");

        sheet.names.add("ExpensesHeader", headerRange);
        const namedItems = sheet.names.load("name, type");

        await context.sync();
    });
'Excel.NumberFormatInfo#numberDecimalSeparator:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/50-workbook/culture-info.yaml

    // This will convert a number like "14,37" to "14.37"

    // (assuming the system decimal separator is ".").
      await Excel.run(async (context) => {
    const sheet = context.workbook.worksheets.getItem("Sample");

    const decimalSource = sheet.getRange("B2");

    decimalSource.load("values");

    context.application.cultureInfo.numberFormat.load("numberDecimalSeparator");

    await context.sync();


    const systemDecimalSeparator =
    context.application.cultureInfo.numberFormat.numberDecimalSeparator;

    const oldDecimalString: string = decimalSource.values[0][0];


    // This assumes the input column is standardized to use "," as the decimal
    separator. 

    const newDecimalString = oldDecimalString.replace(",",
    systemDecimalSeparator);


    const resultRange = sheet.getRange("C2");

    resultRange.values = [[newDecimalString]];

    resultRange.format.autofitColumns();

    await context.sync();
      });
'Excel.NumberFormatInfo#numberGroupSeparator:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/50-workbook/culture-info.yaml

    await Excel.run(async (context) => {
      // This will convert a number like "123-456-789" to "123,456,789"
      // (assuming the system thousands separator is ",").
      const sheet = context.workbook.worksheets.getItem("Sample");
      const bigNumberSource = sheet.getRange("B3");
      bigNumberSource.load("values");
      context.application.cultureInfo.numberFormat.load("numberGroupSeparator");
      await context.sync();

      const systemThousandsSeparator = context.application.cultureInfo.numberFormat.numberGroupSeparator;
      const oldBigNumberString: string = bigNumberSource.values[0][0];
      
      // This assumes the input column is standardized to use "-" as the number group separator. 
      const newBigNumberString = oldBigNumberString.replace(/-/g, systemThousandsSeparator);

      const resultRange = sheet.getRange("C3");
      resultRange.values = [[newBigNumberString]];
      resultRange.format.autofitColumns();
      await context.sync();
    });
'Excel.PageBreakCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/worksheet-page-layout.yaml

    await Excel.run(async (context) => {
        const farmSheet = context.workbook.worksheets.getItem("Print");
        farmSheet.horizontalPageBreaks.add("A21:E21");
        await context.sync();
    });
'Excel.PageLayout#centerHorizontally:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/worksheet-page-layout.yaml

    await Excel.run(async (context) => {
        const farmSheet = context.workbook.worksheets.getItem("Print");
        farmSheet.pageLayout.centerHorizontally = true;
        farmSheet.pageLayout.centerVertically = true;
        await context.sync();
    });
'Excel.PageLayout#centerVertically:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/worksheet-page-layout.yaml

    await Excel.run(async (context) => {
        const farmSheet = context.workbook.worksheets.getItem("Print");
        farmSheet.pageLayout.centerHorizontally = true;
        farmSheet.pageLayout.centerVertically = true;
        await context.sync();
    });
'Excel.PageLayout#orientation:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/worksheet-page-layout.yaml

    await Excel.run(async (context) => {
        const farmSheet = context.workbook.worksheets.getItem("Print");
        farmSheet.pageLayout.orientation = Excel.PageOrientation.landscape;
        await context.sync();
    });
'Excel.PageLayout#setPrintArea:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/worksheet-page-layout.yaml

    await Excel.run(async (context) => {
        const farmSheet = context.workbook.worksheets.getItem("Print");
        farmSheet.pageLayout.setPrintArea("A1:D41");
        await context.sync();
    });
'Excel.PageLayout#setPrintTitleRows:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/worksheet-page-layout.yaml

    await Excel.run(async (context) => {
        const farmSheet = context.workbook.worksheets.getItem("Print");
        farmSheet.pageLayout.setPrintTitleRows("$1:$1");
        await context.sync();
    });
'Excel.PageLayout#zoom:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/worksheet-page-layout.yaml

    await Excel.run(async (context) => {
        const farmSheet = context.workbook.worksheets.getItem("Print");
        farmSheet.pageLayout.zoom = { scale: 200 };
        await context.sync();
    });
'Excel.PivotField#clearAllFilters:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-pivotfilters.yaml

    await Excel.run(async (context) => {
      // Clear all the PivotFilters.

      // Get the PivotTable.
      const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
      pivotTable.hierarchies.load("name");
      await context.sync();

      // Clear the filters on each PivotField.
      pivotTable.hierarchies.items.forEach((hierarchy) => {
        hierarchy.fields.getItem(hierarchy.name).clearAllFilters();
      });
      await context.sync();
    });
'Excel.PivotFilters#dateFilter:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-pivotfilters.yaml

    await Excel.run(async (context) => {
      // Add a date-based PivotFilter.

      // Get the PivotTable.
      const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");

      // PivotFilters can only be applied to PivotHierarchies that are being used for pivoting.
      // If it's not already there, add "Date Updated" to the hierarchies.
      let dateHierarchy = pivotTable.rowHierarchies.getItemOrNullObject("Date Updated");
      await context.sync();
      if (dateHierarchy.isNullObject) {
        dateHierarchy = pivotTable.rowHierarchies.add(pivotTable.hierarchies.getItem("Date Updated"));
      }

      // Apply a date filter to filter out anything logged before August.
      const filterField = dateHierarchy.fields.getItem("Date Updated");
      const dateFilter = {
        condition: Excel.DateFilterCondition.afterOrEqualTo,
        comparator: {
          date: "2020-08-01",
          specificity: Excel.FilterDatetimeSpecificity.month
        }
      };
      filterField.applyFilter({ dateFilter: dateFilter });

      await context.sync();
    });
'Excel.PivotFilters#labelFilter:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-pivotfilters.yaml

    await Excel.run(async (context) => {
      // Add a PivotFilter to filter based on the strings of item labels.

      // Get the PivotTable.
      const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");

      // Get the "Type" field.
      const field = pivotTable.hierarchies.getItem("Type").fields.getItem("Type");

      // Filter out any types that start with "L" ("Lemons" and "Limes" in this case).
      const filter: Excel.PivotLabelFilter = {
        condition: Excel.LabelFilterCondition.beginsWith,
        substring: "L",
        exclusive: true
      };

      // Apply the label filter to the field.
      field.applyFilter({ labelFilter: filter });

      await context.sync();
    });
'Excel.PivotFilters#manualFilter:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-pivotfilters.yaml

    await Excel.run(async (context) => {
      // Add a PivotFilter to filter on manually-selected items.

      // Get the PivotTable.
      const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");

      // PivotFilters can only be applied to PivotHierarchies that are being used for pivoting.
      // If it's not already there, add "Classification" to the hierarchies.
      let classHierarchy = pivotTable.filterHierarchies.getItemOrNullObject("Classification");
      await context.sync();
      if (classHierarchy.isNullObject) {
        classHierarchy = pivotTable.filterHierarchies.add(pivotTable.hierarchies.getItem("Classification"));
      }

      // Apply a manual filter to include only a specific PivotItem (the string "Organic").
      const filterField = classHierarchy.fields.getItem("Classification");
      const manualFilter = { selectedItems: ["Organic"]};
      filterField.applyFilter({ manualFilter: manualFilter });

      await context.sync();
    });
'Excel.PivotFilters#valueFilter:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-pivotfilters.yaml

    await Excel.run(async (context) => {
      // Add a PivotFilter to filter on the values correlated with a row.

      // Get the PivotTable.
      const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");

      // Get the "Farm" field.
      const field = pivotTable.hierarchies.getItem("Farm").fields.getItem("Farm");

      // Filter to only include rows with more than 500 wholesale crates sold.
      const filter: Excel.PivotValueFilter = {
        condition: Excel.ValueFilterCondition.greaterThan,
        comparator: 500,
        value: "Sum of Crates Sold Wholesale"
      };

      // Apply the value filter to the field.
      field.applyFilter({ valueFilter: filter });

      await context.sync();
    });
'Excel.PivotHierarchy#fields:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-pivotfilters.yaml

    await Excel.run(async (context) => {
      // Add a PivotFilter to filter on the values correlated with a row.

      // Get the PivotTable.
      const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");

      // Get the "Farm" field.
      const field = pivotTable.hierarchies.getItem("Farm").fields.getItem("Farm");

      // Filter to only include rows with more than 500 wholesale crates sold.
      const filter: Excel.PivotValueFilter = {
        condition: Excel.ValueFilterCondition.greaterThan,
        comparator: 500,
        value: "Sum of Crates Sold Wholesale"
      };

      // Apply the value filter to the field.
      field.applyFilter({ valueFilter: filter });

      await context.sync();
    });
'Excel.PivotLayout#getDataBodyRange:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-filters-and-summaries.yaml

    await Excel.run(async (context) => {
        const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");

        // the layout controls the ranges used by the PivotTable
        const range = pivotTable.layout.getDataBodyRange();

        // get all the data hierarchy totals
        const grandTotalRange = range.getLastRow();
        grandTotalRange.load("address");
        await context.sync();
        
        // use the wholesale and farm sale totals to make a final sum
        const masterTotalRange = context.workbook.worksheets.getActiveWorksheet().getRange("B27:C27");
        masterTotalRange.formulas = [["All Crates", "=SUM(" + grandTotalRange.address + ")"]];
        await context.sync();
    });
'Excel.PivotTable#columnHierarchies:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-create-and-modify.yaml

    await Excel.run(async (context) => {
        const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");       

        // check if the PivotTable already has a column
        const column = pivotTable.columnHierarchies.getItemOrNullObject("Farm");
        column.load("id");
        await context.sync();

        if (column.isNullObject) {
            // ading the farm column to the column hierarchy automatically removes it from the row hierarchy
            pivotTable.columnHierarchies.add(pivotTable.hierarchies.getItem("Farm"));
        } else {
            pivotTable.columnHierarchies.remove(column);
        }

        await context.sync();
    });
'Excel.PivotTable#dataHierarchies:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-create-and-modify.yaml

    await Excel.run(async (context) => {
        const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
        pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem("Crates Sold at Farm"));
        pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem("Crates Sold Wholesale"));

        await context.sync();
    });
'Excel.PivotTable#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-create-and-modify.yaml

    await Excel.run(async (context) => {
        context.workbook.worksheets.getItem("Pivot").pivotTables.getItem("Farm Sales").delete();

        await context.sync();
    });
'Excel.PivotTable#layout:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-create-and-modify.yaml

    await Excel.run(async (context) => {
        const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
        pivotTable.layout.load("layoutType");
        await context.sync();

        // cycle between the three layout types
        if (pivotTable.layout.layoutType === "Compact") {
            pivotTable.layout.layoutType = "Outline";
        } else if (pivotTable.layout.layoutType === "Outline") {
            pivotTable.layout.layoutType = "Tabular";
        } else {
            pivotTable.layout.layoutType = "Compact";
        }
        await context.sync();
        console.log("Pivot layout is now " + pivotTable.layout.layoutType);
    });
'Excel.PivotTable#filterHierarchies:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-filters-and-summaries.yaml

    async function filter(functionType: Excel.AggregationFunction) {
        await Excel.run(async (context) => {
            const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
            const filters = pivotTable.filterHierarchies;
            const filter = filters.getItemOrNullObject("Classification");
            filter.load();
            await context.sync();

            // add the Classification hierarchy to the filter, if it's not already there
            if (filter.isNullObject) {
                filters.add(pivotTable.hierarchies.getItem("Classification"));
                await context.sync();
            }
        });
    }
'Excel.PivotTableCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-create-and-modify.yaml

    await Excel.run(async (context) => {
        const rangeToAnalyze = context.workbook.worksheets.getItem("Data").getRange("A1:E21");
        const rangeToPlacePivot = context.workbook.worksheets.getItem("Pivot").getRange("A2");
        context.workbook.worksheets.getItem("Pivot").pivotTables.add("Farm Sales", rangeToAnalyze, rangeToPlacePivot);

        await context.sync();
    });
'Excel.PresetCriteriaConditionalFormat#rule:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B2:M5");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.presetCriteria);
        conditionalFormat.preset.format.font.color = "white";
        conditionalFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage };

        await context.sync();
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
        conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
        conditionalFormat.custom.format.font.color = "green";

        await context.sync();
    });
'Excel.Range#getDirectPrecedents:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/direct-precedents.yaml

    await Excel.run(async (context) => {
      // Precedents are cells referenced by the formula in a cell.
      let range = context.workbook.getActiveCell();
      let directPrecedents = range.getDirectPrecedents();
      range.load("address");
      directPrecedents.areas.load("address");
      await context.sync();

      console.log(`Direct precedent cells of ${range.address}:`);

      // Use the direct precedents API to loop through precedents of the active cell. 
      for (var i = 0; i < directPrecedents.areas.items.length; i++) {
        // Highlight and console the address of each precedent cell.
        directPrecedents.areas.items[i].format.fill.color = "Yellow";
        console.log(`  ${directPrecedents.areas.items[i].address}`);
      }
      await context.sync();
    });
'Excel.Range#sort:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/event-column-and-row-sort.yaml

    async function sortTopToBottom(criteria: string) {
        await Excel.run(async (context) => {
            const sheet = context.workbook.worksheets.getActiveWorksheet();
            const range = sheet.getRange("A1:E5");

            // Find the column header that provides the sort criteria.
            const header = range.find(criteria, {});
            header.load("columnIndex");
            await context.sync();

            range.sort.apply(
                [
                    {
                        key: header.columnIndex,
                        sortOn: Excel.SortOn.value
                    }
                ],
                false /*matchCase*/,
                true /*hasHeaders*/,
                Excel.SortOrientation.rows
            );
            await context.sync();
        });
    }
'Excel.Range#group:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/outline.yaml

    Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        
        // Group the larger, main level. Note that the outline controls
        // will be on row 10, meaning 4-9 will collapse and expand.
        sheet.getRange("4:9").group(Excel.GroupOption.byRows);

        // Group the smaller, sublevels. Note that the outline controls
        // will be on rows 6 and 9, meaning 4-5 and 7-8 will collapse and expand.
        sheet.getRange("4:5").group(Excel.GroupOption.byRows);
        sheet.getRange("7:8").group(Excel.GroupOption.byRows);
        await context.sync();
    });
'Excel.Range#ungroup:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/outline.yaml

    Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        
        // This removes two levels of groups from the "A1-R10" range.
        // Any groups at the same level on the same dimension will be removed by a single call.
        sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byRows);
        sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byRows);
        sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byColumns);
        sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byColumns);
        await context.sync();
    });
'Excel.Range#getPivotTables:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-get-pivottables.yaml

    await Excel.run(async (context) => {
      const activeRange = context.workbook.getSelectedRange();

      // Get all the PivotTables that intersect with this range.
      const partiallyContainedPivotTables = activeRange.getPivotTables();
      // Get all the PivotTables that are completely contained within this range.
      const fullyContainedPivotTables = activeRange.getPivotTables(true);

      partiallyContainedPivotTables.load("name");
      fullyContainedPivotTables.load("name");
      await context.sync();

      // Display the names in the console.
      console.log("PivotTables in the current range:")
      partiallyContainedPivotTables.items.forEach((pivotTable) => {
        console.log(`\t${pivotTable.name}`);
      });
      console.log("PivotTables completely contained in the current range:")
      fullyContainedPivotTables.items.forEach((pivotTable) => {
        console.log(`\t${pivotTable.name}`);
      });
    });
'Excel.Range#getSpecialCells:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-areas.yaml

    await Excel.run(async (context) => {

        const sheet = context.workbook.worksheets.getActiveWorksheet();
        const usedRange = sheet.getUsedRange();

        // Find the ranges with either text or logical (boolean) values.
        const formulaRanges = usedRange.getSpecialCells("Constants", "LogicalText");
        formulaRanges.format.fill.color = "orange";

        return context.sync();
    });
'Excel.Range#autoFill:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-auto-fill.yaml

    await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getActiveWorksheet();
      const sumCell = sheet.getRange("P4");
      
      // Copy everything. The formulas will be contextually updated based on their new locations.
      sumCell.autoFill("P4:P7", Excel.AutoFillType.fillCopy);
      sumCell.format.autofitColumns();
      await context.sync();
    });
'Excel.Range#setCellProperties:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/cell-properties.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // Creating the SettableCellProperties objects to use for the range.
        // In your add-in, these should be created once, outside the function.
        const topHeaderProps: Excel.SettableCellProperties = {
            // The style property takes a string matching the name of an Excel style.
            // Built-in style names are listed in the `BuiltInStyle` enum.
            // Note that a style will overwrite any formatting,
            // so do not use the format property with the style property.
            style: "Heading1"
        };

        const headerProps: Excel.SettableCellProperties = {
            // Any subproperties of format that are not set will not be changed when these cell properties are set.
            format: {
                fill: {
                    color: "Blue"
                },
                font: {
                    color: "White",
                    bold: true
                }
            }
        };

        const nonApplicableProps: Excel.SettableCellProperties = {
            format: {
                fill: {
                    pattern: Excel.FillPattern.gray25
                },
                font: {
                    color: "Gray",
                    italic: true
                }
            }
        };

        const matchupScoreProps: Excel.SettableCellProperties = {
            format: {
                borders: {
                    bottom: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    left: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    right: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    top: {
                        style: Excel.BorderLineStyle.continuous
                    }
                }
            }
        };

        const range = sheet.getRange("A1:E5");

        // You can use empty JSON objects to avoid changing a cell's properties.
        range.setCellProperties([
            [topHeaderProps, {}, {}, {}, {}],
            [{}, {}, headerProps, headerProps, headerProps],
            [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]
        ]);

        sheet.getUsedRange().format.autofitColumns();
        await context.sync();
    });
'Excel.Range#getCellProperties:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/cell-properties.yaml

    await Excel.run(async (context) => {
        const cell = context.workbook.getActiveCell();

        // Define the cell properties to get by setting the matching LoadOptions to true.
        const propertiesToGet = cell.getCellProperties({
            address: true,
            format: {
                fill: {
                    color: true
                },
                font: {
                    color: true
                }
            },
            style: true
        });

        // Sync to get the data from the workbook.
        await context.sync();
        const cellProperties = propertiesToGet.value[0][0];
        console.log(
            `Address: ${cellProperties.address}\nStyle: ${cellProperties.style}\nFill Color: ${cellProperties.format.fill.color}\nFont Color: ${cellProperties.format.font.color}`);
    });
'Excel.Range#copyFrom:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-copyfrom.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        // Place a label in front of the copied data.
        sheet.getRange("F2").values = [["Copied Formula"]];

        // Copy a range preserving the formulas.
        // Note: non-formula values are copied over as is.
        sheet.getRange("G2").copyFrom("A1:E1", Excel.RangeCopyType.formulas);
        await context.sync();
    });
'Excel.Range#moveTo:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-copyfrom.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        // Place a label in front of the moved data.
        sheet.getRange("F12").values = [["Moved Range:"]];

        // Move the range from A1:E1 to G12:K12.
        sheet.getRange("A1:E1").moveTo("G12");
        await context.sync();
    });
'Excel.Range#getSpillingToRange:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/dynamic-arrays.yaml

    await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getItem("Sample");

      // Set G4 to a formula that returns a dynamic array.
      const targetCell = sheet.getRange("G4");
      targetCell.formulas = [["=A4:D4"]];

      // Get the address of the cells that the dynamic array spilled into.
      const spillRange = targetCell.getSpillingToRange();
      spillRange.load("address");

      // Fit the columns for readability.
      sheet.getUsedRange().format.autofitColumns();
      await context.sync();

      console.log(`Copying the table headers spilled into ${spillRange.address}.`);
    });
'Excel.Range#find:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-find.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const table = sheet.tables.getItem("ExpensesTable");
        const searchRange = table.getRange();

        // NOTE: If no match is found, an ItemNotFound error
        // is thrown when Range.find is evaluated.
        const foundRange = searchRange.find($("#searchText").text(), {
            completeMatch: isCompleteMatchToggle,
            matchCase: isMatchCaseToggle,
            searchDirection: searchDirectionToggle
        });
        
        foundRange.load("address");
        await context.sync();


        console.log(foundRange.address);
    });
'Excel.Range#findOrNullObject:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-find.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const table = sheet.tables.getItem("ExpensesTable");
        const searchRange = table.getRange();
        const foundRange = searchRange.findOrNullObject($("#searchText").text(), {
            completeMatch: isCompleteMatchToggle,
            matchCase: isMatchCaseToggle,
            searchDirection: searchDirectionToggle
        });
        
        foundRange.load("address");
        await context.sync();

        if (foundRange.isNullObject) {
            console.log("Text not found");
        } else {
            console.log(foundRange.address);
        }
    });
'Excel.Range#hyperlink:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-hyperlink.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Orders");

        let productsRange = sheet.getRange("A3:A5");
        productsRange.load("values");

        await context.sync();

        // Create a hyperlink to a URL 
        // for each product name in the first table.
        for (let i = 0; i < productsRange.values.length; i++) {
            let cellRange = productsRange.getCell(i, 0);
            let cellText = productsRange.values[i][0];

            let hyperlink = {
                textToDisplay: cellText,
                screenTip: "Search Bing for '" + cellText + "'",
                address: "https://www.bing.com?q=" + cellText
            }
            cellRange.hyperlink = hyperlink;
        }

        await context.sync();
    });
'Excel.Range#getIntersectionOrNullObject:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-relationships.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const salesTable = sheet.tables.getItem("SalesTable");
        const dataRange = salesTable.getDataBodyRange();

        // We want the most recent quarter that has data, so
        // exclude quarters without data and get the last of
        // the remaining columns.
        const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
        const currentQuarterRange = usedDataRange.getLastColumn();

        // Asian and European teams have separate contests.
        const asianSalesRange = sheet.getRange("A2:E4");
        const europeanSalesRange = sheet.getRange("A5:E7");

        // The data for each chart is the intersection of the
        // current quarter column and the rows for the continent.
        const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
        const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

        // Must sync before you can test the output of *OrNullObject
        // method/property.
        await context.sync();

        if (asianContestRange.isNullObject) {
            // See the declaration of this method for how to
            // test this code path.
            reportMissingData("Asian");
        } else {
            createContinentChart(
                sheet,
                "Asian",
                asianContestRange,
                "A9",
                "F24"
            );
        }

        if (europeanContestRange.isNullObject) {
            // See the declaration of this method for how to
            // test this code path.
            reportMissingData("European");
        } else {
            createContinentChart(
                sheet,
                "European",
                europeanContestRange,
                "A25",
                "F40"
            );
        }

        await context.sync();
    });
'Excel.Range#getUsedRange:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-relationships.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const salesTable = sheet.tables.getItem("SalesTable");
        const dataRange = salesTable.getDataBodyRange();

        // We want the most recent quarter that has data, so
        // exclude quarters without data and get the last of
        // the remaining columns.
        const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
        const currentQuarterRange = usedDataRange.getLastColumn();

        // Asian and European teams have separate contests.
        const asianSalesRange = sheet.getRange("A2:E4");
        const europeanSalesRange = sheet.getRange("A5:E7");

        // The data for each chart is the intersection of the
        // current quarter column and the rows for the continent.
        const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
        const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

        // Must sync before you can test the output of *OrNullObject
        // method/property.
        await context.sync();

        if (asianContestRange.isNullObject) {
            // See the declaration of this method for how to
            // test this code path.
            reportMissingData("Asian");
        } else {
            createContinentChart(
                sheet,
                "Asian",
                asianContestRange,
                "A9",
                "F24"
            );
        }

        if (europeanContestRange.isNullObject) {
            // See the declaration of this method for how to
            // test this code path.
            reportMissingData("European");
        } else {
            createContinentChart(
                sheet,
                "European",
                europeanContestRange,
                "A25",
                "F40"
            );
        }

        await context.sync();
    });
'Excel.Range#removeDuplicates:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-remove-duplicates.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B2:D11");

        const deleteResult = range.removeDuplicates([0],true);    
        deleteResult.load();    
        await context.sync();

        console.log(deleteResult.removed + " entries with duplicate names removed.");
        console.log(deleteResult.uniqueRemaining + " entries with unique names remain in the range.");
    });
'Excel.Range#style:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/style.yaml

    await Excel.run(async (context) => {
        let worksheet = context.workbook.worksheets.getItem("Sample");
        let range = worksheet.getRange("A1:E1");

        // Apply built-in style. 
        // Styles are in the Home tab ribbon.
        range.style = Excel.BuiltInStyle.neutral;
        range.format.horizontalAlignment = "Right";

        await context.sync();
    });
'Excel.Range#getUsedRangeOrNullObject:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/used-range.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const salesTable = sheet.tables.getItem("SalesTable");
        const dataRange = salesTable.getDataBodyRange();

        // Pass true so only cells with values count as used
        const usedDataRange = dataRange.getUsedRangeOrNullObject(
            true /* valuesOnly */
        );

        //Must sync before reading value returned from *OrNullObject method/property.
        await context.sync();

        if (usedDataRange.isNullObject) {
            console.log("Need Data to Make Chart");
            console.log("To create a meaningful chart, press 'Fill the table' (or add names to the Product column and numbers to some of the other cells). Then press 'Try to create chart' again.");
        } else {
            const chart = sheet.charts.add(
                Excel.ChartType.columnClustered,
                dataRange,
                "Columns"
            );
            chart.setPosition("A15", "F30");
            chart.title.text = "Quarterly sales chart";
            chart.legend.position = "Right";
            chart.legend.format.fill.setSolidColor("white");
            chart.dataLabels.format.font.size = 15;
            chart.dataLabels.format.font.color = "black";
        }

        await context.sync();
    });
'Excel.Range#set:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/90-scenarios/multiple-property-set.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        const range = sheet.getRange("B2:E2");
        range.set({
            format: {
                fill: {
                    color: "#4472C4"
                },
                font: {
                    name: "Verdana",
                    color: "white"
                }
            }
        })
        range.format.autofitColumns();
        await context.sync();
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/90-scenarios/multiple-property-set.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        const sourceRange = sheet.getRange("B2:E2");
        sourceRange.load("format/fill/color, format/font/name, format/font/color");
        await context.sync();

        // Set properties based on the loaded and synced 
        // source range.
        const targetRange = sheet.getRange("B7:E7");
        targetRange.set(sourceRange); 
        targetRange.format.autofitColumns();
        await context.sync();
    });
'Excel.RangeAreas#format:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-areas.yaml

    await Excel.run(async (context) => {

        const sheet = context.workbook.worksheets.getActiveWorksheet();
        const usedRange = sheet.getUsedRange();

        // Find the ranges with formulas.
        const formulaRanges = usedRange.getSpecialCells("Formulas");
        formulaRanges.format.fill.color = "lightgreen";

        await context.sync();
    });
'Excel.RangeFormat#textOrientation:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-text-orientation.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B2:E2");

        // Set textOrientation to either an integer between -90 and 90
        // or to 180 for vertically-oriented text.
        range.format.textOrientation = 90;

        await context.sync();
    });
'Excel.RangeHyperlink#address:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-hyperlink.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Orders");

        let productsRange = sheet.getRange("A3:A5");
        productsRange.load("values");

        await context.sync();

        // Create a hyperlink to a URL 
        // for each product name in the first table.
        for (let i = 0; i < productsRange.values.length; i++) {
            let cellRange = productsRange.getCell(i, 0);
            let cellText = productsRange.values[i][0];

            let hyperlink = {
                textToDisplay: cellText,
                screenTip: "Search Bing for '" + cellText + "'",
                address: "https://www.bing.com?q=" + cellText
            }
            cellRange.hyperlink = hyperlink;
        }

        await context.sync();
    });
'Excel.RangeHyperlink#documentReference:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-hyperlink.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Orders");

        let productsRange = sheet.getRange("A9:A11");
        productsRange.load("values");

        await context.sync();

        // Create a hyperlink to a location within the workbook
        // for each product name in the second table.
        for (let i = 0; i < productsRange.values.length; i++) {
            let cellRange = productsRange.getCell(i, 0);
            let cellText = productsRange.values[i][0];

            let hyperlink = {
                textToDisplay: cellText,
                screenTip: "Navigate to the '" + cellText + "' worksheet",
                documentReference: cellText + "!A1"
            }
            cellRange.hyperlink = hyperlink;
        }

        await context.sync();
    });
'Excel.RangeHyperlink#screenTip:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-hyperlink.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Orders");

        let productsRange = sheet.getRange("A3:A5");
        productsRange.load("values");

        await context.sync();

        // Create a hyperlink to a URL 
        // for each product name in the first table.
        for (let i = 0; i < productsRange.values.length; i++) {
            let cellRange = productsRange.getCell(i, 0);
            let cellText = productsRange.values[i][0];

            let hyperlink = {
                textToDisplay: cellText,
                screenTip: "Search Bing for '" + cellText + "'",
                address: "https://www.bing.com?q=" + cellText
            }
            cellRange.hyperlink = hyperlink;
        }

        await context.sync();
    });
'Excel.RangeHyperlink#textToDisplay:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-hyperlink.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Orders");

        let productsRange = sheet.getRange("A3:A5");
        productsRange.load("values");

        await context.sync();

        // Create a hyperlink to a URL 
        // for each product name in the first table.
        for (let i = 0; i < productsRange.values.length; i++) {
            let cellRange = productsRange.getCell(i, 0);
            let cellText = productsRange.values[i][0];

            let hyperlink = {
                textToDisplay: cellText,
                screenTip: "Search Bing for '" + cellText + "'",
                address: "https://www.bing.com?q=" + cellText
            }
            cellRange.hyperlink = hyperlink;
        }

        await context.sync();
    });
'Excel.RemoveDuplicatesResult#uniqueRemaining:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-remove-duplicates.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B2:D11");

        const deleteResult = range.removeDuplicates([0],true);    
        deleteResult.load();    
        await context.sync();

        console.log(deleteResult.removed + " entries with duplicate names removed.");
        console.log(deleteResult.uniqueRemaining + " entries with unique names remain in the range.");
    });
'Excel.Runtime#enableEvents:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-disable-events.yaml

    await Excel.run(async (context) => {
        context.runtime.load("enableEvents");
        await context.sync();

        // check if events are enabled and toggle accordingly
        const eventBoolean = !context.runtime.enableEvents
        context.runtime.enableEvents = eventBoolean;
        if (eventBoolean) {
            console.log("Events are currently on.");
        } else {
            console.log("Events are currently off.");
        }

        await context.sync();
    });
'Excel.SettableCellProperties#style:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/cell-properties.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // Creating the SettableCellProperties objects to use for the range.
        // In your add-in, these should be created once, outside the function.
        const topHeaderProps: Excel.SettableCellProperties = {
            // The style property takes a string matching the name of an Excel style.
            // Built-in style names are listed in the `BuiltInStyle` enum.
            // Note that a style will overwrite any formatting,
            // so do not use the format property with the style property.
            style: "Heading1"
        };

        const headerProps: Excel.SettableCellProperties = {
            // Any subproperties of format that are not set will not be changed when these cell properties are set.
            format: {
                fill: {
                    color: "Blue"
                },
                font: {
                    color: "White",
                    bold: true
                }
            }
        };

        const nonApplicableProps: Excel.SettableCellProperties = {
            format: {
                fill: {
                    pattern: Excel.FillPattern.gray25
                },
                font: {
                    color: "Gray",
                    italic: true
                }
            }
        };

        const matchupScoreProps: Excel.SettableCellProperties = {
            format: {
                borders: {
                    bottom: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    left: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    right: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    top: {
                        style: Excel.BorderLineStyle.continuous
                    }
                }
            }
        };

        const range = sheet.getRange("A1:E5");

        // You can use empty JSON objects to avoid changing a cell's properties.
        range.setCellProperties([
            [topHeaderProps, {}, {}, {}, {}],
            [{}, {}, headerProps, headerProps, headerProps],
            [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]
        ]);

        sheet.getUsedRange().format.autofitColumns();
        await context.sync();
    });
'Excel.Setting#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/50-workbook/create-get-change-delete-settings.yaml

    await Excel.run(async (context) => {
        const settings = context.workbook.settings;
        let needsReview = settings.getItem("NeedsReview");
        needsReview.delete();
        needsReview = settings.getItemOrNullObject("NeedsReview");

        await context.sync();

        if (needsReview.isNullObject) {
            console.log("The setting has been deleted");
        } else {
            console.log("The setting was not deleted");
        }

        await context.sync();
    });
'Excel.SettingCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml

    await Excel.run(async (context) => {
        const settings = context.workbook.settings; 
        settings.onSettingsChanged.add(onChangedSetting);

        await context.sync();
        console.log("Settings changed handler registered.");
    });
'Excel.SettingCollection#onSettingsChanged:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml

    await Excel.run(async (context) => {
        const settings = context.workbook.settings; 
        settings.onSettingsChanged.add(onChangedSetting);

        await context.sync();
        console.log("Settings changed handler registered.");
    });
'Excel.SettingCollection#getItemOrNullObject:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/50-workbook/create-get-change-delete-settings.yaml

    await Excel.run(async (context) => {
        const settings = context.workbook.settings;
        let needsReview = settings.getItem("NeedsReview");
        needsReview.delete();
        needsReview = settings.getItemOrNullObject("NeedsReview");

        await context.sync();

        if (needsReview.isNullObject) {
            console.log("The setting has been deleted");
        } else {
            console.log("The setting was not deleted");
        }

        await context.sync();
    });
'Excel.Shape#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/44-shape/shape-create-and-delete.yaml

    await Excel.run(async (context) => {
        context.workbook.worksheets.getItemOrNullObject("Shapes").delete();
        const sheet = context.workbook.worksheets.add("Shapes");

        const shapes = sheet.shapes;

        // load all the shapes in the collection without loading their properties
        shapes.load("items/$none");
        await context.sync();

        shapes.items.forEach((shape) => shape.delete());
        await context.sync();
    });
'Excel.Shape#fill:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/44-shape/shape-create-and-delete.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.addGeometricShape(Excel.GeometricShapeType.smileyFace);
        shape.left = 300;
        shape.top = 100;
        shape.height = 100;
        shape.width = 100;
        shape.fill.foregroundColor = "yellow"
        await context.sync();
    });
'Excel.Shape#rotation:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/44-shape/shape-create-and-delete.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.addGeometricShape(Excel.GeometricShapeType.triangle);
        shape.left = 100;
        shape.top = 300;
        shape.height = 150;
        shape.width = 200;
        shape.rotation = 45;
        shape.fill.clear();
        await context.sync();
    });
'Excel.Shape#group:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/44-shape/shape-groups.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");

        const shapeGroup = sheet.shapes.getItem("Group").group;
        shapeGroup.ungroup();
        console.log("Shapes ungrouped");

        await context.sync();
    });
'Excel.Shape#getAsImage:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/44-shape/shape-images.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.getItem("Image");
        const result = shape.getAsImage(Excel.PictureFormat.png);
        await context.sync();

        const imageString = result.value;
        // Your add-in would save this string as a .png file.
        console.log("The image's base64-encoded string: " + imageString);
    });
'Excel.Shape#incrementRotation:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/44-shape/shape-images.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.getItem("Image");
        shape.incrementRotation(180);
        await context.sync();
    });
'Excel.Shape#line:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/44-shape/shape-lines.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const line = shapes.getItem("StraightLine").line;
        line.beginArrowheadLength = Excel.ArrowheadLength.long;
        line.beginArrowheadWidth = Excel.ArrowheadWidth.wide;
        line.beginArrowheadStyle = Excel.ArrowheadStyle.oval;

        line.endArrowheadLength = Excel.ArrowheadLength.long;
        line.endArrowheadWidth = Excel.ArrowheadWidth.wide;
        line.endArrowheadStyle = Excel.ArrowheadStyle.triangle;

        await context.sync();
    });
'Excel.Shape#incrementLeft:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/44-shape/shape-move-and-order.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.getItem("Square")
        shape.incrementLeft(-25);
        await context.sync();
    });
'Excel.Shape#incrementTop:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/44-shape/shape-move-and-order.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.getItem("Pentagon")
        shape.incrementTop(25);
        await context.sync();
    });
'Excel.Shape#scaleHeight:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/44-shape/shape-move-and-order.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.getItem("Octagon")
        shape.lockAspectRatio = true;
        shape.scaleHeight(1.25, Excel.ShapeScaleType.currentSize);
        await context.sync();
    });
'Excel.Shape#lockAspectRatio:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/44-shape/shape-move-and-order.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.getItem("Octagon")
        shape.lockAspectRatio = true;
        shape.scaleHeight(1.25, Excel.ShapeScaleType.currentSize);
        await context.sync();
    });
'Excel.Shape#setZOrder:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/44-shape/shape-move-and-order.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.getItem("Octagon")
        shape.setZOrder(Excel.ShapeZOrder.sendBackward);
        await context.sync();
    });
'Excel.ShapeCollection#addGeometricShape:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/44-shape/shape-create-and-delete.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.addGeometricShape(Excel.GeometricShapeType.hexagon);
        shape.left = 5;
        shape.top = 5;
        shape.height = 175;
        shape.width = 200;
        await context.sync();
    });
'Excel.ShapeCollection#addGroup:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/44-shape/shape-groups.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const square = sheet.shapes.getItem("Square");
        const pentagon = sheet.shapes.getItem("Pentagon");
        const octagon = sheet.shapes.getItem("Octagon");

        const shapeGroup = sheet.shapes.addGroup([square, pentagon, octagon]);
        shapeGroup.name = "Group";
        console.log("Shapes grouped");

        await context.sync();
    });
'Excel.ShapeCollection#addImage:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/44-shape/shape-images.yaml

    const myFile = <HTMLInputElement>document.getElementById("selectedFile");

    const reader = new FileReader();


    reader.onload = (event) => {
        Excel.run((context) => {
            const startIndex = reader.result.toString().indexOf("base64,");
            const mybase64 = reader.result.toString().substr(startIndex + 7);
            const sheet = context.workbook.worksheets.getItem("Shapes");
            const image = sheet.shapes.addImage(mybase64);
            image.name = "Image";
            return context.sync();
        });
    };


    // Read in the image file as a data URL.

    reader.readAsDataURL(myFile.files[0]);
'Excel.ShapeCollection#addLine:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/44-shape/shape-lines.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const line = shapes.addLine(200, 50, 300, 150, Excel.ConnectorType.straight);
        line.name = "StraightLine";
        await context.sync();
    });
'Excel.ShapeCollection#addTextBox:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/44-shape/shape-textboxes.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const textbox = shapes.addTextBox("A box with text");
        textbox.left = 100;
        textbox.top = 100;
        textbox.height = 20;
        textbox.width = 175;
        textbox.name = "Textbox";
        await context.sync();
    });
'Excel.ShapeGroup#ungroup:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/44-shape/shape-groups.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");

        const shapeGroup = sheet.shapes.getItem("Group").group;
        shapeGroup.ungroup();
        console.log("Shapes ungrouped");

        await context.sync();
    });
'Excel.ShowAsRule#baseItem:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-calculations.yaml

    await Excel.run(async (context) => {
        const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
        const farmDataHierarchy: Excel.DataPivotHierarchy = pivotTable.dataHierarchies.getItem("Sum of Crates Sold at Farm");
        const wholesaleDataHierarchy: Excel.DataPivotHierarchy = pivotTable.dataHierarchies.getItem("Sum of Crates Sold Wholesale");

        farmDataHierarchy.load("showAs");
        wholesaleDataHierarchy.load("showAs");
        await context.sync();

        // show the difference between crate sales of the "A Farms" and the other farms
        // this difference is both aggregated and shown for individual fruit types (where applicable)
        let farmShowAs = farmDataHierarchy.showAs;
        farmShowAs.calculation = Excel.ShowAsCalculation.differenceFrom;
        farmShowAs.baseField = pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm");
        farmShowAs.baseItem = pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm").items.getItem("A Farms");
        farmDataHierarchy.showAs = farmShowAs;

        let wholesaleShowAs = wholesaleDataHierarchy.showAs;
        wholesaleShowAs.calculation = Excel.ShowAsCalculation.differenceFrom;
        wholesaleShowAs.baseField = pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm");
        wholesaleShowAs.baseItem = pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm").items.getItem("A Farms");
        wholesaleDataHierarchy.showAs = wholesaleShowAs;
        await context.sync();
    });
'Excel.Slicer#style:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-slicer.yaml

    await Excel.run(async (context) => {
        const slicer = context.workbook.slicers.getItem("Fruit Slicer");
        slicer.style = "SlicerStyleLight6";
        await context.sync();
    });
'Excel.Slicer#selectItems:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-slicer.yaml

    await Excel.run(async (context) => {
        const slicer = context.workbook.slicers.getItem("Fruit Slicer");
        slicer.selectItems(["Lemon", "Lime", "Orange"]);
        await context.sync();
    });
'Excel.Slicer#clearFilters:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-slicer.yaml

    await Excel.run(async (context) => {
        const slicer = context.workbook.slicers.getItem("Fruit Slicer");
        slicer.clearFilters();
        await context.sync();
    });
'Excel.Slicer#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-slicer.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        sheet.slicers.getItemAt(0).delete();
        await context.sync();
    });
'Excel.SlicerCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-slicer.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Pivot");
        const slicer = sheet.slicers.add(
            "Farm Sales", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */
            "Type" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */
        );
        slicer.name = "Fruit Slicer";
        await context.sync();
    });
'Excel.SlicerCollection#getItem:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-slicer.yaml

    await Excel.run(async (context) => {
        const slicer = context.workbook.slicers.getItem("Fruit Slicer");
        slicer.caption = "Fruit Types";
        slicer.left = 395;
        slicer.top = 15;
        slicer.height = 135;
        slicer.width = 150;
        await context.sync();
    });
'Excel.Style#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/style.yaml

    await Excel.run(async (context) => {
        let style = context.workbook.styles.getItem("Diagonal Orientation Style");

        // Delete the diagonal orientation style from the style collection.
        // Styles are in the Home tab ribbon.
        style.delete();

        await context.sync();

        console.log("Successfully deleted the diagonal orientation style from the Home tab ribbon.");
    });
'Excel.Style#font:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/style.yaml

    await Excel.run(async (context) => {
        let style = context.workbook.styles.getItem("Normal");
        style.font.load("bold, color, italic, name, size");
        style.fill.load("color");

        await context.sync();

        console.log("Bold: " + style.font.bold);
        console.log("Font color: " + style.font.color);
        console.log("Italic: " + style.font.italic);
        console.log("Name: " + style.font.name);
        console.log("Size: " + style.font.size);
        console.log("Fill color: " + style.fill.color);
    });
'Excel.Style#horizontalAlignment:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/style.yaml

    await Excel.run(async (context) => {
        let worksheet = context.workbook.worksheets.getItem("Sample");
        let range = worksheet.getRange("A1:E1");

        // Apply built-in style. 
        // Styles are in the Home tab ribbon.
        range.style = Excel.BuiltInStyle.neutral;
        range.format.horizontalAlignment = "Right";

        await context.sync();
    });
'Excel.Style#load:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/style.yaml

    await Excel.run(async (context) => {
        let style = context.workbook.styles.getItem("Diagonal Orientation Style");            
        style.load("textOrientation, horizontalAlignment, autoIndent, readingOrder, wrapText, includeProtection, shrinkToFit, locked");

        await context.sync();

        console.log("Orientation: " + style.textOrientation);
        console.log("Horizontal alignment: " + style.horizontalAlignment);
        console.log("Add indent: " + style.autoIndent);
        console.log("Reading order: " + style.readingOrder);
        console.log("Wrap text: " + style.wrapText);
        console.log("Include protection: " + style.includeProtection);
        console.log("Shrink to fit: " + style.shrinkToFit);
        console.log("Style locked: " + style.locked);
    });
'Excel.StyleCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/style.yaml

    await Excel.run(async (context) => {
        let styles = context.workbook.styles;

        // Add a new style to the style collection.
        // Styles is in the Home tab ribbon.
        styles.add("Diagonal Orientation Style");
              
        let newStyle = styles.getItem("Diagonal Orientation Style");
        
        // The "Diagonal Orientation Style" properties.
        newStyle.textOrientation = 38;
        newStyle.autoIndent = true;
        newStyle.includeProtection = true;
        newStyle.shrinkToFit = true;
        newStyle.locked = false;
        
        await context.sync();

        console.log("Successfully added a new style with diagonal orientation to the Home tab ribbon.");
    });
'Excel.StyleCollection#getItem:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/style.yaml

    await Excel.run(async (context) => {
        let styles = context.workbook.styles;

        // Add a new style to the style collection.
        // Styles is in the Home tab ribbon.
        styles.add("Diagonal Orientation Style");
              
        let newStyle = styles.getItem("Diagonal Orientation Style");
        
        // The "Diagonal Orientation Style" properties.
        newStyle.textOrientation = 38;
        newStyle.autoIndent = true;
        newStyle.includeProtection = true;
        newStyle.shrinkToFit = true;
        newStyle.locked = false;
        
        await context.sync();

        console.log("Successfully added a new style with diagonal orientation to the Home tab ribbon.");
    });
'Excel.Table#onChanged:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-table-changed.yaml

    await Excel.run(async (context) => {
        let table = context.workbook.tables.getItemAt(0);
        table.onChanged.add(onChange);

        await context.sync();
        console.log("A handler has been registered for the onChanged event");
    });
'Excel.Table#onSelectionChanged:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-table-changed.yaml

    await Excel.run(async (context) => {
        let table = context.workbook.tables.getItemAt(0);
        table.onSelectionChanged.add(onSelectionChange);

        await context.sync();
        console.log("A handler has been registered for table onSelectionChanged event");
    });
'Excel.TableChangedEventArgs#details:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/data-change-event-details.yaml

    async function onTableChanged(eventArgs: Excel.TableChangedEventArgs) {
        await Excel.run(async (context) => {
            const details = eventArgs.details;
            const address = eventArgs.address;

            console.log(`Change at ${address}: was ${details.valueBefore}(${details.valueTypeBefore}),`
              + ` now is ${details.valueAfter}(${details.valueTypeAfter})`);
        });
    }
'Excel.TableChangedEventArgs#tableId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-tablecollection-changed.yaml

    async function onChange(event) {
        await Excel.run(async (context) => {
            let table = context.workbook.tables.getItem(event.tableId);
            let worksheet = context.workbook.worksheets.getItem(event.worksheetId);
            worksheet.load("name");

            await context.sync();

            console.log("Handler for table collection onChanged event has been triggered. Data changed address: " + event.address);
            console.log("Table Id : " + event.tableId);
            console.log("Worksheet Id : " + worksheet.name);
        });
    }
'Excel.TableChangedEventArgs#worksheetId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-tablecollection-changed.yaml

    async function onChange(event) {
        await Excel.run(async (context) => {
            let table = context.workbook.tables.getItem(event.tableId);
            let worksheet = context.workbook.worksheets.getItem(event.worksheetId);
            worksheet.load("name");

            await context.sync();

            console.log("Handler for table collection onChanged event has been triggered. Data changed address: " + event.address);
            console.log("Table Id : " + event.tableId);
            console.log("Worksheet Id : " + worksheet.name);
        });
    }
'Excel.TableCollection#onChanged:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-tablecollection-changed.yaml

    await Excel.run(async (context) => {
        let tables = context.workbook.tables;
        tables.onChanged.add(onChange);

        await context.sync();
        console.log("A handler has been registered for the table collection onChanged event");
    });
'Excel.TableSelectionChangedEventArgs#address:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-table-changed.yaml

    async function onSelectionChange(args) {
        await Excel.run(async (context) => {
            console.log("Handler for table onSelectionChanged event has been triggered. The new selection is: " + args.address);
        });
    }
'Excel.TextConditionalFormat#format:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B16:D18");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.containsText);
        conditionalFormat.textComparison.format.font.color = "red";
        conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

        await context.sync();
    });
'Excel.TextConditionalFormat#rule:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B16:D18");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.containsText);
        conditionalFormat.textComparison.format.font.color = "red";
        conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

        await context.sync();
    });
'Excel.TextFrame#deleteText:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/44-shape/shape-textboxes.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const textbox = shapes.getItem("Textbox");
        textbox.textFrame.deleteText();
        await context.sync();
    });
'Excel.Workbook#properties:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/26-document/properties.yaml

    await Excel.run(async (context) => {
        let titleValue = "Excel document properties API";
        let subjectValue = "Set and get document properties";
        let keywordsValue = "Set and get operations";
        let commentsValue = "This is an Excel document properties API code sample";
        let categoryValue = "Office Add-ins";
        let managerValue = "John";
        let companyValue = "Microsoft";

        let docProperties = context.workbook.properties;

        // Set the writeable document properties.
        docProperties.title = titleValue;
        docProperties.subject = subjectValue;
        docProperties.keywords = keywordsValue;
        docProperties.comments = commentsValue;
        docProperties.category = categoryValue;
        docProperties.manager = managerValue;
        docProperties.company = companyValue;

        await context.sync();

        console.log("Set the following document properties: title, subject, keywords, comments, category, manager, company.");
    });
'Excel.Workbook#pivotTables:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-get-pivottables.yaml

    await Excel.run(async (context) => {
      // Get the names of all the PivotTables in the workbook.
      const pivotTables = context.workbook.pivotTables;
      pivotTables.load("name");
      await context.sync();

      // Display the names in the console.
      console.log("PivotTables in the workbook:")
      pivotTables.items.forEach((pivotTable) => {
        console.log(`\t${pivotTable.name}`);
      });
    });
'Excel.Workbook#getSelectedRanges:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-areas.yaml

    await Excel.run(async (context) => {

        const selectedRanges = context.workbook.getSelectedRanges();
        selectedRanges.format.fill.color = "lightblue";

        await context.sync();
    })
'Excel.Workbook#styles:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/style.yaml

    await Excel.run(async (context) => {
        let styles = context.workbook.styles;

        // Add a new style to the style collection.
        // Styles is in the Home tab ribbon.
        styles.add("Diagonal Orientation Style");
              
        let newStyle = styles.getItem("Diagonal Orientation Style");
        
        // The "Diagonal Orientation Style" properties.
        newStyle.textOrientation = 38;
        newStyle.autoIndent = true;
        newStyle.includeProtection = true;
        newStyle.shrinkToFit = true;
        newStyle.locked = false;
        
        await context.sync();

        console.log("Successfully added a new style with diagonal orientation to the Home tab ribbon.");
    });
'Excel.Workbook#getActiveCell:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/50-workbook/workbook-get-active-cell.yaml

    await Excel.run(async (context) => {

        let myWorkbook = context.workbook;
        let activeCell = myWorkbook.getActiveCell();
        activeCell.load("address");

        await context.sync();
        
        console.log("The active cell is " + activeCell.address);
    });
'Excel.Workbook#close:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/50-workbook/workbook-save-and-close.yaml

    await Excel.run(async (context) => {
        context.workbook.close(Excel.CloseBehavior.save);
    });
'Excel.Workbook#save:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/50-workbook/workbook-save-and-close.yaml

    await Excel.run(async (context) => {
        context.workbook.save(Excel.SaveBehavior.save);
    });
'Excel.WorkbookProtection#protect:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/50-workbook/data-protection.yaml

    await Excel.run(async (context) => {
        let workbook = context.workbook;
        workbook.load("protection/protected");

        await context.sync();

        if (!workbook.protection.protected) {
            workbook.protection.protect();
        }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/50-workbook/data-protection.yaml

    let password = await passwordHandler();

    passwordHelper(password);

    await Excel.run(async (context) => {
        let workbook = context.workbook;
        workbook.load("protection/protected");

        await context.sync();

        if (!workbook.protection.protected) {
            workbook.protection.protect(password);
        }
    });
'Excel.WorkbookProtection#unprotect:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/50-workbook/data-protection.yaml

    await Excel.run(async (context) => {
        let workbook = context.workbook;
        workbook.protection.unprotect();
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/50-workbook/data-protection.yaml

    let password = await passwordHandler();

    passwordHelper(password);

    await Excel.run(async (context) => {
        let workbook = context.workbook;
        workbook.protection.unprotect(password);
    });
'Excel.WorkbookRangeAreas#areas:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/direct-precedents.yaml

    await Excel.run(async (context) => {
      // Precedents are cells referenced by the formula in a cell.
      let range = context.workbook.getActiveCell();
      let directPrecedents = range.getDirectPrecedents();
      range.load("address");
      directPrecedents.areas.load("address");
      await context.sync();

      console.log(`Direct precedent cells of ${range.address}:`);

      // Use the direct precedents API to loop through precedents of the active cell. 
      for (var i = 0; i < directPrecedents.areas.items.length; i++) {
        // Highlight and console the address of each precedent cell.
        directPrecedents.areas.items[i].format.fill.color = "Yellow";
        console.log(`  ${directPrecedents.areas.items[i].address}`);
      }
      await context.sync();
    });
'Excel.Worksheet#customProperties:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/26-document/custom-properties.yaml

    await Excel.run(async (context) => {
      // Load the keys and values of all custom properties in the current worksheet.
      const customWorksheetProperties = context.workbook.worksheets.getActiveWorksheet().customProperties;
      customWorksheetProperties.load(["key", "value"]);
      await context.sync();

      // Log each custom property to the console.
      // Note that your document may have more properties than those you have set using this snippet.
      customWorksheetProperties.items.forEach((property) => {
        console.log(`${property.key}:${property.value}`);
      });
    });
'Excel.Worksheet#onRowSorted:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/event-column-and-row-sort.yaml

    await Excel.run(async (context) => {
        console.log("Adding row handler");
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // This will fire whenever a row has been moved as the result of a sort action.
        sheet.onRowSorted.add((event) => {
            return Excel.run((context) => {
                console.log("Row sorted: " + event.address);
                const sheet = context.workbook.worksheets.getActiveWorksheet();

                // Clear formatting for section, then highlight the sorted area.
                sheet.getRange("A1:E5").format.fill.clear();
                if (event.address !== "") {
                    sheet.getRanges(event.address).format.fill.color = "yellow";
                }

                return context.sync();
            });
        });
    });
'Excel.Worksheet#onColumnSorted:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/event-column-and-row-sort.yaml

    await Excel.run(async (context) => {
        console.log("Adding column handler");
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // This will fire whenever a column has been moved as the result of a sort action.
        sheet.onColumnSorted.add((event) => {
            return Excel.run((context) => {
                console.log("Column sorted: " + event.address);
                const sheet = context.workbook.worksheets.getActiveWorksheet();

                // Clear formatting for section, then highlight the sorted area.
                sheet.getRange("A1:E5").format.fill.clear();
                if (event.address !== "") {
                    sheet.getRanges(event.address).format.fill.color = "yellow";
                }

                return context.sync();
            });
        });
    });
'Excel.Worksheet#onChanged:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-worksheet.yaml

    await Excel.run(async (context) => {
        let sheet = context.workbook.worksheets.getItem("Sample");
        sheet.onChanged.add(onChange);
        await context.sync();

        console.log("Added a worksheet-level data-changed event handler.");
    });
'Excel.Worksheet#onSingleClicked:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/event-worksheet-single-click.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        sheet.onSingleClicked.add((event) => {
            return Excel.run((context) => {
                console.log(`Click detected at ${event.address} (pixel offset from upper-left cell corner: ${event.offsetX}, ${event.offsetY})`);
                return context.sync();
            });
        });

        console.log("The worksheet click handler is registered.");

        await context.sync();
    });
'Excel.Worksheet#showOutlineLevels:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/outline.yaml

    Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // This collapses the entire outline.
        sheet.showOutlineLevels(1, 1);
        await context.sync();
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/outline.yaml

    Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // This shows the top 3 outline levels; collapsing any additional sublevels.
        sheet.showOutlineLevels(3, 3);
        await context.sync();
    });
'Excel.Worksheet#pivotTables:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-get-pivottables.yaml

    await Excel.run(async (context) => {
      // Get the names of all the PivotTables in the current worksheet.
      const pivotTables = context.workbook.worksheets.getActiveWorksheet().pivotTables;
      pivotTables.load("name");
      await context.sync();

      // Display the names in the console.
      console.log("PivotTables in the current worksheet:")
      pivotTables.items.forEach((pivotTable) => {
        console.log(`\t${pivotTable.name}`);
      });
    });
'Excel.Worksheet#slicers:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-slicer.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Pivot");
        const slicer = sheet.slicers.add(
            "Farm Sales", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */
            "Type" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */
        );
        slicer.name = "Fruit Slicer";
        await context.sync();
    });
'Excel.Worksheet#getRanges:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-areas.yaml

    await Excel.run(async (context) => {

        const sheet = context.workbook.worksheets.getActiveWorksheet();
        const specifiedRanges = sheet.getRanges("D3:D5, G3:G5");
        specifiedRanges.format.fill.color = "pink";

        await context.sync();
    })
'Excel.Worksheet#autoFilter:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/worksheet-auto-filter.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        const farmData = sheet.getUsedRange();

        // This filter will only show the rows with the top 25% of values in column 3.
        sheet.autoFilter.apply(farmData, 3, { criterion1: "25", filterOn: Excel.FilterOn.topPercent });
        await context.sync();
    });
'Excel.Worksheet#copy:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/worksheet-copy.yaml

    await Excel.run(async (context) => {

        let myWorkbook = context.workbook;
        let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();
        let copiedSheet = sampleSheet.copy("End")

        sampleSheet.load("name");
        copiedSheet.load("name");

        await context.sync();

        console.log("'" + sampleSheet.name + "' was copied to '" + copiedSheet.name + "'")
    });
'Excel.Worksheet#findAllOrNullObject:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/worksheet-find-all.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const foundRanges = sheet.findAllOrNullObject("Complete", {
            completeMatch: true,
            matchCase: false
        });

        await context.sync();

        if (foundRanges.isNullObject) {
            console.log("No complete projects");
        } else {
            foundRanges.format.fill.color = "green"
        }
    });
'Excel.Worksheet#showGridlines:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/gridlines.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        sheet.showGridlines = true;

        await context.sync();
    });
'Excel.Worksheet#getNext:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml

    await Excel.run(async (context) => {
        const sheets = context.workbook.worksheets;

        // We don't want to include the default worksheet that was created
        // when the workbook was created, so our "firstSheet" will be the one
        // after the literal first. Note chaining of navigation methods.
        const firstSheet = sheets.getFirst().getNext();
        const lastSheet = sheets.getLast();
        const firstTaxRateRange = firstSheet.getRange("B2");
        const lastTaxRateRange = lastSheet.getRange("B2");

        firstSheet.load("name");
        lastSheet.load("name");
        firstTaxRateRange.load("text");
        lastTaxRateRange.load("text");

        await context.sync();

        let firstYear = firstSheet.name.substr(5, 4);
        let lastYear = lastSheet.name.substr(5, 4);
        console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

        await context.sync();
    });
'Excel.Worksheet#getPrevious:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml

    await Excel.run(async (context) => {
        const sheets = context.workbook.worksheets;
        const currentSheet = sheets.getActiveWorksheet();
        const previousYearSheet = currentSheet.getPrevious();
        const currentTaxDueRange = currentSheet.getRange("C2");
        const previousTaxDueRange = previousYearSheet.getRange("C2");

        currentSheet.load("name");
        previousYearSheet.load("name");
        currentTaxDueRange.load("text");
        previousTaxDueRange.load("text");

        await context.sync();

        let currentYear = currentSheet.name.substr(5, 4);
        let previousYear = previousYearSheet.name.substr(5, 4);
        console.log("Two Year Tax Due Comparison", `Tax due for ${currentYear} was ${currentTaxDueRange.text[0][0]}\nTax due for ${previousYear} was ${previousTaxDueRange.text[0][0]}`)

        await context.sync();
    });
'Excel.Worksheet#tabColor:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/tab-color.yaml

    await Excel.run(async (context) => {
        const activeSheet = context.workbook.worksheets.getActiveWorksheet();
        activeSheet.tabColor = "#FF0000";

        await context.sync();
    });
'Excel.WorksheetAddedEventArgs#worksheetId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml

    async function onWorksheetAdd(event) {
        await Excel.run(async (context) => {
            console.log(
                "Handler for worksheet onAdded event has been triggered. Newly added worksheet Id : " +
                event.worksheetId
            );
        });
    }
'Excel.WorksheetCollection#onActivated:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml

    await Excel.run(async (context) => {
        let sheets = context.workbook.worksheets;
        sheets.onActivated.add(onActivate);

        await context.sync();
        console.log("A handler has been registered for the OnActivate event.");
    });
'Excel.WorksheetCollection#onAdded:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml

    await Excel.run(async (context) => {
        let sheet = context.workbook.worksheets;
        sheet.onAdded.add(onWorksheetAdd);

        await context.sync();
        console.log("A handler has been registered for the OnAdded event.");
    });
'Excel.WorksheetCollection#onDeactivated:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml

    await Excel.run(async (context) => {
        let sheets = context.workbook.worksheets;
        sheets.onDeactivated.add(onDeactivate);

        await context.sync();
        console.log("A handler has been registered for the OnDeactivate event.");
    });
'Excel.WorksheetCollection#addFromBase64:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/85-preview-apis/workbook-insert-external-worksheets.yaml

    const myFile = <HTMLInputElement>document.getElementById("file");

    const reader = new FileReader();


    reader.onload = (event) => {
        Excel.run((context) => {
            // strip off the metadata before the base64-encoded string
            const startIndex = reader.result.toString().indexOf("base64,");
            const workbookContents = reader.result.toString().substr(startIndex + 7);

            const sheets = context.workbook.worksheets;
            sheets.addFromBase64(
                workbookContents,
                null, // get all the worksheets 
                Excel.WorksheetPositionType.end // insert them after the current workbook's worksheets
                );
            return context.sync();
        });
    };


    // read in the file as a data URL so we can parse the base64-encoded string

    reader.readAsDataURL(myFile.files[0]);
'Excel.WorksheetCollection#getFirst:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml

    await Excel.run(async (context) => {
        const sheets = context.workbook.worksheets;

        // We don't want to include the default worksheet that was created
        // when the workbook was created, so our "firstSheet" will be the one
        // after the literal first. Note chaining of navigation methods.
        const firstSheet = sheets.getFirst().getNext();
        const lastSheet = sheets.getLast();
        const firstTaxRateRange = firstSheet.getRange("B2");
        const lastTaxRateRange = lastSheet.getRange("B2");

        firstSheet.load("name");
        lastSheet.load("name");
        firstTaxRateRange.load("text");
        lastTaxRateRange.load("text");

        await context.sync();

        let firstYear = firstSheet.name.substr(5, 4);
        let lastYear = lastSheet.name.substr(5, 4);
        console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

        await context.sync();
    });
'Excel.WorksheetCollection#getLast:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml

    await Excel.run(async (context) => {
        const sheets = context.workbook.worksheets;

        // We don't want to include the default worksheet that was created
        // when the workbook was created, so our "firstSheet" will be the one
        // after the literal first. Note chaining of navigation methods.
        const firstSheet = sheets.getFirst().getNext();
        const lastSheet = sheets.getLast();
        const firstTaxRateRange = firstSheet.getRange("B2");
        const lastTaxRateRange = lastSheet.getRange("B2");

        firstSheet.load("name");
        lastSheet.load("name");
        firstTaxRateRange.load("text");
        lastTaxRateRange.load("text");

        await context.sync();

        let firstYear = firstSheet.name.substr(5, 4);
        let lastYear = lastSheet.name.substr(5, 4);
        console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

        await context.sync();
    });
'Excel.WorksheetCustomPropertyCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/26-document/custom-properties.yaml

    await Excel.run(async (context) => {
      // Get the key/value pair from the task pane.
      const userKey = $("#key").text();
      const userValue = $("#value").text();

      // Add the custom property.
      const customWorksheetProperties = context.workbook.worksheets.getActiveWorksheet().customProperties;
      customWorksheetProperties.add(userKey, userValue);

      await context.sync();

      console.log(`Successfully set custom worksheet property ${userKey}:${userValue}.`);
    });
'Excel.WorksheetFreezePanes#freezeAt:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/worksheet-freeze-panes.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        // Freeze the specified range in top-and-left-most pane of the worksheet.
        sheet.freezePanes.freezeAt(sheet.getRange("H2:K5"));

        await context.sync();
    });
'Excel.WorksheetFreezePanes#freezeColumns:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/worksheet-freeze-panes.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        // Freeze the first two columns in the worksheet.
        sheet.freezePanes.freezeColumns(2);

        await context.sync();
    });
'Excel.WorksheetFreezePanes#freezeRows:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/worksheet-freeze-panes.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        // Freeze the top two rows in the worksheet.
        sheet.freezePanes.freezeRows(2);

        await context.sync();
    });
'Excel.WorksheetFreezePanes#getLocationOrNullObject:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/worksheet-freeze-panes.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const frozenRange = sheet.freezePanes.getLocationOrNullObject();
        frozenRange.load("address");

        await context.sync();

        if (frozenRange.isNullObject) {
            console.log(`The worksheet does not contain a frozen pane.`);
        } else {
            console.log(`The address of the frozen range (cells that are frozen in the top-and-left-most pane) is "${frozenRange.address}"`);
        }
    });
'Excel.WorksheetFreezePanes#unfreeze:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/worksheet-freeze-panes.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        sheet.freezePanes.unfreeze();

        await context.sync();
    });
'Excel.WorksheetProtection#protect:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/50-workbook/data-protection.yaml

    await Excel.run(async (context) => {
        let activeSheet = context.workbook.worksheets.getActiveWorksheet();
        activeSheet.load("protection/protected");

        await context.sync();

        if (!activeSheet.protection.protected) {
            activeSheet.protection.protect();
        }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/50-workbook/data-protection.yaml

    let password = await passwordHandler();

    passwordHelper(password);

    await Excel.run(async (context) => {
        let activeSheet = context.workbook.worksheets.getActiveWorksheet();
        activeSheet.load("protection/protected");

        await context.sync();

        if (!activeSheet.protection.protected) {
            activeSheet.protection.protect(null, password);
        }
    });
'Excel.WorksheetProtection#unprotect:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/50-workbook/data-protection.yaml

    await Excel.run(async (context) => {
        let activeSheet = context.workbook.worksheets.getActiveWorksheet();
        activeSheet.protection.unprotect();
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/50-workbook/data-protection.yaml

    let password = await passwordHandler();

    passwordHelper(password);

    await Excel.run(async (context) => {
        let activeSheet = context.workbook.worksheets.getActiveWorksheet();
        activeSheet.protection.unprotect(password);
    });
'Excel.WorksheetSingleClickedEventArgs#address:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/event-worksheet-single-click.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        sheet.onSingleClicked.add((event) => {
            return Excel.run((context) => {
                console.log(`Click detected at ${event.address} (pixel offset from upper-left cell corner: ${event.offsetX}, ${event.offsetY})`);
                return context.sync();
            });
        });

        console.log("The worksheet click handler is registered.");

        await context.sync();
    });
'Office.RoamingSettings#get:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/10-roaming-settings/roaming-settings.yaml

    var settingName = $("#settingName").val();

    var settingValue = Office.context.roamingSettings.get(settingName);

    $("#settingValue").val(settingValue);

    console.log(`The value of setting "${settingName}" is "${settingValue}".`);
'Office.RoamingSettings#set:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/10-roaming-settings/roaming-settings.yaml

    var settingName = $("#settingName").val();

    var settingValue = $("#settingValue").val();

    Office.context.roamingSettings.set(settingName, settingValue);

    console.log(`Setting "${settingName}" set to value "${settingValue}".`);
'Office.RoamingSettings#saveAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/10-roaming-settings/roaming-settings.yaml

    // Save settings in the mailbox to make it available in future sessions.

    Office.context.roamingSettings.saveAsync(function(result) {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
      } else {
        console.log(`Settings saved with status: ${result.status}`);
      }
    });
'Office.CustomProperties#get:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/15-item-custom-properties/load-set-get-save.yaml

    var propertyName = $("#propertyName").val();

    var propertyValue = customProps.get(propertyName);

    $("#propertyValue").val(propertyValue);

    console.log(`The value of custom property "${propertyName}" is
    "${propertyValue}".`);
'Office.CustomProperties#set:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/15-item-custom-properties/load-set-get-save.yaml

    var propertyName = $("#propertyName").val();

    var propertyValue = $("#propertyValue").val();

    customProps.set(propertyName, propertyValue);

    console.log(`Custom property "${propertyName}" set to value
    "${propertyValue}".`);
'Office.CustomProperties#remove:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/15-item-custom-properties/load-set-get-save.yaml

    var propertyName = $("#propertyName").val();

    customProps.remove(propertyName);

    console.log(`Custom property "${propertyName}" removed.`);
'Office.AppointmentCompose#loadCustomPropertiesAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/15-item-custom-properties/load-set-get-save.yaml

    Office.context.mailbox.item.loadCustomPropertiesAsync(function (result) {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Loaded following custom properties:");
        customProps = result.value;
        var dataKey = Object.keys(customProps)[0];
        var data = customProps[dataKey];
        for (var propertyName in data)
        {
          var propertyValue = data[propertyName];
          console.log(`${propertyName}: ${propertyValue}`);
        }              
      }
      else {
        console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);
      }
    });
'Office.AppointmentRead#loadCustomPropertiesAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/15-item-custom-properties/load-set-get-save.yaml

    Office.context.mailbox.item.loadCustomPropertiesAsync(function (result) {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Loaded following custom properties:");
        customProps = result.value;
        var dataKey = Object.keys(customProps)[0];
        var data = customProps[dataKey];
        for (var propertyName in data)
        {
          var propertyValue = data[propertyName];
          console.log(`${propertyName}: ${propertyValue}`);
        }              
      }
      else {
        console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);
      }
    });
'Office.MessageCompose#loadCustomPropertiesAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/15-item-custom-properties/load-set-get-save.yaml

    Office.context.mailbox.item.loadCustomPropertiesAsync(function (result) {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Loaded following custom properties:");
        customProps = result.value;
        var dataKey = Object.keys(customProps)[0];
        var data = customProps[dataKey];
        for (var propertyName in data)
        {
          var propertyValue = data[propertyName];
          console.log(`${propertyName}: ${propertyValue}`);
        }              
      }
      else {
        console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);
      }
    });
'Office.MessageRead#loadCustomPropertiesAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/15-item-custom-properties/load-set-get-save.yaml

    Office.context.mailbox.item.loadCustomPropertiesAsync(function (result) {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Loaded following custom properties:");
        customProps = result.value;
        var dataKey = Object.keys(customProps)[0];
        var data = customProps[dataKey];
        for (var propertyName in data)
        {
          var propertyValue = data[propertyName];
          console.log(`${propertyName}: ${propertyValue}`);
        }              
      }
      else {
        console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);
      }
    });
'Office.AppointmentCompose#getSelectedDataAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/20-item-body/get-selected-data.yaml

    Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var text = asyncResult.value.data;
        var prop = asyncResult.value.sourceProperty;
        console.log("Selected text in " + prop + ": " + text);
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageCompose#getSelectedDataAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/20-item-body/get-selected-data.yaml

    Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var text = asyncResult.value.data;
        var prop = asyncResult.value.sourceProperty;
        console.log("Selected text in " + prop + ": " + text);
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.AppointmentCompose#setSelectedDataAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/20-item-body/set-selected-data.yaml

    Office.context.mailbox.item.setSelectedDataAsync("Replaced",
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Selected text has been updated successfully.");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageCompose#setSelectedDataAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/20-item-body/set-selected-data.yaml

    Office.context.mailbox.item.setSelectedDataAsync("Replaced",
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Selected text has been updated successfully.");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.AppointmentCompose#close:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/25-item-save-and-close/close.yaml

    Office.context.mailbox.item.close();
'Office.MessageCompose#close:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/25-item-save-and-close/close.yaml

    Office.context.mailbox.item.close();
'Office.AppointmentCompose#saveAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/25-item-save-and-close/save.yaml

    Office.context.mailbox.item.saveAsync(function (result) {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log(`saveAsync succeeded, itemId is ${result.value}`);
      }
      else {
        console.error(`saveAsync failed with message ${result.error.message}`);
      }
    });
'Office.MessageCompose#bcc:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-bcc-message-compose.yaml

    Office.context.mailbox.item.bcc.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var msgBcc = asyncResult.value;
        console.log("Message being blind-copied to:");
        for (var i = 0; i < msgBcc.length; i++) {
          console.log(msgBcc[i].displayName + " (" + msgBcc[i].emailAddress + ")");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-bcc-message-compose.yaml

    var email = $("#emailBcc")
      .val()
      .toString();
    var emailArray = [email];

    Office.context.mailbox.item.bcc.setAsync(emailArray, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting Bcc field.");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.Recipients#getAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-bcc-message-compose.yaml

    Office.context.mailbox.item.bcc.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var msgBcc = asyncResult.value;
        console.log("Message being blind-copied to:");
        for (var i = 0; i < msgBcc.length; i++) {
          console.log(msgBcc[i].displayName + " (" + msgBcc[i].emailAddress + ")");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-cc-message-compose.yaml

    Office.context.mailbox.item.cc.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var msgCc = asyncResult.value;
        console.log("Message being copied to:");
        for (var i = 0; i < msgCc.length; i++) {
          console.log(msgCc[i].displayName + " (" + msgCc[i].emailAddress + ")");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-optional-attendees-appointment-organizer.yaml

    Office.context.mailbox.item.optionalAttendees.getAsync(function(asyncResult)
    {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var apptOptionalAttendees = asyncResult.value;
        for (var i = 0; i < apptOptionalAttendees.length; i++) {
          console.log(
            "Optional attendees: " +
              apptOptionalAttendees[i].displayName +
              " (" +
              apptOptionalAttendees[i].emailAddress +
              ") - response: " +
              apptOptionalAttendees[i].appointmentResponse
          );
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-required-attendees-appointment-organizer.yaml

    Office.context.mailbox.item.requiredAttendees.getAsync(function(asyncResult)
    {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var apptRequiredAttendees = asyncResult.value;
        for (var i = 0; i < apptRequiredAttendees.length; i++) {
          console.log(
            "Required attendees: " +
              apptRequiredAttendees[i].displayName +
              " (" +
              apptRequiredAttendees[i].emailAddress +
              ") - response: " +
              apptRequiredAttendees[i].appointmentResponse
          );
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-to-message-compose.yaml

    Office.context.mailbox.item.to.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var msgTo = asyncResult.value;
        console.log("Message being sent to:");
        for (var i = 0; i < msgTo.length; i++) {
          console.log(msgTo[i].displayName + " (" + msgTo[i].emailAddress + ")");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.Recipients#setAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-bcc-message-compose.yaml

    var email = $("#emailBcc")
      .val()
      .toString();
    var emailArray = [email];

    Office.context.mailbox.item.bcc.setAsync(emailArray, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting Bcc field.");
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-cc-message-compose.yaml

    var email = $("#emailCc")
      .val()
      .toString();
    var emailArray = [email];

    Office.context.mailbox.item.cc.setAsync(emailArray, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting Cc field.");
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-optional-attendees-appointment-organizer.yaml

    var email = $("#emailOptional")
      .val()
      .toString();
    var emailArray = [email];

    Office.context.mailbox.item.optionalAttendees.setAsync(emailArray,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting optional attendees field.");
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-required-attendees-appointment-organizer.yaml

    var email = $("#emailRequired")
      .val()
      .toString();
    var emailArray = [email];

    Office.context.mailbox.item.requiredAttendees.setAsync(emailArray,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting required attendees field.");
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-to-message-compose.yaml

    var email = $("#emailTo")
      .val()
      .toString();
    var emailArray = [email];

    Office.context.mailbox.item.to.setAsync(emailArray, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting To field.");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageCompose#cc:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-cc-message-compose.yaml

    Office.context.mailbox.item.cc.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var msgCc = asyncResult.value;
        console.log("Message being copied to:");
        for (var i = 0; i < msgCc.length; i++) {
          console.log(msgCc[i].displayName + " (" + msgCc[i].emailAddress + ")");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-cc-message-compose.yaml

    var email = $("#emailCc")
      .val()
      .toString();
    var emailArray = [email];

    Office.context.mailbox.item.cc.setAsync(emailArray, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting Cc field.");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageRead#cc:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-cc-message-read.yaml

    var msgCc = Office.context.mailbox.item.cc;

    console.log("Message copied to:");

    for (var i = 0; i < msgCc.length; i++) {
      console.log(msgCc[i].displayName + " (" + msgCc[i].emailAddress + ")");
    }
'Office.MessageCompose#from:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-from-message-compose.yaml

    Office.context.mailbox.item.from.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var msgFrom = asyncResult.value;
        console.log("Message from: " + msgFrom.displayName + " (" + msgFrom.emailAddress + ")");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.From#getAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-from-message-compose.yaml

    Office.context.mailbox.item.from.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var msgFrom = asyncResult.value;
        console.log("Message from: " + msgFrom.displayName + " (" + msgFrom.emailAddress + ")");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageRead#from:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-from-message-read.yaml

    var msgFrom = Office.context.mailbox.item.from;

    console.log("Message received from: " + msgFrom.displayName + " (" +
    msgFrom.emailAddress + ")");
'Office.AppointmentRead#optionalAttendees:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-optional-attendees-appointment-attendee.yaml

    var apptOptionalAttendees = Office.context.mailbox.item.optionalAttendees;

    console.log("Optional attendees:");

    for (var i = 0; i < apptOptionalAttendees.length; i++) {
      console.log(
        apptOptionalAttendees[i].displayName +
          " (" +
          apptOptionalAttendees[i].emailAddress +
          ") - response: " +
          apptOptionalAttendees[i].appointmentResponse
      );
    }
'Office.AppointmentCompose#optionalAttendees:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-optional-attendees-appointment-organizer.yaml

    Office.context.mailbox.item.optionalAttendees.getAsync(function(asyncResult)
    {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var apptOptionalAttendees = asyncResult.value;
        for (var i = 0; i < apptOptionalAttendees.length; i++) {
          console.log(
            "Optional attendees: " +
              apptOptionalAttendees[i].displayName +
              " (" +
              apptOptionalAttendees[i].emailAddress +
              ") - response: " +
              apptOptionalAttendees[i].appointmentResponse
          );
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-optional-attendees-appointment-organizer.yaml

    var email = $("#emailOptional")
      .val()
      .toString();
    var emailArray = [email];

    Office.context.mailbox.item.optionalAttendees.setAsync(emailArray,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting optional attendees field.");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.AppointmentRead#organizer:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-organizer-appointment-attendee.yaml

    var apptOrganizer = Office.context.mailbox.item.organizer;

    console.log("Organizer: " + apptOrganizer.displayName + " (" +
    apptOrganizer.emailAddress + ")");
'Office.AppointmentCompose#organizer:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-organizer-appointment-organizer.yaml

    Office.context.mailbox.item.organizer.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var apptOrganizer = asyncResult.value;
        console.log("Organizer: " + apptOrganizer.displayName + " (" + apptOrganizer.emailAddress + ")");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.Organizer#getAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-organizer-appointment-organizer.yaml

    Office.context.mailbox.item.organizer.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var apptOrganizer = asyncResult.value;
        console.log("Organizer: " + apptOrganizer.displayName + " (" + apptOrganizer.emailAddress + ")");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.AppointmentRead#requiredAttendees:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-required-attendees-appointment-attendee.yaml

    var apptRequiredAttendees = Office.context.mailbox.item.requiredAttendees;

    console.log("Required attendees:");

    for (var i = 0; i < apptRequiredAttendees.length; i++) {
      console.log(
        apptRequiredAttendees[i].displayName +
          " (" +
          apptRequiredAttendees[i].emailAddress +
          ") - response: " +
          apptRequiredAttendees[i].appointmentResponse
      );
    }
'Office.AppointmentCompose#requiredAttendees:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-required-attendees-appointment-organizer.yaml

    Office.context.mailbox.item.requiredAttendees.getAsync(function(asyncResult)
    {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var apptRequiredAttendees = asyncResult.value;
        for (var i = 0; i < apptRequiredAttendees.length; i++) {
          console.log(
            "Required attendees: " +
              apptRequiredAttendees[i].displayName +
              " (" +
              apptRequiredAttendees[i].emailAddress +
              ") - response: " +
              apptRequiredAttendees[i].appointmentResponse
          );
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-required-attendees-appointment-organizer.yaml

    var email = $("#emailRequired")
      .val()
      .toString();
    var emailArray = [email];

    Office.context.mailbox.item.requiredAttendees.setAsync(emailArray,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting required attendees field.");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageRead#sender:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-sender-message-read.yaml

    var msgSender = Office.context.mailbox.item.sender;

    console.log("Sender: " + msgSender.displayName + " (" +
    msgSender.emailAddress + ")");
'Office.MessageCompose#to:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-to-message-compose.yaml

    Office.context.mailbox.item.to.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var msgTo = asyncResult.value;
        console.log("Message being sent to:");
        for (var i = 0; i < msgTo.length; i++) {
          console.log(msgTo[i].displayName + " (" + msgTo[i].emailAddress + ")");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-to-message-compose.yaml

    var email = $("#emailTo")
      .val()
      .toString();
    var emailArray = [email];

    Office.context.mailbox.item.to.setAsync(emailArray, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting To field.");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageRead#to:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-to-message-read.yaml

    var msgTo = Office.context.mailbox.item.to;

    console.log("Message sent to:");

    for (var i = 0; i < msgTo.length; i++) {
      console.log(msgTo[i].displayName + " (" + msgTo[i].emailAddress + ")");
    }
'Office.AppointmentCompose#notificationMessages:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    var details =
      {
        type: "progressIndicator",
        message: "Progress indicator with id = " + id
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    var details =
      {
        type: "informationalMessage",
        message: "Non-persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: false
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    var details =
      {
        type: "informationalMessage",
        message: "Persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: true
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    Office.context.mailbox.item.notificationMessages.getAllAsync(handleResult);          
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    Office.context.mailbox.item.notificationMessages.replaceAsync(
      id,
      {
        type: "informationalMessage",
        message: "Notification message with id = " + id + " has been replaced with an informational message.",
        icon: "icon2",
        persistent: false
      },
      handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    Office.context.mailbox.item.notificationMessages.removeAsync(id,
    handleResult);
'Office.AppointmentRead#notificationMessages:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    var details =
      {
        type: "progressIndicator",
        message: "Progress indicator with id = " + id
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    var details =
      {
        type: "informationalMessage",
        message: "Non-persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: false
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    var details =
      {
        type: "informationalMessage",
        message: "Persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: true
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    Office.context.mailbox.item.notificationMessages.getAllAsync(handleResult);          
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    Office.context.mailbox.item.notificationMessages.replaceAsync(
      id,
      {
        type: "informationalMessage",
        message: "Notification message with id = " + id + " has been replaced with an informational message.",
        icon: "icon2",
        persistent: false
      },
      handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    Office.context.mailbox.item.notificationMessages.removeAsync(id,
    handleResult);
'Office.MessageCompose#notificationMessages:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    var details =
      {
        type: "progressIndicator",
        message: "Progress indicator with id = " + id
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    var details =
      {
        type: "informationalMessage",
        message: "Non-persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: false
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    var details =
      {
        type: "informationalMessage",
        message: "Persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: true
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    Office.context.mailbox.item.notificationMessages.getAllAsync(handleResult);          
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    Office.context.mailbox.item.notificationMessages.replaceAsync(
      id,
      {
        type: "informationalMessage",
        message: "Notification message with id = " + id + " has been replaced with an informational message.",
        icon: "icon2",
        persistent: false
      },
      handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    Office.context.mailbox.item.notificationMessages.removeAsync(id,
    handleResult);
'Office.MessageRead#notificationMessages:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    var details =
      {
        type: "progressIndicator",
        message: "Progress indicator with id = " + id
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    var details =
      {
        type: "informationalMessage",
        message: "Non-persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: false
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    var details =
      {
        type: "informationalMessage",
        message: "Persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: true
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    Office.context.mailbox.item.notificationMessages.getAllAsync(handleResult);          
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    Office.context.mailbox.item.notificationMessages.replaceAsync(
      id,
      {
        type: "informationalMessage",
        message: "Notification message with id = " + id + " has been replaced with an informational message.",
        icon: "icon2",
        persistent: false
      },
      handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    Office.context.mailbox.item.notificationMessages.removeAsync(id,
    handleResult);
'Office.NotificationMessages#addAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    var details =
      {
        type: "progressIndicator",
        message: "Progress indicator with id = " + id
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    var details =
      {
        type: "informationalMessage",
        message: "Non-persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: false
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    var details =
      {
        type: "informationalMessage",
        message: "Persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: true
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    var details =
      {
        type: "errorMessage",
        message: "Error notification message with id = " + id
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
'Office.NotificationMessages#getAllAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    Office.context.mailbox.item.notificationMessages.getAllAsync(handleResult);          
'Office.NotificationMessages#replaceAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    Office.context.mailbox.item.notificationMessages.replaceAsync(
      id,
      {
        type: "informationalMessage",
        message: "Notification message with id = " + id + " has been replaced with an informational message.",
        icon: "icon2",
        persistent: false
      },
      handleResult);
'Office.NotificationMessages#removeAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    Office.context.mailbox.item.notificationMessages.removeAsync(id,
    handleResult);
'Office.AppointmentCompose#addFileAttachmentAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/attachments-compose.yaml

    var attachmentUrl = $("#attachmentUrl").val();

    Office.context.mailbox.item.addFileAttachmentAsync(
        attachmentUrl,
        getFileName(attachmentUrl),
        { "asyncContext" : { var1: 1, var2: true } },
        function(result) { console.log(result); });
'Office.MessageCompose#addFileAttachmentAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/attachments-compose.yaml

    var attachmentUrl = $("#attachmentUrl").val();

    Office.context.mailbox.item.addFileAttachmentAsync(
        attachmentUrl,
        getFileName(attachmentUrl),
        { "asyncContext" : { var1: 1, var2: true } },
        function(result) { console.log(result); });
'Office.AppointmentCompose#addItemAttachmentAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/attachments-compose.yaml

    var attachmentItemId = $("#attachmentItemId").val();

    Office.context.mailbox.item.addItemAttachmentAsync(
        attachmentItemId,
        "My attachment",
        { "asyncContext" : { var3: 3, var4: false } },
        function(result) { console.log(result); });
'Office.MessageCompose#addItemAttachmentAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/attachments-compose.yaml

    var attachmentItemId = $("#attachmentItemId").val();

    Office.context.mailbox.item.addItemAttachmentAsync(
        attachmentItemId,
        "My attachment",
        { "asyncContext" : { var3: 3, var4: false } },
        function(result) { console.log(result); });
'Office.AppointmentCompose#addFileAttachmentFromBase64Async:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/attachments-compose.yaml

    base64String =
    "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAAAsSAAALEgHS3X78AAACRUlEQVRYw82XzXHbMBCFP2F8tzsQc8Ixyh0zoiuIXIGdCsxUYKqC0B04FdiuwMoM7mGOOIXqQGoAymXhgSX+itJM9kIRFLAP+3YXD5Pdbscx5oxaAIW8Ztr6l2PWmQwF4IyaieP53qdfAqQ8CwBn1JU4vpWhrbxXQA5MZfynANmcDIAzKgcy4FKGXsVJFf3nLgKyBQptfT4KQMRz2N0fcbxqmRMDWXflx0VPnrdArq0vekQ1Dv0UeHZGNebHhwjU8AzwKM43RyZnbAf58Q6ghudeWd0Aus0+5EcMIIRi3beua0D3Nm39BEAx3i7HTK4DEBJn5YxKOnaRA5+ErpMBWMpzDvx1RuXCcxOISlufAjfC7zgAsqsvUvMAD0ApPaEtGi9AIlUzKgJo60tt/SyKRkzLrAXERluf7W1gOICWaMyB386oooOWsIHvXbSoHuUSFovtHqicUVnH3EJoeT0aQEf5/XBGlc6otIOWBXAtPeZkAIJ9Bt6cUU9tZautX2nrk3MACHYr1ZKProKRtDw4o8pzAPjWo+NtpXTTvoteDDg8noDAcwbcRedAkGdFXyk2GEDcegVAFp2gyVDHjRQ4o6q2smoqtR5Hd+qMqtoALCWUUymr1m43QMZfOaMK4C0SrMsDANJ2E5FNcbdbjHC+ENl+H0myJFbLtaq4Rt8dyPBYRQV1E40nMv9rl7xrOw3DGb+Whcqu3i/OM6CUOWvgRlufNmnLYy4m77uJI7AXtdNcTDrU71LEyv7v01/N/ovL6bmu5/8A1tNWZldH0W4AAAAASUVORK5CYII=";

    Office.context.mailbox.item.addFileAttachmentFromBase64Async(
        base64String,
        "logo.png",
        { isInline: false },
        function(result) { console.log(result); });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/work-with-client-signatures.yaml

    // Set the signature for the current item with inline image.

    var modIcon1Base64 =
    "iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA2ZpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYxIDY0LjE0MDk0OSwgMjAxMC8xMi8wNy0xMDo1NzowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpDRDMxMDg1MjBCNDZFMTExODE2MkM1RUI2M0M4MDYxRCIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpFMTUxQjgyRjQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpFMTUxQjgyRTQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M1LjEgV2luZG93cyI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkQxMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkNEMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+uC/WfAAAAehJREFUeNpilCzfwEAEkAbiECA2A2J1IOaHin8E4ptAfBaIVwLxU0IGMRKw0B6IW4DYhoE4cASIK6E0VsCEQ1wUiNcB8QESLGOAqj0MxBuhZhBloS4QnwHiQAbygR/UDF1CFupCXSjHQDmQg5qli8tCUBBsQUoQ1AD8UDNFsVk4n0o+w+bT+egWglKjNymmeGhLkqLcG2oHAwtUoIuQDj5OVgZPLUmwRe5aEmAxqYqNpFgKssOcCeplM0KqdST5GfpDDRm0JfkYrj3/SE7QguyQY4ImYYLgCtAS10kHGMw6dzNsv/qC7OwCClJXYlR++v6b4er3j5QmIFcmaNlIL6AOslCIjhYKMTHQGTBBqxh6gXcgC6/R0cKbIAv30dHCfaAKGJTxHxJSqS3Fz9DkowNmywpyMcgA8fF7b8D8VWcfM6w8+4gYC+VB+RCk8hSh0gaUD4/dewvlvUWRe/z+GzGWgex4BGtiOAHxXhoHpzMoSGHZAhSPW2lo2VZYWkHOh4nEtLrIAE+hZmNUwK+B2BOIv1PRsu9QM1/jatNcBtVZ0IREKXgENesyoVYbzNIdFFi2A5tl+NqlL6BB4QBNzsSCU1A9nlAzMAALAQMOQl0qB23qWwKxIlIrDBQ394H4OBCvISYqAAIMACVibHDqsO7zAAAAAElFTkSuQmCC";

    Office.context.mailbox.item.addFileAttachmentFromBase64Async(
      modIcon1Base64,
      "myImage.png",
      { isInline: true },
      function(result) {
        if (result.status == Office.AsyncResultStatus.Succeeded) {
          var signature = $("#signature").val() + "<img src='cid:myImage.png'>";
          console.log(`Setting signature to "${signature}".`);
          // Important: setSignatureAsync is currently in preview.
          Office.context.mailbox.item.body.setSignatureAsync(
            signature,
            { coercionType: "html" },
            function(asyncResult) {
              console.log(`setSignatureAsync: ${asyncResult.status}`);
            }
          );
        } else {
          console.error(`addFileAttachmentFromBase64Async: ${result.error}`);
        }
      }
    );
'Office.MessageCompose#addFileAttachmentFromBase64Async:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/attachments-compose.yaml

    base64String =
    "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAAAsSAAALEgHS3X78AAACRUlEQVRYw82XzXHbMBCFP2F8tzsQc8Ixyh0zoiuIXIGdCsxUYKqC0B04FdiuwMoM7mGOOIXqQGoAymXhgSX+itJM9kIRFLAP+3YXD5Pdbscx5oxaAIW8Ztr6l2PWmQwF4IyaieP53qdfAqQ8CwBn1JU4vpWhrbxXQA5MZfynANmcDIAzKgcy4FKGXsVJFf3nLgKyBQptfT4KQMRz2N0fcbxqmRMDWXflx0VPnrdArq0vekQ1Dv0UeHZGNebHhwjU8AzwKM43RyZnbAf58Q6ghudeWd0Aus0+5EcMIIRi3beua0D3Nm39BEAx3i7HTK4DEBJn5YxKOnaRA5+ErpMBWMpzDvx1RuXCcxOISlufAjfC7zgAsqsvUvMAD0ApPaEtGi9AIlUzKgJo60tt/SyKRkzLrAXERluf7W1gOICWaMyB386oooOWsIHvXbSoHuUSFovtHqicUVnH3EJoeT0aQEf5/XBGlc6otIOWBXAtPeZkAIJ9Bt6cUU9tZautX2nrk3MACHYr1ZKProKRtDw4o8pzAPjWo+NtpXTTvoteDDg8noDAcwbcRedAkGdFXyk2GEDcegVAFp2gyVDHjRQ4o6q2smoqtR5Hd+qMqtoALCWUUymr1m43QMZfOaMK4C0SrMsDANJ2E5FNcbdbjHC+ENl+H0myJFbLtaq4Rt8dyPBYRQV1E40nMv9rl7xrOw3DGb+Whcqu3i/OM6CUOWvgRlufNmnLYy4m77uJI7AXtdNcTDrU71LEyv7v01/N/ovL6bmu5/8A1tNWZldH0W4AAAAASUVORK5CYII=";

    Office.context.mailbox.item.addFileAttachmentFromBase64Async(
        base64String,
        "logo.png",
        { isInline: false },
        function(result) { console.log(result); });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/work-with-client-signatures.yaml

    // Set the signature for the current item with inline image.

    var modIcon1Base64 =
    "iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA2ZpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYxIDY0LjE0MDk0OSwgMjAxMC8xMi8wNy0xMDo1NzowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpDRDMxMDg1MjBCNDZFMTExODE2MkM1RUI2M0M4MDYxRCIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpFMTUxQjgyRjQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpFMTUxQjgyRTQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M1LjEgV2luZG93cyI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkQxMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkNEMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+uC/WfAAAAehJREFUeNpilCzfwEAEkAbiECA2A2J1IOaHin8E4ptAfBaIVwLxU0IGMRKw0B6IW4DYhoE4cASIK6E0VsCEQ1wUiNcB8QESLGOAqj0MxBuhZhBloS4QnwHiQAbygR/UDF1CFupCXSjHQDmQg5qli8tCUBBsQUoQ1AD8UDNFsVk4n0o+w+bT+egWglKjNymmeGhLkqLcG2oHAwtUoIuQDj5OVgZPLUmwRe5aEmAxqYqNpFgKssOcCeplM0KqdST5GfpDDRm0JfkYrj3/SE7QguyQY4ImYYLgCtAS10kHGMw6dzNsv/qC7OwCClJXYlR++v6b4er3j5QmIFcmaNlIL6AOslCIjhYKMTHQGTBBqxh6gXcgC6/R0cKbIAv30dHCfaAKGJTxHxJSqS3Fz9DkowNmywpyMcgA8fF7b8D8VWcfM6w8+4gYC+VB+RCk8hSh0gaUD4/dewvlvUWRe/z+GzGWgex4BGtiOAHxXhoHpzMoSGHZAhSPW2lo2VZYWkHOh4nEtLrIAE+hZmNUwK+B2BOIv1PRsu9QM1/jatNcBtVZ0IREKXgENesyoVYbzNIdFFi2A5tl+NqlL6BB4QBNzsSCU1A9nlAzMAALAQMOQl0qB23qWwKxIlIrDBQ394H4OBCvISYqAAIMACVibHDqsO7zAAAAAElFTkSuQmCC";

    Office.context.mailbox.item.addFileAttachmentFromBase64Async(
      modIcon1Base64,
      "myImage.png",
      { isInline: true },
      function(result) {
        if (result.status == Office.AsyncResultStatus.Succeeded) {
          var signature = $("#signature").val() + "<img src='cid:myImage.png'>";
          console.log(`Setting signature to "${signature}".`);
          // Important: setSignatureAsync is currently in preview.
          Office.context.mailbox.item.body.setSignatureAsync(
            signature,
            { coercionType: "html" },
            function(asyncResult) {
              console.log(`setSignatureAsync: ${asyncResult.status}`);
            }
          );
        } else {
          console.error(`addFileAttachmentFromBase64Async: ${result.error}`);
        }
      }
    );
'Office.AppointmentCompose#getAttachmentsAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/attachments-compose.yaml

    Office.context.mailbox.item.getAttachmentsAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(result.error.message);
        } else {
            if (result.value.length > 0) {
                for (var i = 0; i < result.value.length; i++) {
                    var attachment = result.value[i];
                    console.log(`${attachment.id}. Name: ${attachment.name}, size: ${attachment.size}, isInline: ${attachment.isInline}`);
                }
            }
            else {
                console.log("No attachments on this message.");
            }
        }
    });
'Office.MessageCompose#getAttachmentsAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/attachments-compose.yaml

    Office.context.mailbox.item.getAttachmentsAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(result.error.message);
        } else {
            if (result.value.length > 0) {
                for (var i = 0; i < result.value.length; i++) {
                    var attachment = result.value[i];
                    console.log(`${attachment.id}. Name: ${attachment.name}, size: ${attachment.size}, isInline: ${attachment.isInline}`);
                }
            }
            else {
                console.log("No attachments on this message.");
            }
        }
    });
'Office.AppointmentCompose#removeAttachmentAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/attachments-compose.yaml

    Office.context.mailbox.item.removeAttachmentAsync(
        $("#attachmentId").val(),
        { asyncContext : null },
        function(result)
        {
            if (result.status !== Office.AsyncResultStatus.Succeeded) {
                console.error(`${result.error.message}`);
            } else {
                console.log(`Attachment removed successfully.`);
            }
        }
    );
'Office.MessageCompose#removeAttachmentAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/attachments-compose.yaml

    Office.context.mailbox.item.removeAttachmentAsync(
        $("#attachmentId").val(),
        { asyncContext : null },
        function(result)
        {
            if (result.status !== Office.AsyncResultStatus.Succeeded) {
                console.error(`${result.error.message}`);
            } else {
                console.log(`Attachment removed successfully.`);
            }
        }
    );
'Office.AppointmentCompose#getAttachmentContentAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/get-attachment-content.yaml

    var item = Office.context.mailbox.item;

    var options = {asyncContext: {currentItem: item}};

    item.getAttachmentsAsync(options, callback);


    function callback(result) {
        if (result.value.length > 0) {
            for (i = 0 ; i < result.value.length ; i++) {
                result.asyncContext.currentItem.getAttachmentContentAsync(result.value[i].id, handleAttachmentsCallback);
            }
        }
    }


    function handleAttachmentsCallback(result) {
        // Parse string to be a url, an .eml file, a base64-encoded string, or an .icalendar file.
        switch (result.value.format) {
            case Office.MailboxEnums.AttachmentContentFormat.Base64:
                // Handle file attachment.
                console.log(result.value.content);
                break;
            case Office.MailboxEnums.AttachmentContentFormat.Eml:
                // Handle email item attachment.
                console.log("Attachment is a message.");
                break;
            case Office.MailboxEnums.AttachmentContentFormat.ICalendar:
                // Handle .icalender attachment.
                console.log("Attachment is a calendar item.");
                break;
            case Office.MailboxEnums.AttachmentContentFormat.Url:
                // Handle cloud attachment.
                console.log("Attachment is a cloud attachment.");
                break;
            default:
                // Handle attachment formats that are not supported.
        }
    }
'Office.AppointmentRead#getAttachmentContentAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/get-attachment-content.yaml

    var item = Office.context.mailbox.item;

    var options = {asyncContext: {currentItem: item}};

    item.getAttachmentsAsync(options, callback);


    function callback(result) {
        if (result.value.length > 0) {
            for (i = 0 ; i < result.value.length ; i++) {
                result.asyncContext.currentItem.getAttachmentContentAsync(result.value[i].id, handleAttachmentsCallback);
            }
        }
    }


    function handleAttachmentsCallback(result) {
        // Parse string to be a url, an .eml file, a base64-encoded string, or an .icalendar file.
        switch (result.value.format) {
            case Office.MailboxEnums.AttachmentContentFormat.Base64:
                // Handle file attachment.
                console.log(result.value.content);
                break;
            case Office.MailboxEnums.AttachmentContentFormat.Eml:
                // Handle email item attachment.
                console.log("Attachment is a message.");
                break;
            case Office.MailboxEnums.AttachmentContentFormat.ICalendar:
                // Handle .icalender attachment.
                console.log("Attachment is a calendar item.");
                break;
            case Office.MailboxEnums.AttachmentContentFormat.Url:
                // Handle cloud attachment.
                console.log("Attachment is a cloud attachment.");
                break;
            default:
                // Handle attachment formats that are not supported.
        }
    }
'Office.MessageCompose#getAttachmentContentAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/get-attachment-content.yaml

    var item = Office.context.mailbox.item;

    var options = {asyncContext: {currentItem: item}};

    item.getAttachmentsAsync(options, callback);


    function callback(result) {
        if (result.value.length > 0) {
            for (i = 0 ; i < result.value.length ; i++) {
                result.asyncContext.currentItem.getAttachmentContentAsync(result.value[i].id, handleAttachmentsCallback);
            }
        }
    }


    function handleAttachmentsCallback(result) {
        // Parse string to be a url, an .eml file, a base64-encoded string, or an .icalendar file.
        switch (result.value.format) {
            case Office.MailboxEnums.AttachmentContentFormat.Base64:
                // Handle file attachment.
                console.log(result.value.content);
                break;
            case Office.MailboxEnums.AttachmentContentFormat.Eml:
                // Handle email item attachment.
                console.log("Attachment is a message.");
                break;
            case Office.MailboxEnums.AttachmentContentFormat.ICalendar:
                // Handle .icalender attachment.
                console.log("Attachment is a calendar item.");
                break;
            case Office.MailboxEnums.AttachmentContentFormat.Url:
                // Handle cloud attachment.
                console.log("Attachment is a cloud attachment.");
                break;
            default:
                // Handle attachment formats that are not supported.
        }
    }
'Office.MessageRead#getAttachmentContentAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/get-attachment-content.yaml

    var item = Office.context.mailbox.item;

    var options = {asyncContext: {currentItem: item}};

    item.getAttachmentsAsync(options, callback);


    function callback(result) {
        if (result.value.length > 0) {
            for (i = 0 ; i < result.value.length ; i++) {
                result.asyncContext.currentItem.getAttachmentContentAsync(result.value[i].id, handleAttachmentsCallback);
            }
        }
    }


    function handleAttachmentsCallback(result) {
        // Parse string to be a url, an .eml file, a base64-encoded string, or an .icalendar file.
        switch (result.value.format) {
            case Office.MailboxEnums.AttachmentContentFormat.Base64:
                // Handle file attachment.
                console.log(result.value.content);
                break;
            case Office.MailboxEnums.AttachmentContentFormat.Eml:
                // Handle email item attachment.
                console.log("Attachment is a message.");
                break;
            case Office.MailboxEnums.AttachmentContentFormat.ICalendar:
                // Handle .icalender attachment.
                console.log("Attachment is a calendar item.");
                break;
            case Office.MailboxEnums.AttachmentContentFormat.Url:
                // Handle cloud attachment.
                console.log("Attachment is a cloud attachment.");
                break;
            default:
                // Handle attachment formats that are not supported.
        }
    }
'Office.AppointmentRead#attachments:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/get-attachments-read.yaml

    var attachments = Office.context.mailbox.item.attachments;

    console.log(attachments);
'Office.MessageRead#attachments:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/get-attachments-read.yaml

    var attachments = Office.context.mailbox.item.attachments;

    console.log(attachments);
'Office.AppointmentCompose#categories:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var categories = asyncResult.value;
        if (categories && categories.length > 0) {
          console.log("Categories assigned to this item:");
          console.log(JSON.stringify(categories));
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml

    // Note: In order for you to successfully add a category,

    // it must be in the mailbox categories master list.


    Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var masterCategories = asyncResult.value;
        if (masterCategories && masterCategories.length > 0) {
          // Grab the first category from the master list.
          var categoryToAdd = [masterCategories[0].displayName];
          Office.context.mailbox.item.categories.addAsync(categoryToAdd, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully assigned category '${categoryToAdd}' to item.`);
            } else {
              console.log("categories.addAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories in the master list on this mailbox. You can add categories using Office.context.mailbox.masterCategories.addAsync.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var categories = asyncResult.value;
        if (categories && categories.length > 0) {
          // Grab the first category assigned to this item.
          var categoryToRemove = [categories[0].displayName];
          Office.context.mailbox.item.categories.removeAsync(categoryToRemove, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully unassigned category '${categoryToRemove}' from this item.`);
            } else {
              console.log("categories.removeAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.AppointmentRead#categories:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var categories = asyncResult.value;
        if (categories && categories.length > 0) {
          console.log("Categories assigned to this item:");
          console.log(JSON.stringify(categories));
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml

    // Note: In order for you to successfully add a category,

    // it must be in the mailbox categories master list.


    Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var masterCategories = asyncResult.value;
        if (masterCategories && masterCategories.length > 0) {
          // Grab the first category from the master list.
          var categoryToAdd = [masterCategories[0].displayName];
          Office.context.mailbox.item.categories.addAsync(categoryToAdd, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully assigned category '${categoryToAdd}' to item.`);
            } else {
              console.log("categories.addAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories in the master list on this mailbox. You can add categories using Office.context.mailbox.masterCategories.addAsync.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var categories = asyncResult.value;
        if (categories && categories.length > 0) {
          // Grab the first category assigned to this item.
          var categoryToRemove = [categories[0].displayName];
          Office.context.mailbox.item.categories.removeAsync(categoryToRemove, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully unassigned category '${categoryToRemove}' from this item.`);
            } else {
              console.log("categories.removeAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageCompose#categories:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var categories = asyncResult.value;
        if (categories && categories.length > 0) {
          console.log("Categories assigned to this item:");
          console.log(JSON.stringify(categories));
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml

    // Note: In order for you to successfully add a category,

    // it must be in the mailbox categories master list.


    Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var masterCategories = asyncResult.value;
        if (masterCategories && masterCategories.length > 0) {
          // Grab the first category from the master list.
          var categoryToAdd = [masterCategories[0].displayName];
          Office.context.mailbox.item.categories.addAsync(categoryToAdd, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully assigned category '${categoryToAdd}' to item.`);
            } else {
              console.log("categories.addAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories in the master list on this mailbox. You can add categories using Office.context.mailbox.masterCategories.addAsync.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var categories = asyncResult.value;
        if (categories && categories.length > 0) {
          // Grab the first category assigned to this item.
          var categoryToRemove = [categories[0].displayName];
          Office.context.mailbox.item.categories.removeAsync(categoryToRemove, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully unassigned category '${categoryToRemove}' from this item.`);
            } else {
              console.log("categories.removeAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageRead#categories:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var categories = asyncResult.value;
        if (categories && categories.length > 0) {
          console.log("Categories assigned to this item:");
          console.log(JSON.stringify(categories));
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml

    // Note: In order for you to successfully add a category,

    // it must be in the mailbox categories master list.


    Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var masterCategories = asyncResult.value;
        if (masterCategories && masterCategories.length > 0) {
          // Grab the first category from the master list.
          var categoryToAdd = [masterCategories[0].displayName];
          Office.context.mailbox.item.categories.addAsync(categoryToAdd, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully assigned category '${categoryToAdd}' to item.`);
            } else {
              console.log("categories.addAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories in the master list on this mailbox. You can add categories using Office.context.mailbox.masterCategories.addAsync.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var categories = asyncResult.value;
        if (categories && categories.length > 0) {
          // Grab the first category assigned to this item.
          var categoryToRemove = [categories[0].displayName];
          Office.context.mailbox.item.categories.removeAsync(categoryToRemove, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully unassigned category '${categoryToRemove}' from this item.`);
            } else {
              console.log("categories.removeAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.Categories#getAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var categories = asyncResult.value;
        if (categories && categories.length > 0) {
          console.log("Categories assigned to this item:");
          console.log(JSON.stringify(categories));
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.Categories#addAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml

    // Note: In order for you to successfully add a category,

    // it must be in the mailbox categories master list.


    Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var masterCategories = asyncResult.value;
        if (masterCategories && masterCategories.length > 0) {
          // Grab the first category from the master list.
          var categoryToAdd = [masterCategories[0].displayName];
          Office.context.mailbox.item.categories.addAsync(categoryToAdd, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully assigned category '${categoryToAdd}' to item.`);
            } else {
              console.log("categories.addAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories in the master list on this mailbox. You can add categories using Office.context.mailbox.masterCategories.addAsync.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.Categories#removeAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var categories = asyncResult.value;
        if (categories && categories.length > 0) {
          // Grab the first category assigned to this item.
          var categoryToRemove = [categories[0].displayName];
          Office.context.mailbox.item.categories.removeAsync(categoryToRemove, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully unassigned category '${categoryToRemove}' from this item.`);
            } else {
              console.log("categories.removeAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.Mailbox#masterCategories:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-master-categories.yaml

    Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var categories = asyncResult.value;
        if (categories && categories.length > 0) {
          console.log("Master categories:");
          console.log(JSON.stringify(categories));
        } else {
          console.log("There are no categories in the master list.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-master-categories.yaml

    var masterCategoriesToAdd = [
      {
        displayName: "TestCategory",
        color: Office.MailboxEnums.CategoryColor.Preset0
      }
    ];


    Office.context.mailbox.masterCategories.addAsync(masterCategoriesToAdd,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Successfully added categories to master list");
      } else {
        console.log("masterCategories.addAsync call failed with error: " + asyncResult.error.message);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-master-categories.yaml

    var masterCategoriesToRemove = ["TestCategory"];


    Office.context.mailbox.masterCategories.removeAsync(masterCategoriesToRemove,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Successfully removed categories from master list");
      } else {
        console.log("masterCategories.removeAsync call failed with error: " + asyncResult.error.message);
      }
    });
'Office.MasterCategories#getAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-master-categories.yaml

    Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var categories = asyncResult.value;
        if (categories && categories.length > 0) {
          console.log("Master categories:");
          console.log(JSON.stringify(categories));
        } else {
          console.log("There are no categories in the master list.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MasterCategories#addAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-master-categories.yaml

    var masterCategoriesToAdd = [
      {
        displayName: "TestCategory",
        color: Office.MailboxEnums.CategoryColor.Preset0
      }
    ];


    Office.context.mailbox.masterCategories.addAsync(masterCategoriesToAdd,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Successfully added categories to master list");
      } else {
        console.log("masterCategories.addAsync call failed with error: " + asyncResult.error.message);
      }
    });
'Office.MasterCategories#removeAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-master-categories.yaml

    var masterCategoriesToRemove = ["TestCategory"];


    Office.context.mailbox.masterCategories.removeAsync(masterCategoriesToRemove,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Successfully removed categories from master list");
      } else {
        console.log("masterCategories.removeAsync call failed with error: " + asyncResult.error.message);
      }
    });
'Office.AppointmentCompose#recurrence:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/50-recurrence/get-set-recurrence-appointment-organizer.yaml

    Office.context.mailbox.item.recurrence.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var recurrence = asyncResult.value;
        if (recurrence === null) {
          console.log("This is a single appointment.");
        } else {
          console.log(`Recurrence pattern: ${JSON.stringify(recurrence)}`);
        }
      } else {
        console.error(asyncResult.error);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/50-recurrence/get-set-recurrence-appointment-organizer.yaml

    // Important: Can only set the recurrence pattern of an appointment series.


    var currentDate = new Date();

    let seriesTimeObject : Office.SeriesTime;

    // Set series start date to tomorrow.

    seriesTimeObject.setStartDate(
      currentDate.getFullYear(),
      currentDate.getMonth(),
      currentDate.getDay() + 1
    );

    // Set series end date to 1 month from now.

    seriesTimeObject.setEndDate(
      currentDate.getFullYear(),
      currentDate.getMonth() + 1,
      currentDate.getDay()
    );

    // Set start time to 1:30 PM.

    seriesTimeObject.setStartTime(13, 30);

    // Set duration to 30 minutes.

    seriesTimeObject.setDuration(30);


    let pattern : Office.Recurrence = {
      seriesTime: seriesTimeObject,
      recurrenceType: "weekly",
      recurrenceProperties: { interval: 1, days: ["tue", "thu"], firstDayOfWeek: "sun" },
      recurrenceTimeZone: { name: "Pacific Standard Time" }
    };


    Office.context.mailbox.item.recurrence.setAsync(pattern, (asyncResult) => {
      if (asyncResult.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to set recurrence. Error: ${asyncResult.error.message}`);
        return;
      }
      console.log(`Succeeded in setting recurrence pattern ${JSON.stringify(pattern)}`);
    });
'Office.Recurrence#getAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/50-recurrence/get-set-recurrence-appointment-organizer.yaml

    Office.context.mailbox.item.recurrence.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var recurrence = asyncResult.value;
        if (recurrence === null) {
          console.log("This is a single appointment.");
        } else {
          console.log(`Recurrence pattern: ${JSON.stringify(recurrence)}`);
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.Recurrence#setAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/50-recurrence/get-set-recurrence-appointment-organizer.yaml

    // Important: Can only set the recurrence pattern of an appointment series.


    var currentDate = new Date();

    let seriesTimeObject : Office.SeriesTime;

    // Set series start date to tomorrow.

    seriesTimeObject.setStartDate(
      currentDate.getFullYear(),
      currentDate.getMonth(),
      currentDate.getDay() + 1
    );

    // Set series end date to 1 month from now.

    seriesTimeObject.setEndDate(
      currentDate.getFullYear(),
      currentDate.getMonth() + 1,
      currentDate.getDay()
    );

    // Set start time to 1:30 PM.

    seriesTimeObject.setStartTime(13, 30);

    // Set duration to 30 minutes.

    seriesTimeObject.setDuration(30);


    let pattern : Office.Recurrence = {
      seriesTime: seriesTimeObject,
      recurrenceType: "weekly",
      recurrenceProperties: { interval: 1, days: ["tue", "thu"], firstDayOfWeek: "sun" },
      recurrenceTimeZone: { name: "Pacific Standard Time" }
    };


    Office.context.mailbox.item.recurrence.setAsync(pattern, (asyncResult) => {
      if (asyncResult.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to set recurrence. Error: ${asyncResult.error.message}`);
        return;
      }
      console.log(`Succeeded in setting recurrence pattern ${JSON.stringify(pattern)}`);
    });
'Office.AppointmentRead#recurrence:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/50-recurrence/get-recurrence-read.yaml

    var recurrence = Office.context.mailbox.item.recurrence;


    if (recurrence === undefined) {
      console.log("This item is a message but not a meeting request.");
    } else if (recurrence === null) {
      console.log("This is a single appointment.");
    } else {
      console.log(JSON.stringify(recurrence));
    }
'Office.MessageRead#recurrence:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/50-recurrence/get-recurrence-read.yaml

    var recurrence = Office.context.mailbox.item.recurrence;


    if (recurrence === undefined) {
      console.log("This item is a message but not a meeting request.");
    } else if (recurrence === null) {
      console.log("This is a single appointment.");
    } else {
      console.log(JSON.stringify(recurrence));
    }
'Office.AppointmentCompose#seriesId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/50-recurrence/get-series-id.yaml

    var seriesId = Office.context.mailbox.item.seriesId;


    if (seriesId === undefined) {
      console.log("This is a message that's not a meeting request.");
    } else if (seriesId === null) {
      console.log("This is a single appointment, a parent series, or a meeting request for a series or single meeting.");
    } else {
      console.log("This is an instance belonging to series with ID " + seriesId);
    }
'Office.AppointmentRead#seriesId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/50-recurrence/get-series-id.yaml

    var seriesId = Office.context.mailbox.item.seriesId;


    if (seriesId === undefined) {
      console.log("This is a message that's not a meeting request.");
    } else if (seriesId === null) {
      console.log("This is a single appointment, a parent series, or a meeting request for a series or single meeting.");
    } else {
      console.log("This is an instance belonging to series with ID " + seriesId);
    }
'Office.MessageCompose#seriesId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/50-recurrence/get-series-id.yaml

    var seriesId = Office.context.mailbox.item.seriesId;


    if (seriesId === undefined) {
      console.log("This is a message that's not a meeting request.");
    } else if (seriesId === null) {
      console.log("This is a single appointment, a parent series, or a meeting request for a series or single meeting.");
    } else {
      console.log("This is an instance belonging to series with ID " + seriesId);
    }
'Office.MessageRead#seriesId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/50-recurrence/get-series-id.yaml

    var seriesId = Office.context.mailbox.item.seriesId;


    if (seriesId === undefined) {
      console.log("This is a message that's not a meeting request.");
    } else if (seriesId === null) {
      console.log("This is a single appointment, a parent series, or a meeting request for a series or single meeting.");
    } else {
      console.log("This is an instance belonging to series with ID " + seriesId);
    }
'Office.Mailbox#displayAppointmentForm:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-existing-appointment.yaml

    var itemId = $("#itemId").val();

    Office.context.mailbox.displayAppointmentForm(itemId);
'Office.Mailbox#displayMessageForm:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-existing-message.yaml

    var itemId = $("#itemId").val();

    Office.context.mailbox.displayMessageForm(itemId);
'Office.Mailbox#displayNewAppointmentForm:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-new-appointment.yaml

    var start = new Date();

    var end = new Date();

    end.setHours(start.getHours() + 1);


    Office.context.mailbox.displayNewAppointmentForm({
      requiredAttendees: ["bob@contoso.com"],
      optionalAttendees: ["sam@contoso.com"],
      start: start,
      end: end,
      location: "Home",
      subject: "meeting",
      resources: ["projector@contoso.com"],
      body: "Hello World!"
    });
'Office.Mailbox#displayNewMessageForm:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-new-message.yaml

    Office.context.mailbox.displayNewMessageForm({
      toRecipients: Office.context.mailbox.item.to, // Copies the To line from current item
      ccRecipients: ["sam@contoso.com"],
      subject: "Outlook add-ins are cool!",
      htmlBody: 'Hello <b>World</b>!<br/><img src="cid:image.png"></i>',
      attachments: [
        {
          type: "file",
          name: "image.png",
          url: "http://www.cutestpaw.com/wp-content/uploads/2011/11/Cute-Black-Dogs-s.jpg",
          isInline: true
        }
      ]
    });
'Office.AppointmentRead#displayReplyForm:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyForm("This is a reply with <i>some
    text in italics</i>.");
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-reply-with-attachments.yaml

    Office.context.mailbox.item.displayReplyForm({
      htmlBody: "This is a reply with a couple of attachments - an inline image and an item<br><img src='cid:dog.jpg'>",
      attachments: [
        { type: "file", url: "http://i.imgur.com/9S36xvA.jpg", name: "dog.jpg", isInline: true },
        { type: "item", itemId: Office.context.mailbox.item.itemId, name: "test_email.msg" }
      ],
      options: { asyncContext: null },
      callback: function(result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
        }
      }
    });
'Office.MessageRead#displayReplyForm:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyForm("This is a reply with <i>some
    text in italics</i>.");
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-reply-with-attachments.yaml

    Office.context.mailbox.item.displayReplyForm({
      htmlBody: "This is a reply with a couple of attachments - an inline image and an item<br><img src='cid:dog.jpg'>",
      attachments: [
        { type: "file", url: "http://i.imgur.com/9S36xvA.jpg", name: "dog.jpg", isInline: true },
        { type: "item", itemId: Office.context.mailbox.item.itemId, name: "test_email.msg" }
      ],
      options: { asyncContext: null },
      callback: function(result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
        }
      }
    });
'Office.AppointmentRead#displayReplyAllForm:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyAllForm("This is a reply ALL with
    <b>some bold text</b>.");
'Office.MessageRead#displayReplyAllForm:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyAllForm("This is a reply ALL with
    <b>some bold text</b>.");
'Office.Mailbox#displayAppointmentFormAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-existing-appointment.yaml

    var itemId = $("#itemId").val();


    // The async version will return error 9049 if the item is not found.

    // The async version is only available starting with requirement set 1.9.

    Office.context.mailbox.displayAppointmentFormAsync(itemId,
    function(asyncResult) {
      console.log("Result: " + JSON.stringify(asyncResult));
    });
'Office.Mailbox#displayMessageFormAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-existing-message.yaml

    var itemId = $("#itemId").val();


    // The async version will return error 9049 if the item is not found.

    // The async version is only available starting with requirement set 1.9.

    Office.context.mailbox.displayMessageFormAsync(itemId, function
    (asyncResult) {
     console.log("Result: " + JSON.stringify(asyncResult));
    });
'Office.Mailbox#displayNewAppointmentFormAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-new-appointment.yaml

    var start = new Date();

    var end = new Date();

    end.setHours(start.getHours() + 1);


    // The async version is only available starting with requirement set 1.9,

    // and provides a callback when the new appointment form has been created.

    Office.context.mailbox.displayNewAppointmentFormAsync(
      {
        requiredAttendees: ["bob@contoso.com"],
        optionalAttendees: ["sam@contoso.com"],
        start: start,
        end: end,
        location: "Home",
        subject: "meeting",
        resources: ["projector@contoso.com"],
        body: "Hello World!"
      },
      function(asyncResult) {
        console.log(JSON.stringify(asyncResult));
      }
    );
'Office.Mailbox#displayNewMessageFormAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-new-message.yaml

    // The async version is only available starting with requirement set 1.9,

    // and provides a callback when the new message form has been created.

    Office.context.mailbox.displayNewMessageFormAsync(
      {
        toRecipients: Office.context.mailbox.item.to, // Copies the To line from current item
        ccRecipients: ["sam@contoso.com"],
        subject: "Outlook add-ins are cool!",
        htmlBody: 'Hello <b>World</b>!<br/><img src="cid:image.png"></i>',
        attachments: [
          {
            type: "file",
            name: "image.png",
            url: "http://www.cutestpaw.com/wp-content/uploads/2011/11/Cute-Black-Dogs-s.jpg",
            isInline: true
          }
        ]
      },
      function(asyncResult) {
        console.log(JSON.stringify(asyncResult));
      }
    );
'Office.AppointmentRead#displayReplyFormAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyFormAsync("This is a reply with
    <i>some text in italics</i>.", function(
      asyncResult
    ) {
      console.log(JSON.stringify(asyncResult));
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-reply-with-attachments.yaml

    // The async version is only available starting with requirement set 1.9,

    // and provides a callback when the new appointment form has been created.

    Office.context.mailbox.item.displayReplyFormAsync(
      {
        htmlBody: "This is a reply with a couple of attachments - an inline image and an item<br><img src='cid:dog.jpg'>",
        attachments: [
          { type: "file", url: "http://i.imgur.com/9S36xvA.jpg", name: "dog.jpg", isInline: true },
          { type: "item", itemId: Office.context.mailbox.item.itemId, name: "test_email.msg" }
        ]
      },
      function(asyncResult) {
        console.log(JSON.stringify(asyncResult));
      }
    );
'Office.MessageRead#displayReplyFormAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyFormAsync("This is a reply with
    <i>some text in italics</i>.", function(
      asyncResult
    ) {
      console.log(JSON.stringify(asyncResult));
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-reply-with-attachments.yaml

    // The async version is only available starting with requirement set 1.9,

    // and provides a callback when the new appointment form has been created.

    Office.context.mailbox.item.displayReplyFormAsync(
      {
        htmlBody: "This is a reply with a couple of attachments - an inline image and an item<br><img src='cid:dog.jpg'>",
        attachments: [
          { type: "file", url: "http://i.imgur.com/9S36xvA.jpg", name: "dog.jpg", isInline: true },
          { type: "item", itemId: Office.context.mailbox.item.itemId, name: "test_email.msg" }
        ]
      },
      function(asyncResult) {
        console.log(JSON.stringify(asyncResult));
      }
    );
'Office.AppointmentRead#displayReplyAllFormAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyAllFormAsync("This is a reply ALL
    with <b>some bold text</b>.", function(
      asyncResult
    ) {
      console.log(JSON.stringify(asyncResult));
    });
'Office.MessageRead#displayReplyAllFormAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyAllFormAsync("This is a reply ALL
    with <b>some bold text</b>.", function(
      asyncResult
    ) {
      console.log(JSON.stringify(asyncResult));
    });
'Office.AppointmentCompose#getSharedPropertiesAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on an item from a shared folder.");
      return;
    }


    Office.context.mailbox.item.getSharedPropertiesAsync(function(result) {
      console.log(result.value);
    });
'Office.AppointmentRead#getSharedPropertiesAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on an item from a shared folder.");
      return;
    }


    Office.context.mailbox.item.getSharedPropertiesAsync(function(result) {
      console.log(result.value);
    });
'Office.MessageCompose#getSharedPropertiesAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on an item from a shared folder.");
      return;
    }


    Office.context.mailbox.item.getSharedPropertiesAsync(function(result) {
      console.log(result.value);
    });
'Office.MessageRead#getSharedPropertiesAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on an item from a shared folder.");
      return;
    }


    Office.context.mailbox.item.getSharedPropertiesAsync(function(result) {
      console.log(result.value);
    });
'Office.AppointmentCompose#getSharedPropertiesAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on an appointment from a shared folder.");
      return;
    }


    Office.context.mailbox.getCallbackTokenAsync({ isRest: true },
    function(result) {
      if (result.status === Office.AsyncResultStatus.Succeeded && result.value !== "") {
        Office.context.mailbox.item.getSharedPropertiesAsync(
          {
            // Pass auth token along.
            asyncContext: result.value
          },
          function(result2) {
            let sharedProperties = result2.value;
            let delegatePermissions = sharedProperties.delegatePermissions;

            // Determine if user has the appropriate permission to do the operation.
            if ((delegatePermissions & Office.MailboxEnums.DelegatePermissions.Read) != 0) {
              var ewsId = Office.context.mailbox.item.itemId;
              var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
              let rest_url =
                sharedProperties.targetRestUrl + "/v2.0/users/" + sharedProperties.targetMailbox + "/events/" + restId;

              $.ajax({
                url: rest_url,
                dataType: "json",
                headers: { Authorization: "Bearer " + result2.asyncContext }
              })
                .done(function(response) {
                  console.log(response);
                })
                .fail(function(error) {
                  console.error(error);
                });
            }
          }
        );
      }
    });
'Office.AppointmentRead#getSharedPropertiesAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on an appointment from a shared folder.");
      return;
    }


    Office.context.mailbox.getCallbackTokenAsync({ isRest: true },
    function(result) {
      if (result.status === Office.AsyncResultStatus.Succeeded && result.value !== "") {
        Office.context.mailbox.item.getSharedPropertiesAsync(
          {
            // Pass auth token along.
            asyncContext: result.value
          },
          function(result2) {
            let sharedProperties = result2.value;
            let delegatePermissions = sharedProperties.delegatePermissions;

            // Determine if user has the appropriate permission to do the operation.
            if ((delegatePermissions & Office.MailboxEnums.DelegatePermissions.Read) != 0) {
              var ewsId = Office.context.mailbox.item.itemId;
              var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
              let rest_url =
                sharedProperties.targetRestUrl + "/v2.0/users/" + sharedProperties.targetMailbox + "/events/" + restId;

              $.ajax({
                url: rest_url,
                dataType: "json",
                headers: { Authorization: "Bearer " + result2.asyncContext }
              })
                .done(function(response) {
                  console.log(response);
                })
                .fail(function(error) {
                  console.error(error);
                });
            }
          }
        );
      }
    });
'Office.MessageCompose#getSharedPropertiesAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on a message from a shared folder.");
      return;
    }


    Office.context.mailbox.getCallbackTokenAsync({ isRest: true },
    function(result) {
      if (result.status === Office.AsyncResultStatus.Succeeded && result.value !== "") {
        Office.context.mailbox.item.getSharedPropertiesAsync(
          {
            // Pass auth token along.
            asyncContext: result.value
          },
          function(result2) {
            let sharedProperties = result2.value;
            let delegatePermissions = sharedProperties.delegatePermissions;

            // Determine if user has the appropriate permission to do the operation.
            if ((delegatePermissions & Office.MailboxEnums.DelegatePermissions.Read) != 0) {
              var ewsId = Office.context.mailbox.item.itemId;
              var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
              let rest_url =
                sharedProperties.targetRestUrl + "/v2.0/users/" + sharedProperties.targetMailbox + "/messages/" + restId;

              $.ajax({
                url: rest_url,
                dataType: "json",
                headers: { Authorization: "Bearer " + result2.asyncContext }
              })
                .done(function(response) {
                  console.log(response);
                })
                .fail(function(error) {
                  console.error(error);
                });
            }
          }
        );
      }
    });
'Office.MessageRead#getSharedPropertiesAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on a message from a shared folder.");
      return;
    }


    Office.context.mailbox.getCallbackTokenAsync({ isRest: true },
    function(result) {
      if (result.status === Office.AsyncResultStatus.Succeeded && result.value !== "") {
        Office.context.mailbox.item.getSharedPropertiesAsync(
          {
            // Pass auth token along.
            asyncContext: result.value
          },
          function(result2) {
            let sharedProperties = result2.value;
            let delegatePermissions = sharedProperties.delegatePermissions;

            // Determine if user has the appropriate permission to do the operation.
            if ((delegatePermissions & Office.MailboxEnums.DelegatePermissions.Read) != 0) {
              var ewsId = Office.context.mailbox.item.itemId;
              var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
              let rest_url =
                sharedProperties.targetRestUrl + "/v2.0/users/" + sharedProperties.targetMailbox + "/messages/" + restId;

              $.ajax({
                url: rest_url,
                dataType: "json",
                headers: { Authorization: "Bearer " + result2.asyncContext }
              })
                .done(function(response) {
                  console.log(response);
                })
                .fail(function(error) {
                  console.error(error);
                });
            }
          }
        );
      }
    });
'Office.AppointmentRead#getEntities:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/basic-entities.yaml

    var entities = Office.context.mailbox.item.getEntities();

    var entityTypesFound = 0;

    if (entities.addresses.length > 0) {
        console.warn("physical addresses: ");
        console.log(entities.addresses);
        entityTypesFound++;
    }

    if (entities.contacts.length > 0) {
        console.warn("contacts: ");
        entities.contacts.forEach(function (contact) { console.log(contact.personName); })
        entityTypesFound++;
    }

    if (entities.emailAddresses.length > 0) {
        console.warn("email addresses: ");
        console.log(entities.emailAddresses);
        entityTypesFound++;
    }

    if (entities.meetingSuggestions.length > 0) {
        console.warn("meetings suggestions: ");
        entities.meetingSuggestions.forEach(function (meetingSuggestion) { console.log(meetingSuggestion.meetingString); })
        entityTypesFound++;
    }

    if (entities.phoneNumbers.length > 0) {
        console.warn("phone numbers: ");
        entities.phoneNumbers.forEach(function (phoneNumber) { console.log(phoneNumber.originalPhoneString); })
        entityTypesFound++;
    }

    if (entities.taskSuggestions.length > 0) {
        console.warn("task suggestions: ");
        entities.taskSuggestions.forEach(function (taskSuggestion) { console.log(taskSuggestion.taskString); })
        entityTypesFound++;
    }

    if (entities.urls.length > 0) {
        console.warn("URLs: ");
        console.log(entities.urls);
        entityTypesFound++;
    }

    if (entityTypesFound == 0)

    {
        console.log("No entities found on this item.");
    }
'Office.MessageRead#getEntities:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/basic-entities.yaml

    var entities = Office.context.mailbox.item.getEntities();

    var entityTypesFound = 0;

    if (entities.addresses.length > 0) {
        console.warn("physical addresses: ");
        console.log(entities.addresses);
        entityTypesFound++;
    }

    if (entities.contacts.length > 0) {
        console.warn("contacts: ");
        entities.contacts.forEach(function (contact) { console.log(contact.personName); })
        entityTypesFound++;
    }

    if (entities.emailAddresses.length > 0) {
        console.warn("email addresses: ");
        console.log(entities.emailAddresses);
        entityTypesFound++;
    }

    if (entities.meetingSuggestions.length > 0) {
        console.warn("meetings suggestions: ");
        entities.meetingSuggestions.forEach(function (meetingSuggestion) { console.log(meetingSuggestion.meetingString); })
        entityTypesFound++;
    }

    if (entities.phoneNumbers.length > 0) {
        console.warn("phone numbers: ");
        entities.phoneNumbers.forEach(function (phoneNumber) { console.log(phoneNumber.originalPhoneString); })
        entityTypesFound++;
    }

    if (entities.taskSuggestions.length > 0) {
        console.warn("task suggestions: ");
        entities.taskSuggestions.forEach(function (taskSuggestion) { console.log(taskSuggestion.taskString); })
        entityTypesFound++;
    }

    if (entities.urls.length > 0) {
        console.warn("URLs: ");
        console.log(entities.urls);
        entityTypesFound++;
    }

    if (entityTypesFound == 0)

    {
        console.log("No entities found on this item.");
    }
'Office.AppointmentRead#getEntitiesByType:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/basic-entities.yaml

    console.log(Office.context.mailbox.item.getEntitiesByType(Office.MailboxEnums.EntityType.Address));
'Office.MessageRead#getEntitiesByType:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/basic-entities.yaml

    console.log(Office.context.mailbox.item.getEntitiesByType(Office.MailboxEnums.EntityType.Address));
'Office.AppointmentRead#getFilteredEntitiesByName:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted physical address
    that has the word "Way" in it.

    console.log(Office.context.mailbox.item.getFilteredEntitiesByName("sampleFilterName"));
'Office.MessageRead#getFilteredEntitiesByName:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted physical address
    that has the word "Way" in it.

    console.log(Office.context.mailbox.item.getFilteredEntitiesByName("sampleFilterName"));
'Office.AppointmentRead#getRegExMatches:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted word "ScriptLab".

    console.log(Office.context.mailbox.item.getRegExMatches());
'Office.MessageRead#getRegExMatches:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted word "ScriptLab".

    console.log(Office.context.mailbox.item.getRegExMatches());
'Office.AppointmentRead#getRegExMatchesByName:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted word "ScriptLab".

    console.log(Office.context.mailbox.item.getRegExMatchesByName("sampleRegexName"));
'Office.MessageRead#getRegExMatchesByName:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted word "ScriptLab".

    console.log(Office.context.mailbox.item.getRegExMatchesByName("sampleRegexName"));
'Office.AppointmentRead#getSelectedEntities:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/selected.yaml

    var entities = Office.context.mailbox.item.getSelectedEntities();

    var entityTypesFound = 0;

    if (entities.addresses.length > 0) {
        console.warn("physical addresses: ");
        console.log(entities.addresses);
        entityTypesFound++;
    }

    if (entities.contacts.length > 0) {
        console.warn("contacts: ");
        entities.contacts.forEach(function (contact) { console.log(contact.personName); })
        entityTypesFound++;
    }

    if (entities.emailAddresses.length > 0) {
        console.warn("email addresses: ");
        console.log(entities.emailAddresses);
        entityTypesFound++;
    }

    if (entities.meetingSuggestions.length > 0) {
        console.warn("meetings suggestions: ");
        entities.meetingSuggestions.forEach(function (meetingSuggestion) { console.log(meetingSuggestion.meetingString); })
        entityTypesFound++;
    }

    if (entities.phoneNumbers.length > 0) {
        console.warn("phone numbers: ");
        entities.phoneNumbers.forEach(function (phoneNumber) { console.log(phoneNumber.originalPhoneString); })
        entityTypesFound++;
    }

    if (entities.taskSuggestions.length > 0) {
        console.warn("task suggestions: ");
        entities.taskSuggestions.forEach(function (taskSuggestion) { console.log(taskSuggestion.taskString); })
        entityTypesFound++;
    }

    if (entities.urls.length > 0) {
        console.warn("URLs: ");
        console.log(entities.urls);
        entityTypesFound++;
    }

    if (entityTypesFound == 0)

    {
        console.error("Open add-in by clicking on a highlighted entity, for this API to return something useful.");
    }
'Office.MessageRead#getSelectedEntities:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/selected.yaml

    var entities = Office.context.mailbox.item.getSelectedEntities();

    var entityTypesFound = 0;

    if (entities.addresses.length > 0) {
        console.warn("physical addresses: ");
        console.log(entities.addresses);
        entityTypesFound++;
    }

    if (entities.contacts.length > 0) {
        console.warn("contacts: ");
        entities.contacts.forEach(function (contact) { console.log(contact.personName); })
        entityTypesFound++;
    }

    if (entities.emailAddresses.length > 0) {
        console.warn("email addresses: ");
        console.log(entities.emailAddresses);
        entityTypesFound++;
    }

    if (entities.meetingSuggestions.length > 0) {
        console.warn("meetings suggestions: ");
        entities.meetingSuggestions.forEach(function (meetingSuggestion) { console.log(meetingSuggestion.meetingString); })
        entityTypesFound++;
    }

    if (entities.phoneNumbers.length > 0) {
        console.warn("phone numbers: ");
        entities.phoneNumbers.forEach(function (phoneNumber) { console.log(phoneNumber.originalPhoneString); })
        entityTypesFound++;
    }

    if (entities.taskSuggestions.length > 0) {
        console.warn("task suggestions: ");
        entities.taskSuggestions.forEach(function (taskSuggestion) { console.log(taskSuggestion.taskString); })
        entityTypesFound++;
    }

    if (entities.urls.length > 0) {
        console.warn("URLs: ");
        console.log(entities.urls);
        entityTypesFound++;
    }

    if (entityTypesFound == 0)

    {
        console.error("Open add-in by clicking on a highlighted entity, for this API to return something useful.");
    }
'Office.AppointmentRead#getSelectedRegExMatches:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/selected.yaml

    var matches = Office.context.mailbox.item.getSelectedRegExMatches();

    if (matches) {
        console.log(matches);
    }

    else {
        console.error("Open add-in by clicking on a highlighted regex match, for this API to return something useful.");
    }
'Office.MessageRead#getSelectedRegExMatches:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/selected.yaml

    var matches = Office.context.mailbox.item.getSelectedRegExMatches();

    if (matches) {
        console.log(matches);
    }

    else {
        console.error("Open add-in by clicking on a highlighted regex match, for this API to return something useful.");
    }
'Office.Mailbox#convertToRestId:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/basic-rest-cors.yaml

    Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function
    (result) {
        var ewsId = Office.context.mailbox.item.itemId;
        var token = result.value;
        var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
        var getMessageUrl = Office.context.mailbox.restUrl + '/v2.0/me/messages/' + restId;
                
        var xhr = new XMLHttpRequest();
        xhr.open('GET', getMessageUrl);
        xhr.setRequestHeader("Authorization", "Bearer " + token);
        xhr.onload = function (e) {
            console.log(this.response);
        }
        xhr.send();
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml

    console.log("EWS URL: " + Office.context.mailbox.ewsUrl);

    var ewsId = Office.context.mailbox.item.itemId;

    console.log("EWS item ID: " + Office.context.mailbox.item.itemId);


    console.log("REST URL: " + Office.context.mailbox.restUrl);

    var restId = Office.context.mailbox.convertToRestId(ewsId,
    Office.MailboxEnums.RestVersion.v2_0);

    console.log("REST item ID: " + restId);


    var ewsId2 = Office.context.mailbox.convertToEwsId(restId,
    Office.MailboxEnums.RestVersion.v2_0);

    console.log("EWS ID (from REST ID): " + ewsId2);
'Office.Mailbox#restUrl:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/basic-rest-cors.yaml

    Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function
    (result) {
        var ewsId = Office.context.mailbox.item.itemId;
        var token = result.value;
        var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
        var getMessageUrl = Office.context.mailbox.restUrl + '/v2.0/me/messages/' + restId;
                
        var xhr = new XMLHttpRequest();
        xhr.open('GET', getMessageUrl);
        xhr.setRequestHeader("Authorization", "Bearer " + token);
        xhr.onload = function (e) {
            console.log(this.response);
        }
        xhr.send();
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml

    console.log("EWS URL: " + Office.context.mailbox.ewsUrl);

    var ewsId = Office.context.mailbox.item.itemId;

    console.log("EWS item ID: " + Office.context.mailbox.item.itemId);


    console.log("REST URL: " + Office.context.mailbox.restUrl);

    var restId = Office.context.mailbox.convertToRestId(ewsId,
    Office.MailboxEnums.RestVersion.v2_0);

    console.log("REST item ID: " + restId);


    var ewsId2 = Office.context.mailbox.convertToEwsId(restId,
    Office.MailboxEnums.RestVersion.v2_0);

    console.log("EWS ID (from REST ID): " + ewsId2);
'Office.Mailbox#getCallbackTokenAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/basic-rest-cors.yaml

    Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function
    (result) {
        var ewsId = Office.context.mailbox.item.itemId;
        var token = result.value;
        var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
        var getMessageUrl = Office.context.mailbox.restUrl + '/v2.0/me/messages/' + restId;
                
        var xhr = new XMLHttpRequest();
        xhr.open('GET', getMessageUrl);
        xhr.setRequestHeader("Authorization", "Bearer " + token);
        xhr.onload = function (e) {
            console.log(this.response);
        }
        xhr.send();
    });
'Office.Mailbox#ewsUrl:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml

    console.log("EWS URL: " + Office.context.mailbox.ewsUrl);

    var ewsId = Office.context.mailbox.item.itemId;

    console.log("EWS item ID: " + Office.context.mailbox.item.itemId);


    console.log("REST URL: " + Office.context.mailbox.restUrl);

    var restId = Office.context.mailbox.convertToRestId(ewsId,
    Office.MailboxEnums.RestVersion.v2_0);

    console.log("REST item ID: " + restId);


    var ewsId2 = Office.context.mailbox.convertToEwsId(restId,
    Office.MailboxEnums.RestVersion.v2_0);

    console.log("EWS ID (from REST ID): " + ewsId2);
'Office.Mailbox#convertToEwsId:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml

    console.log("EWS URL: " + Office.context.mailbox.ewsUrl);

    var ewsId = Office.context.mailbox.item.itemId;

    console.log("EWS item ID: " + Office.context.mailbox.item.itemId);


    console.log("REST URL: " + Office.context.mailbox.restUrl);

    var restId = Office.context.mailbox.convertToRestId(ewsId,
    Office.MailboxEnums.RestVersion.v2_0);

    console.log("REST item ID: " + restId);


    var ewsId2 = Office.context.mailbox.convertToEwsId(restId,
    Office.MailboxEnums.RestVersion.v2_0);

    console.log("EWS ID (from REST ID): " + ewsId2);
'Office.AppointmentCompose#getItemIdAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/item-id-compose.yaml

    Office.context.mailbox.item.getItemIdAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(`getItemIdAsync failed with message: ${result.error.message}`);
        } else {
            console.log(result.value);
        }
    });
'Office.MessageCompose#getItemIdAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/item-id-compose.yaml

    Office.context.mailbox.item.getItemIdAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(`getItemIdAsync failed with message: ${result.error.message}`);
        } else {
            console.log(result.value);
        }
    });
'Office.Mailbox#makeEwsRequestAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/make-ews-request-async.yaml

    var ewsId = Office.context.mailbox.item.itemId;

    var request = '<soap:Envelope
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages"
    xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types"
    xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">' +
        '  <soap:Header><t:RequestServerVersion Version="Exchange2013" /></soap:Header>' +
        '  <soap:Body>' +
        '    <m:GetItem>' +
        '      <m:ItemShape>' +
        '        <t:BaseShape>IdOnly</t:BaseShape>' +
        '      </m:ItemShape >' +
        '      <m:ItemIds>' +
        '        <t:ItemId Id="' + ewsId + '" />' +
        '      </m:ItemIds>' +
        '    </m:GetItem>' +
        '  </soap:Body>' +
        '</soap:Envelope>';

    Office.context.mailbox.makeEwsRequestAsync(request, function (result) {
        console.log(result);
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/send-message-using-make-ews-request-async.yaml

    var request = '<soap:Envelope
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages"
    xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types"
    xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">'+
        '  <soap:Header><t:RequestServerVersion Version="Exchange2010" /></soap:Header>'+
        '  <soap:Body>'+
        '    <m:CreateItem MessageDisposition="SendAndSaveCopy">'+
        '      <m:SavedItemFolderId><t:DistinguishedFolderId Id="sentitems" /></m:SavedItemFolderId>'+
        '      <m:Items>'+
        '        <t:Message>'+
        '          <t:Subject>Hello, Outlook!</t:Subject>'+
        '          <t:Body BodyType="HTML">This message was sent from a ScriptLab code sample, used from ' + Office.context.mailbox.diagnostics.hostName + ', version ' + Office.context.mailbox.diagnostics.hostVersion + '!</t:Body>'+
        '          <t:ToRecipients>'+
        '            <t:Mailbox><t:EmailAddress>' + Office.context.mailbox.userProfile.emailAddress + '</t:EmailAddress></t:Mailbox>'+
        '          </t:ToRecipients>'+
        '        </t:Message>'+
        '      </m:Items>'+
        '    </m:CreateItem>'+
        '  </soap:Body>'+
        '</soap:Envelope>';

    Office.context.mailbox.makeEwsRequestAsync(request, function (result) {
        console.log(result);
    });
'Office.Mailbox#getCallbackTokenAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/user-callback-token.yaml

    Office.context.mailbox.getCallbackTokenAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(`Token retrieval failed with message: ${result.error.message}`);
        } else {
            console.log(result.value);
        }
    });
'Office.Mailbox#getUserIdentityTokenAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/user-identity-token.yaml

    Office.context.mailbox.getUserIdentityTokenAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(`Token retrieval failed with message: ${result.error.message}`);
        } else {
            console.log(result.value);
        }
    });
'Office.MessageCompose#getComposeTypeAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/work-with-client-signatures.yaml

    // Get the compose type of the current item (mail only).

    Office.context.mailbox.item.getComposeTypeAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log(
          "getComposeTypeAsync succeeded with composeType: " +
            asyncResult.value.composeType +
            " and coercionType: " +
            asyncResult.value.coercionType
        );
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.Body#setSignatureAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/work-with-client-signatures.yaml

    // Set the signature for the current item with inline image.

    var modIcon1Base64 =
    "iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA2ZpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYxIDY0LjE0MDk0OSwgMjAxMC8xMi8wNy0xMDo1NzowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpDRDMxMDg1MjBCNDZFMTExODE2MkM1RUI2M0M4MDYxRCIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpFMTUxQjgyRjQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpFMTUxQjgyRTQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M1LjEgV2luZG93cyI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkQxMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkNEMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+uC/WfAAAAehJREFUeNpilCzfwEAEkAbiECA2A2J1IOaHin8E4ptAfBaIVwLxU0IGMRKw0B6IW4DYhoE4cASIK6E0VsCEQ1wUiNcB8QESLGOAqj0MxBuhZhBloS4QnwHiQAbygR/UDF1CFupCXSjHQDmQg5qli8tCUBBsQUoQ1AD8UDNFsVk4n0o+w+bT+egWglKjNymmeGhLkqLcG2oHAwtUoIuQDj5OVgZPLUmwRe5aEmAxqYqNpFgKssOcCeplM0KqdST5GfpDDRm0JfkYrj3/SE7QguyQY4ImYYLgCtAS10kHGMw6dzNsv/qC7OwCClJXYlR++v6b4er3j5QmIFcmaNlIL6AOslCIjhYKMTHQGTBBqxh6gXcgC6/R0cKbIAv30dHCfaAKGJTxHxJSqS3Fz9DkowNmywpyMcgA8fF7b8D8VWcfM6w8+4gYC+VB+RCk8hSh0gaUD4/dewvlvUWRe/z+GzGWgex4BGtiOAHxXhoHpzMoSGHZAhSPW2lo2VZYWkHOh4nEtLrIAE+hZmNUwK+B2BOIv1PRsu9QM1/jatNcBtVZ0IREKXgENesyoVYbzNIdFFi2A5tl+NqlL6BB4QBNzsSCU1A9nlAzMAALAQMOQl0qB23qWwKxIlIrDBQ394H4OBCvISYqAAIMACVibHDqsO7zAAAAAElFTkSuQmCC";

    Office.context.mailbox.item.addFileAttachmentFromBase64Async(
      modIcon1Base64,
      "myImage.png",
      { isInline: true },
      function(result) {
        if (result.status == Office.AsyncResultStatus.Succeeded) {
          var signature = $("#signature").val() + "<img src='cid:myImage.png'>";
          console.log(`Setting signature to "${signature}".`);
          // Important: setSignatureAsync is currently in preview.
          Office.context.mailbox.item.body.setSignatureAsync(
            signature,
            { coercionType: "html" },
            function(asyncResult) {
              console.log(`setSignatureAsync: ${asyncResult.status}`);
            }
          );
        } else {
          console.error(`addFileAttachmentFromBase64Async: ${result.error}`);
        }
      }
    );
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/work-with-client-signatures.yaml

    // Set the signature for the current item.

    var signature = $("#signature").val();

    console.log(`Setting signature to "${signature}".`);

    Office.context.mailbox.item.body.setSignatureAsync(signature,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("setSignatureAsync succeeded");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.AppointmentCompose#disableClientSignatureAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/work-with-client-signatures.yaml

    // Disable the client signature.

    Office.context.mailbox.item.disableClientSignatureAsync(function(asyncResult)
    {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("disableClientSignatureAsync succeeded");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageCompose#disableClientSignatureAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/work-with-client-signatures.yaml

    // Disable the client signature.

    Office.context.mailbox.item.disableClientSignatureAsync(function(asyncResult)
    {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("disableClientSignatureAsync succeeded");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.AppointmentCompose#isClientSignatureEnabledAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/work-with-client-signatures.yaml

    // Check if the client signature is currently enabled.

    Office.context.mailbox.item.isClientSignatureEnabledAsync(function(asyncResult)
    {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("isClientSignatureEnabledAsync succeeded with result: " + asyncResult.value);
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageCompose#isClientSignatureEnabledAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/work-with-client-signatures.yaml

    // Check if the client signature is currently enabled.

    Office.context.mailbox.item.isClientSignatureEnabledAsync(function(asyncResult)
    {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("isClientSignatureEnabledAsync succeeded with result: " + asyncResult.value);
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.AppointmentRead#subject:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-subject-read.yaml

    console.log(`Subject: ${Office.context.mailbox.item.subject}`);
'Office.MessageRead#subject:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-subject-read.yaml

    console.log(`Subject: ${Office.context.mailbox.item.subject}`);
'Office.AppointmentCompose#subject:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-subject-compose.yaml

    Office.context.mailbox.item.subject.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Subject: ${result.value}`);
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-subject-compose.yaml

    let subject = "Hello World!";

    Office.context.mailbox.item.subject.setAsync(subject, (result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Successfully set subject to ${subject}`);
    });
'Office.MessageCompose#subject:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-subject-compose.yaml

    Office.context.mailbox.item.subject.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Subject: ${result.value}`);
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-subject-compose.yaml

    let subject = "Hello World!";

    Office.context.mailbox.item.subject.setAsync(subject, (result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Successfully set subject to ${subject}`);
    });
'Office.MessageRead#internetMessageId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-internet-message-id-read.yaml

    console.log(`Internet message ID:
    ${Office.context.mailbox.item.internetMessageId}`);
'Office.AppointmentRead#itemClass:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-item-class-read.yaml

    console.log(`Item class: ${Office.context.mailbox.item.itemClass}`);
'Office.MessageRead#itemClass:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-item-class-read.yaml

    console.log(`Item class: ${Office.context.mailbox.item.itemClass}`);
'Office.AppointmentCompose#itemType:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-item-type.yaml

    console.log(`Item type: ${Office.context.mailbox.item.itemType}`);
'Office.AppointmentRead#itemType:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-item-type.yaml

    console.log(`Item type: ${Office.context.mailbox.item.itemType}`);
'Office.MessageCompose#itemType:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-item-type.yaml

    console.log(`Item type: ${Office.context.mailbox.item.itemType}`);
'Office.MessageRead#itemType:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-item-type.yaml

    console.log(`Item type: ${Office.context.mailbox.item.itemType}`);
'Office.AppointmentRead#start:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-start-read.yaml

    console.log(`Appointment starts: ${Office.context.mailbox.item.start}`);
'Office.MessageRead#start:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-start-read.yaml

    console.log(`Appointment starts: ${Office.context.mailbox.item.start}`);
'Office.AppointmentCompose#start:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-start-appointment-organizer.yaml

    Office.context.mailbox.item.start.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Appointment starts: ${result.value}`);
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-start-appointment-organizer.yaml

    var start = new Date(); // Represents current date and time.

    start.setDate(start.getDate() + 2); // Add 2 days to current date.

    Office.context.mailbox.item.start.setAsync(start, (result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Successfully set start date and time to ${start}`);
    });
'Office.Time#getAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-start-appointment-organizer.yaml

    Office.context.mailbox.item.start.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Appointment starts: ${result.value}`);
    });
'Office.Time#setAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-start-appointment-organizer.yaml

    var start = new Date(); // Represents current date and time.

    start.setDate(start.getDate() + 2); // Add 2 days to current date.

    Office.context.mailbox.item.start.setAsync(start, (result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Successfully set start date and time to ${start}`);
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-end-appointment-organizer.yaml

    Office.context.mailbox.item.start.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Get start date failed with message ${result.error.message}`);
        return;
      }

      var end = result.value; // Set end to current start date and time.
      end.setDate(end.getDate() + 1); // Set end as 1 day later than start date.
      Office.context.mailbox.item.end.setAsync(end, (result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Set end date failed with message ${result.error.message}`);
          return;
        }
        console.log(`Successfully set end date and time to ${end}`);
      });
    });
'Office.AppointmentRead#normalizedSubject:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-normalized-subject-read.yaml

    console.log(`Normalized subject:
    ${Office.context.mailbox.item.normalizedSubject}`);
'Office.MessageRead#normalizedSubject:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-normalized-subject-read.yaml

    console.log(`Normalized subject:
    ${Office.context.mailbox.item.normalizedSubject}`);
'Office.MessageCompose#conversationId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-conversation-id-message.yaml

    console.log(`Conversation ID:
    ${Office.context.mailbox.item.conversationId}`);
'Office.MessageRead#conversationId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-conversation-id-message.yaml

    console.log(`Conversation ID:
    ${Office.context.mailbox.item.conversationId}`);
'Office.AppointmentRead#dateTimeCreated:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-date-time-created-read.yaml

    console.log(`Creation date and time:
    ${Office.context.mailbox.item.dateTimeCreated}`);
'Office.MessageRead#dateTimeCreated:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-date-time-created-read.yaml

    console.log(`Creation date and time:
    ${Office.context.mailbox.item.dateTimeCreated}`);
'Office.AppointmentRead#dateTimeModified:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-date-time-modified-read.yaml

    console.log(`Date and time item last modified:
    ${Office.context.mailbox.item.dateTimeModified}`);
'Office.MessageRead#dateTimeModified:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-date-time-modified-read.yaml

    console.log(`Date and time item last modified:
    ${Office.context.mailbox.item.dateTimeModified}`);
'Office.AppointmentRead#end:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-end-read.yaml

    console.log(`Appointment ends: ${Office.context.mailbox.item.end}`);
'Office.MessageRead#end:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-end-read.yaml

    console.log(`Appointment ends: ${Office.context.mailbox.item.end}`);
'Office.AppointmentCompose#end:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-end-appointment-organizer.yaml

    Office.context.mailbox.item.end.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Appointment ends: ${result.value}`);
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-end-appointment-organizer.yaml

    Office.context.mailbox.item.start.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Get start date failed with message ${result.error.message}`);
        return;
      }

      var end = result.value; // Set end to current start date and time.
      end.setDate(end.getDate() + 1); // Set end as 1 day later than start date.
      Office.context.mailbox.item.end.setAsync(end, (result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Set end date failed with message ${result.error.message}`);
          return;
        }
        console.log(`Successfully set end date and time to ${end}`);
      });
    });
'Office.AppointmentRead#location:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-location-read.yaml

    console.log(`Appointment location:
    ${Office.context.mailbox.item.location}`);
'Office.MessageRead#location:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-location-read.yaml

    console.log(`Appointment location:
    ${Office.context.mailbox.item.location}`);
'Office.AppointmentCompose#location:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-location-appointment-organizer.yaml

    Office.context.mailbox.item.location.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Appointment location: ${result.value}`);
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-location-appointment-organizer.yaml

    var location = "my office";

    Office.context.mailbox.item.location.setAsync(location, (result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Successfully set location to ${location}`);
    });
'Office.Location#getAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-location-appointment-organizer.yaml

    Office.context.mailbox.item.location.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Appointment location: ${result.value}`);
    });
'Office.Location#setAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-location-appointment-organizer.yaml

    var location = "my office";

    Office.context.mailbox.item.location.setAsync(location, (result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Successfully set location to ${location}`);
    });
'Office.AppointmentCompose#enhancedLocation:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml

    Office.context.mailbox.item.enhancedLocation.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to get locations. Error message: ${result.error.message}`);
        return;
      }
      var places = result.value;
      if (places && places.length > 0) {
        result.value.forEach(function(place) {
          console.log(`Location: ${place.displayName} (type: ${place.locationIdentifier.type})`);
          if (place.locationIdentifier.type === Office.MailboxEnums.LocationType.Room) {
            console.log("Email address: " + place.emailAddress);
          }
        });
      } else {
        console.log("There are no locations.");
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml

    var locations = [
      {
        id: "Contoso",
        type: Office.MailboxEnums.LocationType.Custom
      },
      {
        id: "room500@test.com",
        type: Office.MailboxEnums.LocationType.Room
      }
    ];

    Office.context.mailbox.item.enhancedLocation.addAsync(locations, (result) =>
    {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log(`Successfully added locations ${JSON.stringify(locations)}`);
      } else {
        console.error(`Failed to add locations. Error message: ${result.error.message}`);
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml

    var locations = [
      {
        id: "Contoso",
        type: Office.MailboxEnums.LocationType.Custom
      },
      {
        id: "room500@test.com",
        type: Office.MailboxEnums.LocationType.Room
      }
    ];

    Office.context.mailbox.item.enhancedLocation.removeAsync(locations, (result)
    => {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log(`Successfully removed locations ${JSON.stringify(locations)}`);
      } else {
        console.error(`Failed to remove locations. Error message: ${result.error.message}`);
      }
    });
'Office.AppointmentRead#enhancedLocation:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml

    Office.context.mailbox.item.enhancedLocation.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to get locations. Error message: ${result.error.message}`);
        return;
      }
      var places = result.value;
      if (places && places.length > 0) {
        result.value.forEach(function(place) {
          console.log(`Location: ${place.displayName} (type: ${place.locationIdentifier.type})`);
          if (place.locationIdentifier.type === Office.MailboxEnums.LocationType.Room) {
            console.log("Email address: " + place.emailAddress);
          }
        });
      } else {
        console.log("There are no locations.");
      }
    });
'Office.EnhancedLocation#getAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml

    Office.context.mailbox.item.enhancedLocation.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to get locations. Error message: ${result.error.message}`);
        return;
      }
      var places = result.value;
      if (places && places.length > 0) {
        result.value.forEach(function(place) {
          console.log(`Location: ${place.displayName} (type: ${place.locationIdentifier.type})`);
          if (place.locationIdentifier.type === Office.MailboxEnums.LocationType.Room) {
            console.log("Email address: " + place.emailAddress);
          }
        });
      } else {
        console.log("There are no locations.");
      }
    });
'Office.EnhancedLocation#addAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml

    var locations = [
      {
        id: "Contoso",
        type: Office.MailboxEnums.LocationType.Custom
      },
      {
        id: "room500@test.com",
        type: Office.MailboxEnums.LocationType.Room
      }
    ];

    Office.context.mailbox.item.enhancedLocation.addAsync(locations, (result) =>
    {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log(`Successfully added locations ${JSON.stringify(locations)}`);
      } else {
        console.error(`Failed to add locations. Error message: ${result.error.message}`);
      }
    });
'Office.EnhancedLocation#removeAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml

    var locations = [
      {
        id: "Contoso",
        type: Office.MailboxEnums.LocationType.Custom
      },
      {
        id: "room500@test.com",
        type: Office.MailboxEnums.LocationType.Room
      }
    ];

    Office.context.mailbox.item.enhancedLocation.removeAsync(locations, (result)
    => {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log(`Successfully removed locations ${JSON.stringify(locations)}`);
      } else {
        console.error(`Failed to remove locations. Error message: ${result.error.message}`);
      }
    });
'Office.AppointmentCompose#isAllDayEvent:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/calendar-properties-apis.yaml

    Office.context.mailbox.item.isAllDayEvent.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Is this an all-day event? " + asyncResult.value);
      } else {
        console.log("Failed to get if this is an all-day event. Error: " + JSON.stringify(asyncResult.error));
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/calendar-properties-apis.yaml

    Office.context.mailbox.item.isAllDayEvent.setAsync(true,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log("Failed to set all-day event: " + JSON.stringify(asyncResult.error));
      } else {
        console.log("Appointment set to all-day event.");
      }
    });
'Office.IsAllDayEvent#getAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/calendar-properties-apis.yaml

    Office.context.mailbox.item.isAllDayEvent.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Is this an all-day event? " + asyncResult.value);
      } else {
        console.log("Failed to get if this is an all-day event. Error: " + JSON.stringify(asyncResult.error));
      }
    });
'Office.IsAllDayEvent#setAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/calendar-properties-apis.yaml

    Office.context.mailbox.item.isAllDayEvent.setAsync(true,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log("Failed to set all-day event: " + JSON.stringify(asyncResult.error));
      } else {
        console.log("Appointment set to all-day event.");
      }
    });
'Office.AppointmentCompose#sensitivity:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/calendar-properties-apis.yaml

    Office.context.mailbox.item.sensitivity.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Sensitivity: " + asyncResult.value);
      } else {
        console.log("Failed to get sensitivity: " + JSON.stringify(asyncResult.error));
      }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/calendar-properties-apis.yaml

    Office.context.mailbox.item.sensitivity.setAsync(
      Office.MailboxEnums.AppointmentSensitivityType.Confidential,
      function callback(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Failed) {
          console.log("Failed to set appointment sensitivity: " + JSON.stringify(asyncResult.error));
        } else {
          console.log("Successfully set appointment sensitivity.");
        }
      }
    );
'Office.Sensitivity#getAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/calendar-properties-apis.yaml

    Office.context.mailbox.item.sensitivity.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Sensitivity: " + asyncResult.value);
      } else {
        console.log("Failed to get sensitivity: " + JSON.stringify(asyncResult.error));
      }
    });
'Office.Sensitivity#setAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/calendar-properties-apis.yaml

    Office.context.mailbox.item.sensitivity.setAsync(
      Office.MailboxEnums.AppointmentSensitivityType.Confidential,
      function callback(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Failed) {
          console.log("Failed to set appointment sensitivity: " + JSON.stringify(asyncResult.error));
        } else {
          console.log("Successfully set appointment sensitivity.");
        }
      }
    );
'Office.AppointmentCompose#sessionData:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/session-data-apis.yaml

    Office.context.mailbox.item.sessionData.getAllAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("The sessionData is " + JSON.stringify(asyncResult.value));
      } else {
        console.log("Failed to get all sessionData. Error: " + JSON.stringify(asyncResult.error));
      }
    });
'Office.MessageCompose#sessionData:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/session-data-apis.yaml

    Office.context.mailbox.item.sessionData.getAllAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("The sessionData is " + JSON.stringify(asyncResult.value));
      } else {
        console.log("Failed to get all sessionData. Error: " + JSON.stringify(asyncResult.error));
      }
    });
'Office.SessionData#setAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/session-data-apis.yaml

    Office.context.mailbox.item.sessionData.setAsync(
      "Date",
      "7/24/2020",
      function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("sessionData.setAsync succeeded");
      } else {
        console.log("Failed to set sessionData. Error: " + JSON.stringify(asyncResult.error));
      }
    });
'Office.SessionData#getAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/session-data-apis.yaml

    Office.context.mailbox.item.sessionData.getAsync(
      "Date",
      function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("The sessionData value is " + JSON.stringify(asyncResult.value));
      } else {
        console.log("Failed to get sessionData. Error: " + JSON.stringify(asyncResult.error));
      }
    });
'Office.SessionData#getAllAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/session-data-apis.yaml

    Office.context.mailbox.item.sessionData.getAllAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("The sessionData is " + JSON.stringify(asyncResult.value));
      } else {
        console.log("Failed to get all sessionData. Error: " + JSON.stringify(asyncResult.error));
      }
    });
'Office.SessionData#removeAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/session-data-apis.yaml

    Office.context.mailbox.item.sessionData.removeAsync(
      "Date",
      function callback(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("sessionData.removeAsync succeeded");
        } else {
          console.log("Failed to remove sessionData. Error: " + JSON.stringify(asyncResult.error));
        }
      }
    );
'Office.SessionData#clearAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/session-data-apis.yaml

    Office.context.mailbox.item.sessionData.clearAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("sessionData.clearAsync succeeded");
      } else {
        console.log("Failed to clear sessionData. Error: " + JSON.stringify(asyncResult.error));
      }
    });
'Office.MessageRead#getAllInternetHeadersAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/70-mime-headers/get-internet-headers-message-read.yaml

    Office.context.mailbox.item.getAllInternetHeadersAsync(function
    (asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Internet headers received successfully");
        if (asyncResult.value.match(/x-preferred-fruit:.*/gim)) {
          console.log("Sender's preferred fruit: " + asyncResult.value.match(/x-preferred-fruit:.*/gim)[0].slice(19));
        } else {
          console.log("Didn't receive header with sender's preferred fruit");
        }
        if (asyncResult.value.match(/x-preferred-vegetable:.*/gim)) {
          console.log(
            "Sender's preferred vegetable: " + asyncResult.value.match(/x-preferred-vegetable:.*/gim)[0].slice(23)
          );
        } else {
          console.log("Didn't receive header with sender's preferred vegetable");
        }
      } else {
        console.log("Error getting internet headers: " + JSON.stringify(asyncResult.error));
      }
    });
'Office.MessageCompose#internetHeaders:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/70-mime-headers/manage-custom-internet-headers-message-compose.yaml

    Office.context.mailbox.item.internetHeaders.getAsync(
      ["x-preferred-fruit", "x-preferred-vegetable", "x-best-vegetable", "x-nonexistent-header"],
      function (asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Selected headers: " + JSON.stringify(asyncResult.value));
        } else {
          console.log("Error getting selected headers: " + JSON.stringify(asyncResult.error));
        }
      }
    );
'Office.InternetHeaders#getAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/70-mime-headers/manage-custom-internet-headers-message-compose.yaml

    Office.context.mailbox.item.internetHeaders.getAsync(
      ["x-preferred-fruit", "x-preferred-vegetable", "x-best-vegetable", "x-nonexistent-header"],
      function (asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Selected headers: " + JSON.stringify(asyncResult.value));
        } else {
          console.log("Error getting selected headers: " + JSON.stringify(asyncResult.error));
        }
      }
    );
'Office.InternetHeaders#removeAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/70-mime-headers/manage-custom-internet-headers-message-compose.yaml

    Office.context.mailbox.item.internetHeaders.removeAsync(
      ["x-best-vegetable", "x-nonexistent-header"],
      function (asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Successfully removed selected headers");
        } else {
          console.log("Error removing selected headers: " + JSON.stringify(asyncResult.error));
        }
      }
    );
'Office.InternetHeaders#setAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/70-mime-headers/manage-custom-internet-headers-message-compose.yaml

    Office.context.mailbox.item.internetHeaders.setAsync(
      { "x-preferred-fruit": "orange", "x-preferred-vegetable": "broccoli", "x-best-vegetable": "spinach" },
      function (asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Successfully set headers");
        } else {
          console.log("Error setting headers: " + JSON.stringify(asyncResult.error));
        }
      }

    );
'Word.Body#search:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/25-paragraph/search.yaml

    await Word.run(async (context) => {
      let results = context.document.body.search("Online");
      results.load("length");

      await context.sync();

      // Let's traverse the search results... and highlight...
      for (let i = 0; i < results.items.length; i++) {
        results.items[i].font.highlightColor = "yellow";
      }

      await context.sync();
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/25-paragraph/search.yaml

    await Word.run(async (context) => {
      // Check out how wildcard expression are built, also use the second parameter of the search method to include search modes
      // (i.e. use wildcards).
      let results = context.document.body.search("$*.[0-9][0-9]", { matchWildcards: true });
      results.load("length");

      await context.sync();

      // Let's traverse the search results... and highlight...
      for (let i = 0; i < results.items.length; i++) {
        results.items[i].font.highlightColor = "red";
        results.items[i].font.color = "white";
      }

      await context.sync();
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/25-paragraph/get-word-count.yaml

    await Word.run(async (context) => {
      let paragraphs = context.document.body.paragraphs;
      paragraphs.load("text");
      await context.sync();

      let text = [];
      paragraphs.items.forEach((item) => {
        let paragraph = item.text.trim();
        if (paragraph) {
          paragraph.split(" ").forEach((term) => {
            let currentTerm = term.trim();
            if (currentTerm) {
              text.push(currentTerm);
            }
          });
        }
      });

      let makeTextDistinct = new Set(text);
      let distinctText = Array.from(makeTextDistinct);
      let allSearchResults = [];

      for (let i = 0; i < distinctText.length; i++) {
        let results = context.document.body.search(distinctText[i], { matchCase: true, matchWholeWord: true });
        results.load("text");

        // Map search term with its results.
        let correlatedResults = {
          searchTerm: distinctText[i],
          hits: results
        };

        allSearchResults.push(correlatedResults);
      }

      await context.sync();

      // Display counts.
      allSearchResults.forEach((result) => {
        let length = result.hits.items.length;

        console.log("Search term: " + result.searchTerm + " => Count: " + length);
      });
    });
'Word.Body#insertTable:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/40-tables/table-cell-access.yaml

    await Word.run(async (context) => {
      // Use a two-dimensional array to hold the initial table values.
      let data = [
        ["Tokyo", "Beijing", "Seattle"],
        ["Apple", "Orange", "Pineapple"]
      ];
      let table = context.document.body.insertTable(2, 3, "Start", data);
      table.styleBuiltIn = Word.Style.gridTable5Dark_Accent2;
      table.styleFirstColumn = false;

      await context.sync();
    });
'Word.Body#paragraphs:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/25-paragraph/get-word-count.yaml

    await Word.run(async (context) => {
      let paragraphs = context.document.body.paragraphs;
      paragraphs.load("text");
      await context.sync();

      let text = [];
      paragraphs.items.forEach((item) => {
        let paragraph = item.text.trim();
        if (paragraph) {
          paragraph.split(" ").forEach((term) => {
            let currentTerm = term.trim();
            if (currentTerm) {
              text.push(currentTerm);
            }
          });
        }
      });

      let makeTextDistinct = new Set(text);
      let distinctText = Array.from(makeTextDistinct);
      let allSearchResults = [];

      for (let i = 0; i < distinctText.length; i++) {
        let results = context.document.body.search(distinctText[i], { matchCase: true, matchWholeWord: true });
        results.load("text");

        // Map search term with its results.
        let correlatedResults = {
          searchTerm: distinctText[i],
          hits: results
        };

        allSearchResults.push(correlatedResults);
      }

      await context.sync();

      // Display counts.
      allSearchResults.forEach((result) => {
        let length = result.hits.items.length;

        console.log("Search term: " + result.searchTerm + " => Count: " + length);
      });
    });
'Word.ContentControl#tag:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/10-content-controls/insert-and-change-content-controls.yaml

    // Traverses each paragraph of the document and wraps a content control on
    each with either a even or odd tags.

    await Word.run(async (context) => {
      let paragraphs = context.document.body.paragraphs;
      paragraphs.load("$none"); // Don't need any properties; just wrap each paragraph with a content control.

      await context.sync();

      for (let i = 0; i < paragraphs.items.length; i++) {
        let contentControl = paragraphs.items[i].insertContentControl();
        // For even, tag "even".
        if (i % 2 === 0) {
          contentControl.tag = "even";
        } else {
          contentControl.tag = "odd";
        }
      }
      console.log("Content controls inserted: " + paragraphs.items.length);

      await context.sync();
    });
'Word.ContentControl#set:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/10-content-controls/insert-and-change-content-controls.yaml

    // Adds title and colors to odd and even content controls and changes their
    appearance.

    await Word.run(async (context) => {
      // Gets the complete sentence (as range) associated with the insertion point.
      let evenContentControls = context.document.contentControls.getByTag("even");
      let oddContentControls = context.document.contentControls.getByTag("odd");
      evenContentControls.load("length");
      oddContentControls.load("length");

      await context.sync();

      for (let i = 0; i < evenContentControls.items.length; i++) {
        // Change a few properties and append a paragraph
        evenContentControls.items[i].set({
          color: "red",
          title: "Odd ContentControl #" + (i + 1),
          appearance: "Tags"
        });
        evenContentControls.items[i].insertParagraph("This is an odd content control", "End");
      }

      for (let j = 0; j < oddContentControls.items.length; j++) {
        // Change a few properties and append a paragraph
        oddContentControls.items[j].set({
          color: "green",
          title: "Even ContentControl #" + (j + 1),
          appearance: "Tags"
        });
        oddContentControls.items[j].insertHtml("This is an <b>even</b> content control", "End");
      }

      await context.sync();
    });
'Word.ContentControlCollection#getByTag:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/90-scenarios/doc-assembly.yaml

    await Word.run(async (context) => {
        let contentControls = context.document.contentControls.getByTag("customer");
        contentControls.load("text");

        await context.sync();

        for (let i = 0; i < contentControls.items.length; i++) {
          contentControls.items[i].insertText("Fabrikam", "Replace");
        }

        await context.sync();
    });
'Word.CustomPropertyCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/30-properties/read-write-custom-document-properties.yaml

    await Word.run(async (context) => {
        context.document.properties.customProperties.add("Numeric Property", 1234);

        await context.sync();
        console.log("Property added");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/30-properties/read-write-custom-document-properties.yaml

    await Word.run(async (context) => {
        context.document.properties.customProperties.add("String Property", "Hello World!");

        await context.sync();
        console.log("Property added");
    });
'Word.CustomPropertyCollection#items:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/30-properties/read-write-custom-document-properties.yaml

    await Word.run(async (context) => {
        let properties = context.document.properties.customProperties;
        properties.load("key,type,value");

        await context.sync();
        for (var i = 0; i < properties.items.length; i++)
            console.log("Property Name:" + properties.items[i].key + "; Type=" + properties.items[i].type + "; Property Value=" + properties.items[i].value);
    });
'Word.Document#properties:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/30-properties/get-built-in-properties.yaml

    await Word.run(async (context) => {
        let builtInProperties = context.document.properties;
        builtInProperties.load("*"); // Let's get all!

        await context.sync();
        console.log(JSON.stringify(builtInProperties, null, 4));
    });
'Word.InlinePicture#getBase64ImageSrc:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/15-images/insert-and-get-pictures.yaml

    await Word.run(async (context) => {
      const firstPicture = context.document.body.inlinePictures.getFirst();
      firstPicture.load("width, height");

      await context.sync();
      console.log(`Image dimensions: ${firstPicture.width} x ${firstPicture.height}`);
      // Get the image encoded as base64.
      const base64 = firstPicture.getBase64ImageSrc();

      await context.sync();
      console.log(base64.value);
    });
'Word.Paragraph#insertBreak:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/25-paragraph/insert-line-and-page-breaks.yaml

    Word.run(async (context) => {
      context.document.body.paragraphs.getFirst().insertBreak(Word.BreakType.line, "After");

      await context.sync();
      console.log("success");
    });
'Word.Paragraph#insertParagraph:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/25-paragraph/insert-formatted-text.yaml

    await Word.run(async (context) => {
      // Second sentence, let's insert it as a paragraph after the previously inserted one.
      let secondSentence = context.document.body.insertParagraph(
        "This is the first text with a custom style.",
        "End"
      );
      secondSentence.font.set({
        bold: false,
        italic: true,
        name: "Berlin Sans FB",
        color: "blue",
        size: 30
      });

      await context.sync();
    });
'Word.Paragraph#text:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/25-paragraph/get-paragraph-on-insertion-point.yaml

    await Word.run(async (context) => {
      // The collection of paragraphs of the current selection returns the full paragraphs contained in it.
      let paragraph = context.document.getSelection().paragraphs.getFirst();
      paragraph.load("text");

      await context.sync();
      console.log(paragraph.text);
    });
'Word.Paragraph#leftIndent:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/25-paragraph/paragraph-properties.yaml

    await Word.run(async (context) => {
      // Indents the first paragraph.
      context.document.body.paragraphs.getFirst().leftIndent = 75; //units = points

      return context.sync();
    });
'Word.Paragraph#lineSpacing:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/25-paragraph/paragraph-properties.yaml

    await Word.run(async (context) => {
      // Adjusts line spacing.
      context.document.body.paragraphs.getFirst().lineSpacing = 20;

      await context.sync();
    });
'Word.Paragraph#spaceAfter:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/25-paragraph/paragraph-properties.yaml

    await Word.run(async (context) => {
      // Adjust space between paragraphs.
      context.document.body.paragraphs.getFirst().spaceAfter = 20;

      await context.sync();
    });
'Word.Paragraph#alignment:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/25-paragraph/paragraph-properties.yaml

    await Word.run(async (context) => {
      // Centers last paragraph alignment.
      context.document.body.paragraphs.getLast().alignment = "Centered";

      await context.sync();
    });
'Word.Paragraph#insertText:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/25-paragraph/insert-in-different-locations.yaml

    await Word.run(async (context) => {
      // Replace the last paragraph.
      let range = context.document.body.paragraphs.getLast().insertText("Just replaced the last paragraph!", "Replace");
      range.font.highlightColor = "black";
      range.font.color = "white";

      await context.sync();
    });
'Word.Paragraph#select:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/35-ranges/scroll-to-range.yaml

    await Word.run(async (context) => {
      // If select is called with no parameters, it selects the object.
      context.document.body.paragraphs.getLast().select();

      await context.sync();
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/35-ranges/scroll-to-range.yaml

    await Word.run(async (context) => {
      // Select can be at the start or end of a range; this by definition moves the insertion point without selecting the range.
      context.document.body.paragraphs.getLast().select("End");

      await context.sync();
    });
'Word.Paragraph#split:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/35-ranges/split-words-of-first-paragraph.yaml

    await Word.run(async (context) => {
      let paragraph = context.document.body.paragraphs.getFirst();
      let words = paragraph.split([" "], true /* trimDelimiters*/, true /* trimSpaces */);
      words.load("text");

      await context.sync();

      for (let i = 0; i < words.items.length; i++) {
        if (i >= 1) {
          words.items[i - 1].font.highlightColor = "#FFFFFF";
        }
        words.items[i].font.highlightColor = "#FFFF00";

        await context.sync();
        await pause(200);
      }
    });
'Word.Paragraph#startNewList:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/20-lists/insert-list.yaml

    // This example starts a new list stating with the second paragraph.

    await Word.run(async (context) => {
      let paragraphs = context.document.body.paragraphs;
      paragraphs.load("$none"); // No properties needed.

      await context.sync();

      var list = paragraphs.items[1].startNewList(); // Indicates new list to be started in the second paragraph.
      list.load("$none"); // No properties needed.

      await context.sync();

      // To add new items to the list use start/end on the insert location parameter.
      list.insertParagraph("New list item on top of the list", "Start");
      let paragraph = list.insertParagraph("New list item at the end of the list (4th level)", "End");
      paragraph.listItem.level = 4; // Sets up list level for the lsit item.
      // To add paragraphs outside the list use before/after:
      list.insertParagraph("New paragraph goes after (not part of the list)", "After");

      await context.sync();
    });
'Word.Paragraph#set:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/90-scenarios/multiple-property-set.yaml

    await Word.run(async (context) => {
      const paragraph = context.document.body.paragraphs.getFirst();
      paragraph.set({
        leftIndent: 30,
        font: {
          bold: true,
          color: "red"
        }
      });

      await context.sync();
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/90-scenarios/multiple-property-set.yaml

    await Word.run(async (context) => {
      const firstParagraph = context.document.body.paragraphs.getFirst();
      const secondParagraph = firstParagraph.getNext();
      firstParagraph.load("text, font/color, font/bold, leftIndent");

      await context.sync();

      secondParagraph.set(firstParagraph);

      await context.sync();
    });
'Word.Range#insertContentControl:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/90-scenarios/doc-assembly.yaml

    await Word.run(async (context) => {
        let results = context.document.body.search("Contractor");
        results.load("font/bold");

        // Check to make sure these content controls haven't been added yet.
        let customerContentControls = context.document.contentControls.getByTag("customer");
        customerContentControls.load("text");
        await context.sync();

      if (customerContentControls.items.length === 0) {
        for (var i = 0; i < results.items.length; i++) { 
            results.items[i].font.bold = true;
            var cc = results.items[i].insertContentControl();
            cc.tag = "customer";  // This value is used in the next step of this sample.
            cc.title = "Customer Name " + i;
        }
      }
        await context.sync();
    });
'Word.Range#getTextRanges:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/25-paragraph/get-paragraph-on-insertion-point.yaml

    await Word.run(async (context) => {
      // Gets the complete sentence (as range) associated with the insertion point.
      let sentences = context.document
        .getSelection()
        .getTextRanges(["."] /* Using the "." as delimiter */, false /*means without trimming spaces*/);
      sentences.load("$none");
      await context.sync();

      // Expands the range to the end of the paragraph to get all the complete sentences.
      let sentencesToTheEndOfParagraph = sentences.items[0]
        .getRange()
        .expandTo(
          context.document
            .getSelection()
            .paragraphs.getFirst()
            .getRange("End")
        )
        .getTextRanges(["."], false /* Don't trim spaces*/);
      sentencesToTheEndOfParagraph.load("text");
      await context.sync();

      for (let i = 0; i < sentencesToTheEndOfParagraph.items.length; i++) {
        console.log(sentencesToTheEndOfParagraph.items[i].text);
      }
    });
'Word.Section#getHeader:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/25-paragraph/insert-header-and-footer.yaml

    await Word.run(async (context) => {
      context.document.sections.getFirst().getHeader("Primary")
        .insertParagraph("This is a header", "End");

      await context.sync();
    });
'Word.Section#getFooter:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/25-paragraph/insert-header-and-footer.yaml

    await Word.run(async (context) => {
      context.document.sections.getFirst().getFooter("Primary")
        .insertParagraph("This is a footer", "End");

      await context.sync();
    });
'Word.Table#getCell:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/40-tables/table-cell-access.yaml

    await Word.run(async (context) => {
      let firstCell = context.document.body.tables.getFirst().getCell(0, 0).body;
      firstCell.load("text");

      await context.sync();
      console.log("First cell text is " + firstCell.text);
    });
