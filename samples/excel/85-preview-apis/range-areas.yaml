order: 6
id: excel-range-areas
name: Discontiguous ranges (RangeAreas) and special cells
description: 'Creates and uses RangeAreas, which are sets of ranges that need not be contiguous, through user selection and programmatic selection of special cells.'
host: EXCEL
api_set:
    ExcelApi: 1.9
script:
    content: |
        $("#reset").click(() => tryCatch(reset));
        $("#color-selected-ranges").click(() => tryCatch(colorSelectedRanges));
        $("#color-specified-ranges").click(() => tryCatch(colorSpecifiedRanges));
        $("#color-all-formula-ranges").click(() => tryCatch(colorAllFormulaRanges));
        $("#color-all-logical-text-ranges").click(() => tryCatch(colorAllLogicalAndTextRanges));
        $("#read-properties-specified-ranges").click(() => tryCatch(readPropertiesOfSpecifiedRanges));

        async function colorSelectedRanges() {
            await Excel.run(async (context) => {

                const selectedRanges = context.workbook.getSelectedRanges();
                selectedRanges.format.fill.color = "lightblue";

                await context.sync();
            })
        }

        async function colorSpecifiedRanges() {
            await Excel.run(async (context) => {

                const sheet = context.workbook.worksheets.getActiveWorksheet();
                const specifiedRanges = sheet.getRanges("D3:D5, G3:G5");
                specifiedRanges.format.fill.color = "pink";

                await context.sync();
            })
        }

        async function colorAllFormulaRanges() {
            await Excel.run(async (context) => {

                const sheet = context.workbook.worksheets.getActiveWorksheet();
                const usedRange = sheet.getUsedRange();

                // Find the ranges with formulas
                const formulaRanges = usedRange.getSpecialCells("Formulas");
                formulaRanges.format.fill.color = "lightgreen";

                await context.sync();
            });
        }

        async function colorAllLogicalAndTextRanges() {
            await Excel.run(async (context) => {

                const sheet = context.workbook.worksheets.getActiveWorksheet();
                const usedRange = sheet.getUsedRange();

                // Find the ranges with either text or logical (boolean)
                // values
                const formulaRanges = usedRange.getSpecialCells("Constants", "LogicalText");
                formulaRanges.format.fill.color = "orange";

                return context.sync();
            });
        }

        async function readPropertiesOfSpecifiedRanges() {
            await Excel.run(async (context) => {

                const sheet = context.workbook.worksheets.getActiveWorksheet();
                const specifiedRanges = sheet.getRanges("C3:C5, E3:E5");
                specifiedRanges.load("format/fill/color, isEntireColumn, address, areaCount");

                await context.sync()

                // Non-boolean properties return null unless the
                // property value on all member ranges is the same.
                // (RangeAreas.address is an exception.)
                console.log("Color is: " + specifiedRanges.format.fill.color);

                // Boolean properties return false unless the 
                // property is true on ALL member ranges.
                console.log("Each range is an entireColumn: " + specifiedRanges.isEntireColumn);

                // Returns a comma-delimited string of all the 
                // addresses of the member ranges.
                console.log("Range addresses: " + specifiedRanges.address);
                console.log("Number of ranges: " + specifiedRanges.areaCount);

                await context.sync();
            });
        }

        async function reset() {
            await Excel.run(async (context) => {
                const sheet = await OfficeHelpers.ExcelUtilities
                    .forceCreateSheet(context.workbook, "Sample");

                const data = [
                    ["Product", "Qty", "Category", "Unit Price", "Base Price", "Tax", "Total Charge", "Manager's Discount", "Final Price"],
                    ["Almonds", 2, "Nuts", 7.50, "=C3 * E3", 0.1, "=SUM(F3,F3 * G3)", false, "=IF(I3 = TRUE, H3 * 0.9, H3)"],
                    ["Coffee", 1, "Beverage", 34.50, "=C4 * E4", 0.0, "=SUM(F4,F4 * G4)", true, "=IF(I4 = TRUE, H4 * 0.9, H4)"],
                    ["Chocolate", 5, "Candy", 9.56, "=C5 * E5", 0.2, "=SUM(F5,F5 * G5)", false, "=IF(I5 = TRUE, H5 * 0.9, H5)"]
                ];

                const range = sheet.getRange("B2:J5");
                range.values = data;
                range.format.autofitColumns();
                sheet.activate();

                await context.sync();
            });
        }

        /** Default helper for invoking an action and handling errors. */
        async function tryCatch(callback) {
            try {
                await callback();
            }
            catch (error) {
                // Note: In a production add-in, you'd want to notify the user through your add-in's UI.
                console.error(error);
            }
        }
    language: typescript
template:
    content: |
        <section class="ms-font-m">
            <p>This sample shows how to apply actions simultaneously to multiple, discontiguous ranges. Some of these ranges are found using the Range object's getSpecialCells method.</p>
        </section>

        <section class="samples ms-font-m">
            <h3>Set up</h3>
            <button id="reset" class="ms-Button">
                <span class="ms-Button-label">Populate range / Reset</span>
            </button>
            <h3>Try it out</h3>
            <p>Select two or more ranges on the <b>Sample</b> worksheet. It doesn't matter if they have data or are contiguous. Then press <b>Color selected ranges</b>.</p>
            <button id="color-selected-ranges" class="ms-Button">
                <span class="ms-Button-label">Color selected ranges</span>
            </button>
            <p>Press the next button to color ranges that are specified by hard-coded addresses in the JavaScript.</p>
            <button id="color-specified-ranges" class="ms-Button">
                <span class="ms-Button-label">Color <i>Tax</i> and <i>Category</i> Ranges</span>
            </button>
            <p>Add a formula to any cells you want on the <b>Sample</b> worksheet and press the next button.</p>
            <button id="color-all-formula-ranges" class="ms-Button">
                <span class="ms-Button-label">Color formula ranges</span>
            </button>
            <p>Add text to any cells and add a logical (Boolean) value to any cells on the <b>Sample</b> worksheet and press the next button.</p>
            <button id="color-all-logical-text-ranges" class="ms-Button">
                <span class="ms-Button-label">Color logical and text ranges</span>
            </button>
            <p>In Excel, select range <b>C3:C5</b> and format its fill to a new color. Then set the fill for range <b>E3:E5</b> to <i>exactly the same color!</i> Then press "Read properties of <i>Qty</i> and <i>Unit Price</i> ranges". Watch the console.</p>
            <p>Next, change the fill color of one of the two ranges and press the button again.</p>
            <button id="read-properties-specified-ranges" class="ms-Button">
                <span class="ms-Button-label">Read properties of <i>Qty</i> and <i>Unit Price</i> ranges</span>
            </button> 
        </section>
    language: html
style:
    content: |-
        section.samples {
            margin-top: 20px;
        }

        section.samples .ms-Button, section.setup .ms-Button {
            display: block;
            margin-bottom: 5px;
            margin-left: 20px;
            min-width: 80px;
        }
    language: css
libraries: |
    https://appsforoffice.microsoft.com/lib/beta/hosted/office.js
    @types/office-js-preview

    office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
    office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css

    core-js@2.4.1/client/core.min.js
    @types/core-js

    @microsoft/office-js-helpers@0.7.4/dist/office.helpers.min.js
    @microsoft/office-js-helpers@0.7.4/dist/office.helpers.d.ts

    jquery@3.1.1
    @types/jquery@3.3.1