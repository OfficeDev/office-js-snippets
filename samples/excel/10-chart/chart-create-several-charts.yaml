order: 3
id: excel-chart-create-several-charts
name: Create charts
description: 'Creates column-clustered, doughnut, line, XY-scatter, area, radar, pie, 3D, cylinder, and 100% charts.'
author: OfficeDev
host: EXCEL
api_set:
    ExcelApi: 1.1
script:
    content: |
        $("#setup").click(() => tryCatch(setup));
        $("#create-column-clustered-chart").click(() => tryCatch(createColumnClusteredChart));
        $("#create-line-chart").click(() => tryCatch(createLineChart));
        $("#create-xy-scatter-chart").click(() => tryCatch(createXYScatterChart));
        $("#create-area-chart").click(() => tryCatch(createAreaStackedChart));
        $("#create-radar-chart").click(() => tryCatch(createRadarFilledChart));
        $("#create-pie-chart").click(() => tryCatch(createPieChart));
        $("#create-3d-chart").click(() => tryCatch(create3DChart));
        $("#create-cylinder-chart").click(() => tryCatch(createCylinderChart));
        $("#create-bar-100-chart").click(() => tryCatch(createBar100Chart));

        async function createColumnClusteredChart() {
            await Excel.run(async context => {
            const sheet = context.workbook.worksheets.getItem("Sample");

            const salesTable = sheet.tables.getItem("SalesTable");

            const dataRange = salesTable.getDataBodyRange();

            let chart = sheet.charts.add("ColumnClustered", dataRange, "Auto");

            chart.setPosition("A9", "F20");
            chart.title.text = "Quarterly sales chart";
            chart.legend.position = "Right";
            chart.legend.format.fill.setSolidColor("white");
            chart.dataLabels.format.font.size = 15;
            chart.dataLabels.format.font.color = "black";
            let points = chart.series.getItemAt(0).points;
            points.getItemAt(0).format.fill.setSolidColor("pink");
            points.getItemAt(1).format.fill.setSolidColor("indigo");

            await context.sync();
            });
        }

        async function createLineChart() {
            await Excel.run(async (context) => {
                let sheet = context.workbook.worksheets.getItem("Sample");
                let salesTable = sheet.tables.getItem("SalesTable");

                let dataRange = sheet.getRange("A1:E7");
                let chart = sheet.charts.add("Line", dataRange, "Auto");

                chart.setPosition("A22", "F35");
                chart.legend.position = "Right"
                chart.legend.format.fill.setSolidColor("white");
                chart.dataLabels.format.font.size = 15;
                chart.dataLabels.format.font.color = "black";
                chart.title.text = "Bicycle Parts Quarterly Sales";

                await context.sync();
            });
        }

        async function createXYScatterChart() {
            await Excel.run(async (context) => {
                let sheet = context.workbook.worksheets.getItem("Sample");
                let salesTable = sheet.tables.getItem("SalesTable");

                let dataRange = sheet.getRange("A1:E7");

                // Create an XY scatter chart.
                let chart = sheet.charts.add("XYScatter", dataRange, "Auto");
                chart.title.text = "Bicycle Parts Quarterly Sales";
                chart.setPosition("A36", "F48");

                await context.sync();
            });
        }

        async function createAreaStackedChart() {
            await Excel.run(async (context) => {
                const sheet = context.workbook.worksheets.getItem("Sample");
                const salesTable = sheet.tables.getItem("SalesTable");
                const dataRange = salesTable.getDataBodyRange();

                let chart = sheet.charts.add("AreaStacked", dataRange, "Auto");

                chart.setPosition("H1", "M15");
                chart.title.text = "Quarterly sales chart";
                chart.legend.position = "Bottom"
                chart.legend.format.fill.setSolidColor("white");
                chart.dataLabels.format.font.size = 15;
                chart.dataLabels.format.font.color = "black";
                chart.series.getItemAt(0).name = "Q1";
                chart.series.getItemAt(1).name = "Q2";
                chart.series.getItemAt(2).name = "Q3";
                chart.series.getItemAt(3).name = "Q4";

                await context.sync();
            });
        }

        async function createRadarFilledChart() {
            await Excel.run(async (context) => {
                const sheet = context.workbook.worksheets.getItem("Sample");
                const salesTable = sheet.tables.getItem("SalesTable");
                const dataRange = salesTable.getDataBodyRange();

                let chart = sheet.charts.add("RadarFilled", dataRange, "Auto");

                chart.setPosition("H17", "M35");
                chart.title.text = "Quarterly sales chart";
                chart.legend.position = "Bottom"
                chart.legend.format.fill.setSolidColor("white");
                chart.dataLabels.format.font.size = 15;
                chart.dataLabels.format.font.color = "black";
                chart.series.getItemAt(0).name = "Q1";
                chart.series.getItemAt(1).name = "Q2";
                chart.series.getItemAt(2).name = "Q3";
                chart.series.getItemAt(3).name = "Q4";

                await context.sync();
            });
        }

        async function createPieChart() {
            await Excel.run(async (context) => {
                const sheet = context.workbook.worksheets.getItem("Sample");
                const salesTable = sheet.tables.getItem("SalesTable");
                const dataRange = salesTable.getDataBodyRange();

                let chart = sheet.charts.add("Pie", dataRange, "Auto");

                chart.setPosition("H37", "M52");
                chart.title.text = "1st Quarter sales chart";
                chart.legend.position = "Bottom"
                chart.legend.format.fill.setSolidColor("white");
                chart.dataLabels.format.font.size = 15;
                chart.dataLabels.format.font.color = "black";

                await context.sync();
            });
        }

        async function create3DChart() {
            await Excel.run(async (context) => {
                const sheet = context.workbook.worksheets.getItem("Sample");
                const salesTable = sheet.tables.getItem("SalesTable");
                const dataRange = salesTable.getDataBodyRange();

                let chart = sheet.charts.add("3DBarClustered", dataRange, "Auto");

                chart.setPosition("O1", "T20");
                chart.title.text = "Quarterly sales chart";
                chart.legend.position = "Bottom"
                chart.legend.format.fill.setSolidColor("white");
                chart.dataLabels.format.font.size = 15;
                chart.dataLabels.format.font.color = "black";
                chart.series.getItemAt(0).name = "Q1";
                chart.series.getItemAt(1).name = "Q2";
                chart.series.getItemAt(2).name = "Q3";
                chart.series.getItemAt(3).name = "Q4";

                await context.sync();
            });
        }

        async function createCylinderChart() {
            await Excel.run(async (context) => {
                const sheet = context.workbook.worksheets.getItem("Sample");
                const salesTable = sheet.tables.getItem("SalesTable");
                const dataRange = salesTable.getDataBodyRange();

                let chart = sheet.charts.add("CylinderCol", dataRange, "Auto");

                chart.setPosition("O22", "T36");
                chart.title.text = "Quarterly sales chart";
                chart.legend.position = "Bottom"
                chart.legend.format.fill.setSolidColor("white");
                chart.dataLabels.format.font.size = 15;
                chart.dataLabels.format.font.color = "black";
                chart.series.getItemAt(0).name = "Q1";
                chart.series.getItemAt(1).name = "Q2";
                chart.series.getItemAt(2).name = "Q3";
                chart.series.getItemAt(3).name = "Q4";

                await context.sync();
            });
        }

        async function createBar100Chart() {
            await Excel.run(async (context) => {
                const sheet = context.workbook.worksheets.getItem("Sample");
                const salesTable = sheet.tables.getItem("SalesTable");
                const dataRange = salesTable.getDataBodyRange();

                let chart = sheet.charts.add("BarStacked100", dataRange, "Auto");

                chart.setPosition("O38", "T50");
                chart.title.text = "Quarterly sales chart";
                chart.legend.position = "Bottom"
                chart.legend.format.fill.setSolidColor("white");
                chart.dataLabels.format.font.size = 15;
                chart.dataLabels.format.font.color = "black";
                chart.series.getItemAt(0).name = "Q1";
                chart.series.getItemAt(1).name = "Q2";
                chart.series.getItemAt(2).name = "Q3";
                chart.series.getItemAt(3).name = "Q4";

                await context.sync();
            });
        }

        async function setup() {
            await Excel.run(async context => {
            await OfficeHelpers.ExcelUtilities.forceCreateSheet(
                context.workbook,
                "Sample"
            );

            const sheet = context.workbook.worksheets.getItem("Sample");

            let expensesTable = sheet.tables.add("A1:E1", true);

            expensesTable.name = "SalesTable";

            expensesTable.getHeaderRowRange().values = [
                ["Product", "Qtr1", "Qtr2", "Qtr3", "Qtr4"]
            ];

            expensesTable.rows.add(null, [
                ["Frames", 5000, 7000, 6544, 4377],
                ["Saddles", 400, 323, 276, 651],
                ["Brake levers", 12000, 8766, 8456, 9812],
                ["Chains", 1550, 1088, 692, 853],
                ["Mirrors", 225, 600, 923, 544],
                ["Spokes", 6005, 7634, 4589, 8765]
            ]);

            if (Office.context.requirements.isSetSupported("ExcelApi", 1.2)) {
                sheet.getUsedRange().format.autofitColumns();
                sheet.getUsedRange().format.autofitRows();
            }

            sheet.activate();

            await context.sync();
            });
        }

        /** Default helper for invoking an action and handling errors. */
        async function tryCatch(callback) {
            try {
                await callback();
            }
            catch (error) {
                OfficeHelpers.UI.notify(error);
                OfficeHelpers.Utilities.log(error);
            }
        }
    language: typescript
template:
    content: |-
        <section class="ms-font-m">
            <p>This sample shows how to create a column clustered chart.</p>
        </section>

        <section class="setup ms-font-m">
            <h3>Set up</h3>
            <button id="setup" class="ms-Button">
                <span class="ms-Button-label">Create table</span>
            </button>
        </section>

        <section class="samples ms-font-m">
            <h3>Try it out</h3>
            <button id="create-column-clustered-chart" class="ms-Button">
            <span class="ms-Button-label">Create a column clustered chart</span>
        </button>
            <p />

            <button id="create-line-chart" class="ms-Button">
            <span class="ms-Button-label">Create a line chart</span>
        </button>
            <p />

            <button id="create-xy-scatter-chart" class="ms-Button">
            <span class="ms-Button-label">Create an xy-scatter chart</span>
        </button>
            <p />

            <button id="create-area-chart" class="ms-Button">
            <span class="ms-Button-label">Create an area chart</span>
        </button>
            <p />

            <button id="create-radar-chart" class="ms-Button">
            <span class="ms-Button-label">Create a radar chart</span>
        </button>
            <p />

            <button id="create-pie-chart" class="ms-Button">
            <span class="ms-Button-label">Create a pie chart</span>
        </button>
            <p />

            <button id="create-3d-chart" class="ms-Button">
            <span class="ms-Button-label">Create a 3D chart</span>
        </button>
            <p />

            <button id="create-cylinder-chart" class="ms-Button">
            <span class="ms-Button-label">Create a cylinder chart</span>
        </button>
            <p />

            <button id="create-bar-100-chart" class="ms-Button">
            <span class="ms-Button-label">Create a bar-100% chart</span>
        </button>
        </section>
    language: html
style:
    content: |
        section.samples {
            margin-top: 20px;
        }

        section.samples .ms-Button, section.setup .ms-Button {
            display: block;
            margin-bottom: 5px;
            margin-left: 20px;
            min-width: 80px;
        }
    language: css
libraries: |
    https://appsforoffice.microsoft.com/lib/1/hosted/office.js
    @types/office-js

    office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
    office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css

    core-js@2.4.1/client/core.min.js
    @types/core-js

    @microsoft/office-js-helpers@0.7.4/dist/office.helpers.min.js
    @microsoft/office-js-helpers@0.7.4/dist/office.helpers.d.ts

    jquery@3.1.1
    @types/jquery@3.3.1