order: 1
id: excel-89-preview-apis-chart-series-
name: Chart series
description: 'Add, set, and delete a series in a chart.'
host: EXCEL
api_set:
    ExcelAPI: 1.7
script:
    content: "$(\"#setup\").click(() => tryCatch(setup));\n$(\"#add-series\").click(() => tryCatch(addSeries));\n$(\"#delete-series\").click(() => tryCatch(deleteSeries));\n$(\"#add-series-value\").click(() => tryCatch(setSeriesValue));\n\nasync function addSeries() {\n    await Excel.run(async (context) => {\n        const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n        let seriesCollection = sheet.charts.getItemAt(0);\n        let rangeSelection = sheet.getRange(\"B1:B7\");    \n        \n        // Add a series.\n        let newSeries = seriesCollection.series.add(\"New Series\");\n        newSeries.setValues(rangeSelection);\n       \n        await context.sync();\n    });\n}\n\nasync function deleteSeries() {\n    await Excel.run(async (context) => {\n        const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n        let seriesCollection = sheet.charts.getItemAt(0).series;       \n        let series = seriesCollection.getItemAt(0);\n        // Delete the first series.\n        series.delete();\n       \n        await context.sync();        \n    });\n}\n\nasync function setSeriesValue() {\n    await Excel.run(async (context) => {\n        const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n        let seriesCollection = sheet.charts.getItemAt(0).series; \n\n        // Add new series.\n        let series = seriesCollection.add(\"New Product\");\n        let xValue = sheet.getRange(\"C2:C7\");\n        // Set the x values for the series.\n        series.setXAxisValues(xValue);\n\n        let values = sheet.getRange(\"E2:E7\");\n         // Set the vertical values for the series.\n        series.setValues(values);\n       \n        seriesCollection.load(\"count\");\_\n\n        await context.sync();\n\n        OfficeHelpers.UI.notify(\"Number of series  = \" + seriesCollection.count);   \n    });\n}\n\nasync function setup() {\n    await Excel.run(async (context) => {\n        const sheet = await OfficeHelpers.ExcelUtilities\n            .forceCreateSheet(context.workbook, \"Sample\");\n        let expensesTable = sheet.tables.add('A1:E1', true);\n        expensesTable.name = \"SalesTable\";\n\n        expensesTable.getHeaderRowRange().values = [[\"Product\", \"Qtr1\", \"Qtr2\", \"Qtr3\", \"Qtr4\"]];\n\n        expensesTable.rows.add(null, [\n            [\"Frames\", 5000, 7000, 6544, 4377],\n            [\"Saddles\", 400, 323, 276, 651],\n            [\"Brake levers\", 12000, 8766, 8456, 9812],\n            [\"Chains\", 1550, 1088, 692, 853],\n            [\"Mirrors\", 225, 600, 923, 544],\n            [\"Spokes\", 6005, 7634, 4589, 8765]\n        ]);\n\n        if (Office.context.requirements.isSetSupported(\"ExcelApi\", 1.7)) {\n            sheet.getUsedRange().format.autofitColumns();\n            sheet.getUsedRange().format.autofitRows();\n        }\n\n        createLineChart(context);\n        sheet.activate();\n\n        await context.sync();\n    });\n}\n\nasync function createLineChart(context: Excel.RequestContext) {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n\n    let dataRange = sheet.getRange(\"A1:B7\");\n    let chart = sheet.charts.add(\"Line\", dataRange, \"auto\");\n\n    chart.setPosition(\"A15\", \"F30\");\n    chart.legend.position = \"right\"\n    chart.legend.format.fill.setSolidColor(\"white\");\n    chart.dataLabels.format.font.size = 15;\n    chart.dataLabels.format.font.color = \"black\";\n}\n\n/** Default helper for invoking an action and handling errors. */\nasync function tryCatch(callback) {\n    try {\n        await callback();\n    }\n    catch (error) {\n        OfficeHelpers.UI.notify(error);\n        OfficeHelpers.Utilities.log(error);\n    }\n}\n"
    language: typescript
template:
    content: |
        <section class="ms-font-m">
            <p>This sample shows how to add, set, and delete a series in a chart.</p>
        </section>

        <section class="setup ms-font-m">
            <h3>Set up</h3>
            <button id="setup" class="ms-Button">
                <span class="ms-Button-label">Add sample data</span>
            </button>
        </section>

        <section class="samples ms-font-m">
            <h3>Try it out</h3>
            <button id="add-series" class="ms-Button">
                <span class="ms-Button-label">Add series</span>
            </button>
        </section>

        <section class="samples ms-font-m">
            <button id="delete-series" class="ms-Button">
                <span class="ms-Button-label">Delete series</span>
            </button>
        </section>

        <section class="samples ms-font-m">
            <button id="add-series-value" class="ms-Button">
                <span class="ms-Button-label">Set series value</span>
            </button>
        </section>
    language: html
style:
    content: "section.samples {\r\n    margin-top: 20px;\r\n}\r\n\r\nsection.samples .ms-Button, section.setup .ms-Button {\r\n    display: block;\r\n    margin-bottom: 5px;\r\n    margin-left: 20px;\r\n    min-width: 80px;\r\n}\r\n"
    language: css
libraries: |
    https://appsforoffice.microsoft.com/lib/beta/hosted/office.js
    https://appsforoffice.microsoft.com/lib/beta/hosted/office.d.ts

    office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
    office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css

    core-js@2.4.1/client/core.min.js
    @types/core-js

    @microsoft/office-js-helpers@0.7.4/dist/office.helpers.min.js
    @microsoft/office-js-helpers@0.7.4/dist/office.helpers.d.ts

    jquery@3.1.1
    @types/jquery