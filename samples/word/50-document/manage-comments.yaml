order: 3
id: word-document-manage-comments
name: Comments
description: 'This sample shows how to perform basic comments operations, including insert, reply, get, edit, resolve, and delete.'
host: WORD
api_set:
    WordApi: '1.4'
script:
    content: |
        $("#insert").click(() => tryCatch(insertComment));
        $("#edit").click(() => tryCatch(editFirstCommentInSelection));
        $("#reply").click(() => tryCatch(replyToFirstActiveCommentInSelection));
        $("#resolve").click(() => tryCatch(toggleResolvedStatusOfFirstCommentInSelection));
        $("#range").click(() => tryCatch(getFirstCommentRange));
        $("#get-comments-in-selection").click(() => tryCatch(getCommentsInSelection));
        $("#delete").click(() => tryCatch(deleteFirstCommentInSelection));
        $("#get-comments").click(() => tryCatch(getComments));
        $("#setup").click(() => tryCatch(setup));

        /** Set a comment on the selected content. */
        async function insertComment() {
          await Word.run(async (context) => {
            let text = $("#comment-text")
              .val()
              .toString();
            let comment = context.document.getSelection().insertComment(text);

            // Load object for display in Script Lab console.
            comment.load();
            await context.sync();

            console.log("Comment inserted:");
            console.log(comment);
          });
        }

        /** Edit the first comment in the selected content. */
        async function editFirstCommentInSelection() {
          await Word.run(async (context) => {
            let text = $("#edit-comment-text")
              .val()
              .toString();
            let comment = context.document
              .getSelection()
              .getComments()
              .getFirst();
            comment.content = text;

            // Load object for display in Script Lab console.
            comment.load();
            await context.sync();

            console.log("Comment content changed:");
            console.log(comment);
          });
        }

        /** Reply to the first active comment in the selected content. */
        async function replyToFirstActiveCommentInSelection() {
          await Word.run(async (context) => {
            let text = $("#reply-text")
              .val()
              .toString();
            let comments = context.document.getSelection().getComments();
            comments.load("items");
            await context.sync();
            let firstActiveComment = comments.items.find((item) => item.resolved !== true);
            if (firstActiveComment) {
              let reply = firstActiveComment.reply(text);
              console.log("Reply added");
            } else {
              console.log("No active comment was found in the selection so couldn't reply.");
            }
          });
        }

        /** Toggle Resolved status of the first comment in the selected content. */
        async function toggleResolvedStatusOfFirstCommentInSelection() {
          await Word.run(async (context) => {
            let comment = context.document
              .getSelection()
              .getComments()
              .getFirst();
            comment.load("resolved");
            await context.sync();

            // Toggle resolved status.
            // If the comment is active, set as resolved.
            // If it's resolved, set resolved to false.
            let toggleResolved: boolean = comment.resolved;
            comment.resolved = !toggleResolved;
            comment.load();
            await context.sync();

            console.log(`Comment Resolved status: ${comment.resolved}`);
            console.log(comment);
          });
        }

        /** Get the range of the first comment in the selected content. */
        async function getFirstCommentRange() {
          await Word.run(async (context) => {
            let range = context.document
              .getSelection()
              .getComments()
              .getFirst()
              .getRange();
            range.load("text");
            await context.sync();

            console.log(`Comment location: ${range.text}`);
          });
        }

        /** Get the comments in the selected content. */
        async function getCommentsInSelection() {
          await Word.run(async (context) => {
            let comments = context.document.getSelection().getComments();

            // Load objects for display in Script Lab console.
            comments.load();
            await context.sync();

            console.log("Comments:");
            console.log(comments);
          });
        }

        /** Delete the first comment in the selected content. */
        async function deleteFirstCommentInSelection() {
          await Word.run(async (context) => {
            context.document
              .getSelection()
              .getComments()
              .getFirst()
              .delete();
            await context.sync();

            console.log("Comment deleted");
          });
        }

        /** Get the comments in the document body. */
        async function getComments() {
          await Word.run(async (context) => {
            let comments = context.document.body.getComments();

            // Load objects for display in Script Lab console.
            comments.load();
            await context.sync();

            console.log("All comments:");
            console.log(comments);
          });
        }

        /** Check for requirement set support and set two paragraphs of sample text. */
        async function setup() {
          if (!Office.context.requirements.isSetSupported("WordApiOnline", "1.1")) {
            console.error("This version of Word doesn't support WordApiOnline 1.1 and so doesn't currently support the comments APIs.");
            return;
          }
          await Word.run(async (context) => {
            const body = context.document.body;
            body.clear();
            body.insertParagraph(
              "Video provides a powerful way to help you prove your point. When you click Online Video, you can paste in the embed code for the video you want to add. You can also type a keyword to search online for the video that best fits your document.",
              "Start"
            );
            body.paragraphs
              .getLast()
              .insertText(
                "To make your document look professionally produced, Word provides header, footer, cover page, and text box designs that complement each other. For example, you can add a matching Online cover page, header, and sidebar. Click Insert and then choose the Online elements you want from the different Online galleries.",
                "Replace"
              );
          });
        }
        /** Default helper for invoking an action and handling errors. */
        async function tryCatch(callback) {
          try {
            await callback();
          } catch (error) {
            // Note: In a production add-in, you'd want to notify the user through your add-in's UI.
            console.error(error);
          }
        }
    language: typescript
template:
    content: |-
        <section class="ms-font-m">
            <p>This sample shows basic operations using comments.</p>
                <p><b>Important</b>: The WordApiOnline 1.1 requirement set is needed for this sample. See <a target="_blank"
                        href="https://docs.microsoft.com/javascript/api/requirement-sets/word/word-api-requirement-sets">Word JavaScript
                        API requirement sets</a> for supported Word clients.</p></section>

        <section class="setup ms-font-m">
            <h3>Set up</h3>
            <button id="setup" class="ms-Button">
            <span class="ms-Button-label">Add sample text</span>
          </button>
        </section>

        <section class="samples ms-font-m">
            <h3>Try it out</h3>
            <p>First, select content in document body.</p>
            <p>
                <label>Comment text:</label>
                <input id = "comment-text">
                <button id="insert" class="ms-Button">
              <span class="ms-Button-label">Insert comment</span>
            </button>
            </p>
            <p>
                <label>Replacement text:</label>
                <input id = "edit-comment-text">
                <button id="edit" class="ms-Button">
                    <span class="ms-Button-label">Edit first comment in selection</span>
                </button>
            </p>
            <p>
                <label>Reply text:</label>
                <input id = "reply-text">
                <button id="reply" class="ms-Button">
                    <span class="ms-Button-label">Reply to first active comment in selection</span>
              </button>
            </p>
            <p>
                <label>Change Resolved state of first comment in selection.</label>
                <button id="resolve" class="ms-Button">
                        <span class="ms-Button-label">Toggle Resolved state</span>
                  </button>
            </p>
            <p>
                <label>Get range of first comment in selection.</label>
                <button id="range" class="ms-Button">
                        <span class="ms-Button-label">Get range</span>
                  </button>
            </p>
            <p>
                <label>Get comments in selection.</label>
                <button id="get-comments-in-selection" class="ms-Button">
                            <span class="ms-Button-label">Get comments</span>
                      </button>
            </p>
            <p>
                <label>Delete first comment in selection.</label>
                <button id="delete" class="ms-Button">
                        <span class="ms-Button-label">Delete comment</span>
                  </button>
            </p>
            <p>
                <label>Get all comments in document body.</label>
                <button id="get-comments" class="ms-Button">
                    <span class="ms-Button-label">Get all comments</span>
              </button>
            </p>
        </section>
    language: html
style:
    content: |-
        section.samples {
            margin-top: 20px;
        }

        section.samples .ms-Button, section.setup .ms-Button {
            display: block;
            margin-bottom: 5px;
            margin-left: 20px;
            min-width: 80px;
        }
    language: css
libraries: |
    https://appsforoffice.microsoft.com/lib/1/hosted/office.js
    @types/office-js

    office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
    office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css

    core-js@2.4.1/client/core.min.js
    @types/core-js

    jquery@3.1.1
    @types/jquery@3.3.1