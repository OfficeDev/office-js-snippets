order: 1
id: excel-performance-optimization
name: Performance optimization
description: 'Optimizes performance by untracking ranges, turning off screen painting, and switching the calculation mode.'
host: EXCEL
api_set:
    ExcelApi: '1.9'
script:
    content: |
        $("#setup").on("click", () => tryCatch(setup));
        $("#refresh-data").on("click", () => tryCatch(refreshData));
        $("#toggle-tracking").on("click", () => tryCatch(toggleTracking));
        $("#toggle-screen-painting").on("click", () => tryCatch(toggleScreenPainting));
        $("#toggle-calculation").on("click", () => tryCatch(toggleCalculationMode));
        $("#recalculate").on("click", () => tryCatch(recalculate));

        const ROW_COUNT = 500;
        const COLUMN_COUNT = 20;

        let untrack = false;
        let pauseScreenPainting = false;

        async function refreshData() {
          await Excel.run(async (context) => {
            // Recreate the data in the worksheet with random data.
            const sheet = context.workbook.worksheets.getActiveWorksheet();

            const startTime = Date.now();
            console.log("Starting...");

            // If other parts of the sample have toggled screen painting off, this will stop screen updating until context.sync is called.
            if (pauseScreenPainting) {
              context.application.suspendScreenUpdatingUntilNextSync();
            }

            for (let i = 1; i < ROW_COUNT; i++) {
              for (let j = 1; j < COLUMN_COUNT; j++) {
                let cell = sheet.getCell(i, j);
                cell.values = [[i * j * Math.random()]];

                // If other parts of the sample have toggled tracking off, we will avoid tracking this range and having to manage the proxy objects.
                // For more information, see https://learn.microsoft.com/office/dev/add-ins/concepts/resource-limits-and-performance-optimization#untrack-unneeded-proxy-objects
                if (untrack) {
                  cell.untrack();
                }
              }
            }

            await context.sync();

            console.log(`Ending. Adding ${ROW_COUNT * COLUMN_COUNT} cells took ${Date.now() - startTime} milliseconds`);
          });
        }

        function toggleScreenPainting() {
          pauseScreenPainting = !pauseScreenPainting;
          if (pauseScreenPainting) {
            console.log("Screen updating will be paused when you click Refresh Data.");
          } else {
            console.log("Screen updating will happen as normal.");
          }
        }

        function toggleTracking() {
          untrack = !untrack;
          if (untrack) {
            console.log("Proxy range objects will not be tracked when you click Refresh Data.");
          } else {
            console.log("Proxy range objects will be tracked as normal.");
          }
        }

        async function toggleCalculationMode() {
          await Excel.run(async (context) => {
            context.application.load("calculationMode");
            await context.sync();

            let calculationMode = context.application.calculationMode;
            if (calculationMode === Excel.CalculationMode.automatic) {
              context.application.calculationMode = Excel.CalculationMode.manual;
              console.log(`Calculation mode is now ${Excel.CalculationMode.manual}`);
            } else {
              context.application.calculationMode = Excel.CalculationMode.automatic;
              console.log(`Calculation mode is now ${Excel.CalculationMode.automatic}`);
            }
          });
        }

        async function recalculate() {
          await Excel.run(async (context) => {
            context.application.calculate(Excel.CalculationType.full);
          });
        }

        async function setup() {
          await Excel.run(async (context) => {
            // Create a sample worksheet.
            const sheet = await OfficeHelpers.ExcelUtilities.forceCreateSheet(context.workbook, "Sample");
            sheet.activate();
            sheet.getCell(0, 0).values = [["Row Total"]];

            // Add SUM functions for each row to the first column.
            let rangeAddressesToUse = [];
            for (let row = 1; row < ROW_COUNT; row++) {
              let cell = sheet.getCell(row, 0);
              let sumRange = cell.getResizedRange(0, COLUMN_COUNT - 1).getOffsetRange(0, 1);
              sumRange.load("address");

              // Store the range objects to avoid calling context.sync in the loop.
              rangeAddressesToUse.push(sumRange);
            }

            await context.sync();
            rangeAddressesToUse.forEach((value, index) => {
              let cell = sheet.getCell(index + 1, 0);
              cell.formulas = [[`=SUM(${value.address.substring(value.address.indexOf("!") + 1)})`]];
            });

            // Add a lot of sample data.
            refreshData();
            await context.sync();
          });
        }

        /** Default helper for invoking an action and handling errors. */
        async function tryCatch(callback) {
          try {
            await callback();
          } catch (error) {
            OfficeHelpers.UI.notify(error);
            OfficeHelpers.Utilities.log(error);
          }
        }
    language: typescript
template:
    content: |-
        <section class="ms-Fabric ms-font-m">
            <p>This sample shows some performance optimizations. Toggle the various performance options, then refresh or
                recalculate to see the effects.</p>
        </section>

        <section class="ms-Fabric samples ms-font-m">
            <h3>Setup</h3>
            <button id="setup" class="ms-Button">
                <span class="ms-Button-label">Setup</span>
            </button>
        </section>

        <section class="ms-Fabric samples ms-font-m">
            <h3>Performance settings</h3>
            <button id="toggle-screen-painting" class="ms-Button">
                    <span class="ms-Button-label">Toggle screen painting</span>
            </button>
            <p>
                <button id="toggle-tracking" class="ms-Button">
                    <span class="ms-Button-label">Toggle range tracking</span>
            </button>
                <p>
                    <button id="toggle-calculation" class="ms-Button">
                    <span class="ms-Button-label">Toggle calculation mode</span>
            </button>
        </section>
        <section class="ms-Fabric samples ms-font-m">
            <h3>Try it out</h3>
            <button id="refresh-data" class="ms-Button">
                    <span class="ms-Button-label">Refresh data</span>
            </button>
            <p>
                <button id="recalculate" class="ms-Button">
                <span class="ms-Button-label">Recalculate</span>
            </button>
        </section>
    language: html
style:
    content: |-
        section.samples {
            margin-top: 20px;
        }

        section.samples .ms-Button, section.setup .ms-Button {
            display: block;
            margin-bottom: 5px;
            margin-left: 20px;
            min-width: 80px;
        }
    language: css
libraries: |
    https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js
    @types/office-js

    office-ui-fabric-core@11.1.0/dist/css/fabric.min.css
    office-ui-fabric-js@1.5.0/dist/css/fabric.components.min.css

    core-js@2.4.1/client/core.min.js
    @types/core-js

    @microsoft/office-js-helpers@0.7.4/dist/office.helpers.min.js
    @microsoft/office-js-helpers@0.7.4/dist/office.helpers.d.ts

    jquery@3.1.1
    @types/jquery@3.3.1