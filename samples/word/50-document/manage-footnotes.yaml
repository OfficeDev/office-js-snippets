order: 4
id: word-document-manage-footnotes
name: Footnotes
description: 'This sample shows how to perform basic footnote operations, including insert, get, and delete.'
host: WORD
api_set:
    WordApi: '1.4'
script:
    content: |
        $("#insert-footnote").click(() => tryCatch(insertFootnote));
        $("#get-reference").click(() => tryCatch(getReference));
        $("#get-footnote-type").click(() => tryCatch(getFootnoteType));
        $("#get-footnote-body").click(() => tryCatch(getFootnoteBody));
        $("#get-next-footnote").click(() => tryCatch(getNextFootnote));
        $("#delete-footnote").click(() => tryCatch(deleteFootnote));
        $("#get-first-footnote").click(() => tryCatch(getFirstFootnote));
        $("#get-footnotes-from-body").click(() => tryCatch(getFootnotesFromBody));
        $("#get-footnotes-from-range").click(() => tryCatch(getFootnotesFromRange));
        $("#setup").click(() => tryCatch(setup));

        /** Set a footnote on the selected content. */
        async function insertFootnote() {
          await Word.run(async (context) => {
            const text = $("#input-footnote")
              .val()
              .toString();
            const footnote = context.document.getSelection().insertFootnote(text);
            await context.sync();

            console.log("Inserted footnote.");
          });
        }
        /** Select the footnote's reference mark in the document body. */
        async function getReference() {
          await Word.run(async (context) => {
            const footnotes = context.document.body.footnotes;
            footnotes.load("items/reference");
            await context.sync();

            const referenceNumber = $("#input-reference").val();
            let mark = (referenceNumber as number) - 1;
            const item = footnotes.items[mark];
            let reference = item.reference;
            reference.select();
            await context.sync();

            console.log(`Reference ${referenceNumber} is selected.`);
          });
        }
        /** Get the referenced note's type, which is footnote. */
        async function getFootnoteType() {
          await Word.run(async (context) => {
            const footnotes = context.document.body.footnotes;
            footnotes.load("items/type");
            await context.sync();

            const referenceNumber = $("#input-reference").val();
            let mark = (referenceNumber as number) - 1;
            const itemType = footnotes.items[mark].type;
            console.log(`Note type of footnote ${referenceNumber}: ${itemType}`);
          });
        }
        /** Get the text of the referenced footnote. */
        async function getFootnoteBody() {
          await Word.run(async (context) => {
            const footnotes = context.document.body.footnotes;
            footnotes.load("items/body");
            await context.sync();

            const referenceNumber = $("#input-reference").val();
            let mark = (referenceNumber as number) - 1;
            let footnoteBody = footnotes.items[mark].body.getRange();
            footnoteBody.load("text");
            await context.sync();

            console.log(`Text of footnote ${referenceNumber}: ${footnoteBody.text}`);
          });
        }
        /** Select the next footnote in the document body. */
        async function getNextFootnote() {
          await Word.run(async (context) => {
            const footnotes = context.document.body.footnotes;
            footnotes.load("items/reference");
            await context.sync();

            const referenceNumber = $("#input-reference").val();
            let mark = (referenceNumber as number) - 1;
            const reference = footnotes.items[mark].getNext().reference;
            reference.select();
            console.log("Selected is the next footnote: " + (mark + 2));
          });
        }
        /** Delete this referenced footnote. */
        async function deleteFootnote() {
          await Word.run(async (context) => {
            const footnotes = context.document.body.footnotes;
            footnotes.load("items");
            await context.sync();

            const referenceNumber = $("#input-reference").val();
            let mark = (referenceNumber as number) - 1;
            footnotes.items[mark].delete();
            await context.sync();

            console.log("Footnote deleted.");
          });
        }
        /** Get the first footnote in the document body and select its reference mark. */
        async function getFirstFootnote() {
          await Word.run(async (context) => {
            let reference = context.document.body.footnotes.getFirst().reference;
            reference.select();
            console.log("The first footnote is selected.");
          });
        }
        /** Get the footnotes in the document body. */
        async function getFootnotesFromBody() {
          await Word.run(async (context) => {
            const footnotes = context.document.body.footnotes;
            footnotes.load("length");
            await context.sync();

            console.log("Number of footnotes in the document body: " + footnotes.items.length);
          });
        }
        /** Get the footnotes in the selected document range. */
        async function getFootnotesFromRange() {
          await Word.run(async (context) => {
            const footnotes = context.document.getSelection().footnotes;
            footnotes.load("length");
            await context.sync();

            console.log("Number of footnotes in the selected range: " + footnotes.items.length);
          });
        }
        /** Check for requirement set support and set two paragraphs of sample text. */
        async function setup() {
          if (!Office.context.requirements.isSetSupported("WordApiOnline", "1.1")) {
            console.error(
              "This version of Word doesn't support WordApiOnline 1.1 and so doesn't currently support the footnotes APIs."
            );
            return;
          }
          await Word.run(async (context) => {
            const body = context.document.body;
            body.clear();
            body.insertParagraph(
              "Video provides a powerful way to help you prove your point. When you click Online Video, you can paste in the embed code for the video you want to add. You can also type a keyword to search online for the video that best fits your document.",
              "Start"
            );
            body.paragraphs
              .getLast()
              .insertText(
                "To make your document look professionally produced, Word provides header, footer, cover page, and text box designs that complement each other. For example, you can add a matching Online cover page, header, and sidebar. Click Insert and then choose the Online elements you want from the different Online galleries.",
                "Replace"
              );
          });
        }
        /** Default helper for invoking an action and handling errors. */
        async function tryCatch(callback) {
          try {
            await callback();
          } catch (error) {
            // Note: In a production add-in, you'd want to notify the user through your add-in's UI.
            console.error(error);
          }
        }
    language: typescript
template:
    content: |-
        <section class="ms-font-m">
            <p>This sample shows basic operations using footnotes.</p>
        <p><b>Important</b>: The WordApiOnline 1.1 requirement set is needed for this sample. See <a target="_blank"
                href="https://docs.microsoft.com/javascript/api/requirement-sets/word/word-api-requirement-sets">Word JavaScript
                API requirement sets</a> for supported Word clients.</p>
        </section>

        <section class="setup ms-font-m">
            <h3>Set up</h3>
            <button id="setup" class="ms-Button">
            <span class="ms-Button-label">Add sample text</span>
          </button>
        </section>

        <section class="samples ms-font-m">
            <h3>Try it out</h3>
            <h4>Insert footnote</h4>
            <p>1. Select text in the document.</p>
            <p>
                <label>2. What text do you want to set in the footnote?</label>
                <input id="input-footnote">
                <button id="insert-footnote" class="ms-Button">
            <span class="ms-Button-label">Insert footnote</span>
          </button>
            </p>
            <p>3. Repeat steps 1 and 2 as often as you want.</p>
            <h4>Manage existing footnote</h4>
            <p>
                <label>What's the reference number of the footnote you want to work with?</label>
                <input id="input-reference" style="width:30px;">
            </p>
                <p><b>Note</b>: Ensure the main document body has focus.</p>
                <button id="get-reference" class="ms-Button">
            <span class="ms-Button-label">Get reference</span>
          </button>
                <button id="get-footnote-type" class="ms-Button">
            <span class="ms-Button-label">Get footnote type</span>
          </button>
                <button id="get-footnote-body" class="ms-Button">
              <span class="ms-Button-label">Get footnote body</span>
          </button>
                <button id="get-next-footnote" class="ms-Button">
            <span class="ms-Button-label">Get next footnote</span>
          </button>
                <button id="delete-footnote" class="ms-Button">
            <span class="ms-Button-label">Delete footnote</span>
          </button>
                <h4>Get footnotes</h4>
                <button id="get-first-footnote" class="ms-Button">
            <span class="ms-Button-label">Get first footnote in document body</span>
          </button>
                <button id="get-footnotes-from-body" class="ms-Button">
            <span class="ms-Button-label">Get footnotes from document body</span>
          </button>
                <p>First, select text in the document.
                    <button id="get-footnotes-from-range" class="ms-Button">
            <span class="ms-Button-label">Get footnotes from selected range</span>
          </button>
                </p>
        </section>
    language: html
style:
    content: |-
        section.samples {
            margin-top: 20px;
        }

        section.samples .ms-Button, section.setup .ms-Button {
            display: block;
            margin-bottom: 5px;
            margin-left: 20px;
            min-width: 80px;
        }
    language: css
libraries: |
    https://appsforoffice.microsoft.com/lib/1/hosted/office.js
    @types/office-js

    office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
    office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css

    core-js@2.4.1/client/core.min.js
    @types/core-js

    jquery@3.1.1
    @types/jquery@3.3.1