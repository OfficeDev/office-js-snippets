order: 7
id: excel-events-worksheet-changed
name: Events - Worksheet changed
description: Add event handlers for worksheet onChanged and onAdded events
host: EXCEL
api_set:
    ExcelApi: 1.7
script:
    content: |+
        $("#setup").click(() => tryCatch(setup));
        $("#register-on-changed-handler").click(() => tryCatch(registerOnChangedHandler));
        $("#data-changed").click(() => tryCatch(changeData));
        $("#register-on-add-handler").click(() => tryCatch(registerOnAddHandler));
        $("#add-worksheet").click(() => tryCatch(addWorksheet));

        async function registerOnChangedHandler() {
            await Excel.run(async (context) => {
                let sheet = context.workbook.worksheets.getItem("Sample");
                sheet.onChanged.add(onChange);

                await context.sync();

                OfficeHelpers.UI.notify("A handler has been registered for the onChanged event.");
            });
        }

        async function changeData() {
            await Excel.run(async (context) => {
                let sheet = context.workbook.worksheets.getItem("Sample");
                let range = sheet.getRange("B5");
                range.values = [[800]];
                range.format.autofitColumns();

                await context.sync();

                console.log("B5 value has been changed.");
            });
        }

        async function onChange(event) {
            await Excel.run(async (context) => {
                console.log("Handler for worksheet onChanged event has been triggered.  Data changed address : " + event.address);
            });
        }

        async function registerOnAddHandler() {
            await Excel.run(async (context) => {
                let sheet = context.workbook.worksheets;
                sheet.onAdded.add(onWorksheetAdd);

                await context.sync();

                OfficeHelpers.UI.notify("A handler has been registered for the OnAdded event",
                    "Try adding a worksheet, and watch the console output.");
            });
        }

        async function addWorksheet() {
            await Excel.run(async (context) => {
                let sheet = context.workbook.worksheets.add();
                sheet.load("name, position");

                await context.sync();

                console.log(`Added worksheet named "${sheet.name}" in position ${sheet.position}`);
            });
        }

        async function onWorksheetAdd(event) {
            await Excel.run(async (context) => {
                console.log("Handler for worksheet onAdded event has been triggered.  Newly added worksheet Id : " + event.worksheetId);
            });
        }

        async function setup() {
            await Excel.run(async (context) => {
                let sheet = await OfficeHelpers.ExcelUtilities
                    .forceCreateSheet(context.workbook, "Sample");
                let salesTable = sheet.tables.add('A1:E1', true);
                salesTable.name = "SalesTable";

                salesTable.getHeaderRowRange().values = [["Product", "Qtr1", "Qtr2", "Qtr3", "Qtr4"]];

                salesTable.rows.add(null, [
                   ["Frames", 5000, 7000, 6544, 4377],
                    ["Saddles", 400, 323, 276, 651],
                    ["Brake levers", 12000, 8766, 8456, 9812],
                    ["Chains", 1550, 1088, 692, 853],
                    ["Mirrors", 225, 600, 923, 544],
                    ["Spokes", 6005, 7634, 4589, 8765]
                ]);

                if (Office.context.requirements.isSetSupported("ExcelApi", 1.7)) {
                    sheet.getUsedRange().format.autofitColumns();
                    sheet.getUsedRange().format.autofitRows();
                }

               sheet.activate();

                await context.sync();
            });
        }

        /** Default helper for invoking an action and handling errors. */
        async function tryCatch(callback) {
            try {
                await callback();
            }
            catch (error) {
                OfficeHelpers.UI.notify(error);
                OfficeHelpers.Utilities.log(error);
            }
        }



    language: typescript
template:
    content: |+
        <section class="ms-font-m">
            <p>This sample shows how to add event handlers for worksheet onChanged and onAdded events.</p>
        </section>

        <section class="setup ms-font-m">
            <h3>Set up</h3>
            <button id="setup" class="ms-Button">
                <span class="ms-Button-label">Add sample data</span>
            </button>
        </section>

        <section class="samples ms-font-m">
            <h3>Try it out</h3>
            <button id="register-on-changed-handler" class="ms-Button">
                <span class="ms-Button-label">Register onChanged event handler</span>
            </button>
        </section>

        <section class="samples ms-font-m">
            <p>Changing data in a worksheet triggers the data changed event. You can change the data manually or programmatically.</p>
            <button id="data-changed" class="ms-Button">
                <span class="ms-Button-label">Change data</span>
            </button>
        </section>

        <section class="samples ms-font-m">
            <button id="register-on-add-handler" class="ms-Button">
                <span class="ms-Button-label">Register onAdded event handler</span>
            </button>
        </section>

        <section class="samples ms-font-m">
                <p>Adding a worksheet triggers the on added event. You can add a worksheet manually or programmatically.</p>
            <button id="add-worksheet" class="ms-Button">
                <span class="ms-Button-label">Add worksheet</span>
            </button>
        </section>


    language: html
style:
    content: |
        section.samples {
            margin-top: 20px;
        }

        section.samples .ms-Button, section.setup .ms-Button {
            display: block;
            margin-bottom: 5px;
            margin-left: 20px;
            min-width: 80px;
        }
    language: css
libraries: |
    https://appsforoffice.microsoft.com/lib/1/hosted/office.js
    @types/office-js

    office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
    office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css

    core-js@2.4.1/client/core.min.js
    @types/core-js

    @microsoft/office-js-helpers@0.7.4/dist/office.helpers.min.js
    @microsoft/office-js-helpers@0.7.4/dist/office.helpers.d.ts

    jquery@3.1.1
    @types/jquery@3.3.1
