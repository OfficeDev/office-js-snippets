order: 1
id: excel-range-formatting
name: Formatting
description: Formats a range.
author: OfficeDev
host: EXCEL
api_set:
    ExcelApi: 1.1
script:
    content: |
        $("#setup").click(() => tryCatch(setup));

        $("#set-font-and-fill-color").click(() => tryCatch(setFontAndFillColor));
        $("#set-number-format").click(() => tryCatch(setNumberFormat));

        async function setFontAndFillColor() {
            await Excel.run(async (context) => {
                const sheet = context.workbook.worksheets.getItem("Sample");

                const range = sheet.getRange("B2:E2");
                range.format.fill.color = "#4472C4";;
                range.format.font.color = "white";

                await context.sync();
            });
        }

        async function setNumberFormat() {
            await Excel.run(async (context) => {
                const sheet = context.workbook.worksheets.getItem("Sample");

                const formats = [
                    ["0.00", "0.00"],
                    ["0.00", "0.00"],
                    ["0.00", "0.00"]
                ];

                const range = sheet.getRange("D3:E5");
                range.numberFormat = formats;
                await context.sync();
            });
        }

        async function setup() {
            await Excel.run(async (context) => {
                const sheet = await OfficeHelpers.ExcelUtilities
                    .forceCreateSheet(context.workbook, "Sample");

                const data = [
                    ["Product", "Qty", "Unit Price", "Total Price"],
                    ["Almonds", 2, 7.50, "=C3 * D3"],
                    ["Coffee", 1, 34.50, "=C4 * D4"],
                    ["Chocolate", 5, 9.56, "=C5 * D5"]
                ];

                const range = sheet.getRange("B2:E5");
                range.values = data;
                range.format.autofitColumns();

                sheet.activate();
                
                await context.sync();
            });
        }

        /** Default helper for invoking an action and handling errors. */
        async function tryCatch(callback) {
            try {
                await callback();
            }
            catch (error) {
                // Note: In a production add-in, you'd want to notify the user through your add-in's UI.
                console.error(error);
            }
        }
    language: typescript
template:
    content: |
        <section class="ms-font-m">
            <p>This sample shows how to format a range.</p>
        </section>

        <section class="setup ms-font-m">
            <h3>Set up</h3>
            <button id="setup" class="ms-Button">
                <span class="ms-Button-label">Add sample data</span>
            </button>
        </section>

        <section class="samples ms-font-m">
            <h3>Try it out</h3>
            <button id="set-font-and-fill-color" class="ms-Button">
                <span class="ms-Button-label">Set font and fill color</span>
            </button>   
            <button id="set-number-format" class="ms-Button">
                <span class="ms-Button-label">Set number format</span>
            </button> 
        </section>
    language: html
style:
    content: |
        section.samples {
            margin-top: 20px;
        }

        section.samples .ms-Button, section.setup .ms-Button {
            display: block;
            margin-bottom: 5px;
            margin-left: 20px;
            min-width: 80px;
        }
    language: css
libraries: |
    https://appsforoffice.microsoft.com/lib/1/hosted/office.js
    @types/office-js

    office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
    office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css

    core-js@2.4.1/client/core.min.js
    @types/core-js

    @microsoft/office-js-helpers@0.7.4/dist/office.helpers.min.js
    @microsoft/office-js-helpers@0.7.4/dist/office.helpers.d.ts

    jquery@3.1.1
    @types/jquery@3.3.1