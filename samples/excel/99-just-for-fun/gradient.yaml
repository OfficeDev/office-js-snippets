order: 2
id: excel-just-for-fun-gradient
name: Gradient
description: Uses range formatting and external libraries to draw a colorful gradient within a range. Contributed by Alexander Zlatkovski.
author: AlexanderZlatkovski
host: EXCEL
api_set:
    ExcelApi: '1.4'
script:
    content: |-
        // Set up the click handler.
        document.getElementById("draw-gradient").addEventListener("click", drawGradient);
        document.getElementById("random").addEventListener("click", randomizeColors);

        /** Click-handler for drawing the gradient. */
        async function drawGradient() {
            const drawButton = document.getElementById("draw-gradient") as HTMLButtonElement;
            drawButton.disabled = true;

            try {
                await Excel.run(drawGradientHelper);
            } catch (error) {
                console.log(error);
            }

            drawButton.disabled = false;
        }

        /** Helper function to do the actual gradient-drawing. */
        async function drawGradientHelper(context: Excel.RequestContext) {
            context.workbook.worksheets.getItemOrNullObject("Gradient").delete();
            const sheet = context.workbook.worksheets.add("Gradient");

            sheet.getRange().untrack().format.set({
                rowHeight: 15,
                columnWidth: 15,
                fill: {
                    color: "#1e1e1e"
                }
            });

            let originalSize = parseInt((document.getElementById("size") as HTMLInputElement).value);
            const colors2D = createColorArray(originalSize);

            // Retrieve color values from <input type="color"> elements.
            const topLeftColor = (document.getElementById("top-left") as HTMLInputElement).value;
            const topRightColor = (document.getElementById("top-right") as HTMLInputElement).value;
            const bottomLeftColor = (document.getElementById("bottom-left") as HTMLInputElement).value;
            const bottomRightColor = (document.getElementById("bottom-right") as HTMLInputElement).value;

            // Convert HEX colors to RGB using TinyColor.
            const topLeftRgb = tinycolor(topLeftColor).toRgb();
            const topRightRgb = tinycolor(topRightColor).toRgb();
            const bottomLeftRgb = tinycolor(bottomLeftColor).toRgb();
            const bottomRightRgb = tinycolor(bottomRightColor).toRgb();

            if (Office.context.requirements.isSetSupported("ExcelApi", "1.9")) {
                // ExcelApi 1.9 introduced the setCellProperties APIs to efficiently set different properties
                // across a range without needing to iterate cell-by-cell.
                const cellProperties: Excel.SettableCellProperties[][] =
                colors2D.map(row =>
                    row.map(color =>
                        ({
                            format: {
                                fill: {
                                    color: color
                                }
                            }
                        })
                    )
                );
                sheet.getRangeByIndexes(1, 1, originalSize, originalSize).setCellProperties(cellProperties);
            } else {
                let range = sheet.getCell(1, 1).untrack().getResizedRange(originalSize - 1, originalSize - 1).untrack();
                for (let row = 0; row < originalSize; row++) {
                    for (let col = 0; col < originalSize; col++) {
                        range.getCell(row, col).untrack().format.fill.color = colors2D[row][col];
                    }
                }
            }

            sheet.activate();
            await context.sync();
        }

        function createColorArray(size: number): string[][] {
            // Create a 2D in-memory array to hold the colors.
            let colors2D = Array(size);
            for (let row = 0; row < size; row++) {
                colors2D[row] = Array(size);
            }

            // Get the color values from the color pickers.
            const topLeftColor = (document.getElementById("top-left") as HTMLInputElement).value;
            const topRightColor = (document.getElementById("top-right") as HTMLInputElement).value;
            const bottomLeftColor = (document.getElementById("bottom-left") as HTMLInputElement).value;
            const bottomRightColor = (document.getElementById("bottom-right") as HTMLInputElement).value;

            // Convert HEX to RGB using TinyColor.
            const topLeftRgb = tinycolor(topLeftColor).toRgb();
            const topRightRgb = tinycolor(topRightColor).toRgb();
            const bottomLeftRgb = tinycolor(bottomLeftColor).toRgb();
            const bottomRightRgb = tinycolor(bottomRightColor).toRgb();

            const topColors = getColorsArray(
                topLeftRgb,
                topRightRgb,
                size
            );

            const bottomColors = getColorsArray(
                bottomLeftRgb,
                bottomRightRgb,
                size
            );

            for (let col = 0; col < size; col++) {
                const columnColors = getColorsArray(topColors[col], bottomColors[col], size);
                for (let row = 0; row < size; row++) {
                    colors2D[row][col] = tinycolor(columnColors[row]).toHexString();
                }
            }

            return colors2D;
        }

        /** Helper function to get an array of colors. */
        function getColorsArray(color1, color2, count: number) {
            const result = new Array(count);
            for (let i = 0; i < count; i++) {
                const fraction = i / (count - 1);
                result[i] = {
                    r: color1.r + (color2.r - color1.r) * fraction,
                    g: color1.g + (color2.g - color1.g) * fraction,
                    b: color1.b + (color2.b - color1.b) * fraction
                };
            }
            return result;
        }

        function randomizeColors() {
            // Select all color input elements.
            const colorInputs = document.querySelectorAll("#color-table input[type='color']");
            
            // Iterate through each color input and set a random color.
            colorInputs.forEach((input) => {
                const randomColor = tinycolor.random().toHexString();
                (input as HTMLInputElement).value = randomColor;
            });
        }
    language: typescript
template:
    content: |-
        <header class="ms-Fabric">
            <h2 class="ms-font-l">Color configuration</h2>
        </header>
        <section class="ms-Fabric">
            <div id="color-table" class="ms-font-s">
                <div>Top left</div>
                <table class="ms-font-m">
                    <tr>
                        <td><input id="top-left" type="color" value="#ff0000" /></td>
                        <td><input id="top-right" type="color" value="#00ff00" /></td>
                    </tr>
                    <tr>
                        <td><input id="bottom-left" type="color" value="#0000ff" /></td>
                        <td><input id="bottom-right" type="color" value="#ffff00" /></td>
                    </tr>
                </table>
                <div>
                    Bottom right
                </div>
            </div>
            <button id="random" class="ms-Button">
                <span class="ms-Button-label">Randomize colors</span>
            </button>
            <h2 class="ms-font-l">Size
                <span class="ms-font-m">(width x height)</span>
            </h2>
            <input id="size" type="range" value="25" min="2" max="100"></input>
            <button id="draw-gradient" class="ms-Button ms-Button--primary">
                <span class="ms-Button-label ms-font-l">Draw gradient</span>
            </button>
            <div id="credits">
                <div class="ms-font-s">
                    Uses the <a href="https://github.com/bgrins/TinyColor" target="_blank">TinyColor</a> library.
                </div>
            </div>
        </section>
    language: html
style:
    content: |-
        h2:not(:first-child) {
            margin-top: 35px;
        }

        #color-table {
            width: 130px;
            margin-bottom: 20px;
        }

            #color-table table {
                width: 100%;
            }

            #color-table td:nth-child(2),
            #color-table div:last-child {
                text-align: right;
            }

        #credits {
            margin-top: 60px;
            padding: 10px;
            background: linear-gradient(rgb(150, 150, 200), white);
        }

            #credits div:first-child {
                margin-bottom: 6px;
            }

        #size {
            width: 100%;
        }

        #draw-gradient {
            width: 100%;
        }
    language: css
libraries: |-
    https://appsforoffice.microsoft.com/lib/1/hosted/office.js
    https://appsforoffice.microsoft.com/lib/1/hosted/office.d.ts

    https://unpkg.com/office-ui-fabric-core@11.1.0/dist/css/fabric.min.css
    https://unpkg.com/office-ui-fabric-js@1.5.0/dist/css/fabric.components.min.css

    https://unpkg.com/tinycolor2@1.4.1/tinycolor.js
    @types/tinycolor2